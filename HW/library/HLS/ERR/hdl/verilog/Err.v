// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Err,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-2,HLS_INPUT_CLOCK=6.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=5.288200,HLS_SYN_LAT=161,HLS_SYN_TPT=24,HLS_SYN_MEM=0,HLS_SYN_DSP=10,HLS_SYN_FF=6866,HLS_SYN_LUT=2879,HLS_VERSION=2019_1}" *)

module Err (
        ap_clk,
        ap_rst,
        d_real,
        d_real_ap_vld,
        d_imag,
        d_imag_ap_vld,
        W1_real,
        W1_real_ap_vld,
        W1_imag,
        W1_imag_ap_vld,
        W2_real,
        W2_real_ap_vld,
        W2_imag,
        W2_imag_ap_vld,
        W3_real,
        W3_real_ap_vld,
        W3_imag,
        W3_imag_ap_vld,
        W4_real,
        W4_real_ap_vld,
        W4_imag,
        W4_imag_ap_vld,
        W5_real,
        W5_real_ap_vld,
        W5_imag,
        W5_imag_ap_vld,
        W6_real,
        W6_real_ap_vld,
        W6_imag,
        W6_imag_ap_vld,
        W7_real,
        W7_real_ap_vld,
        W7_imag,
        W7_imag_ap_vld,
        W8_real,
        W8_real_ap_vld,
        W8_imag,
        W8_imag_ap_vld,
        W9_real,
        W9_real_ap_vld,
        W9_imag,
        W9_imag_ap_vld,
        x1_real,
        x1_real_ap_vld,
        x1_imag,
        x1_imag_ap_vld,
        x2_real,
        x2_real_ap_vld,
        x2_imag,
        x2_imag_ap_vld,
        x3_real,
        x3_real_ap_vld,
        x3_imag,
        x3_imag_ap_vld,
        x4_real,
        x4_real_ap_vld,
        x4_imag,
        x4_imag_ap_vld,
        x5_real,
        x5_real_ap_vld,
        x5_imag,
        x5_imag_ap_vld,
        x6_real,
        x6_real_ap_vld,
        x6_imag,
        x6_imag_ap_vld,
        x7_real,
        x7_real_ap_vld,
        x7_imag,
        x7_imag_ap_vld,
        x8_real,
        x8_real_ap_vld,
        x8_imag,
        x8_imag_ap_vld,
        x9_real,
        x9_real_ap_vld,
        x9_imag,
        x9_imag_ap_vld,
        err_real,
        err_real_ap_vld,
        err_imag,
        err_imag_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 24'd1;
parameter    ap_ST_fsm_pp0_stage1 = 24'd2;
parameter    ap_ST_fsm_pp0_stage2 = 24'd4;
parameter    ap_ST_fsm_pp0_stage3 = 24'd8;
parameter    ap_ST_fsm_pp0_stage4 = 24'd16;
parameter    ap_ST_fsm_pp0_stage5 = 24'd32;
parameter    ap_ST_fsm_pp0_stage6 = 24'd64;
parameter    ap_ST_fsm_pp0_stage7 = 24'd128;
parameter    ap_ST_fsm_pp0_stage8 = 24'd256;
parameter    ap_ST_fsm_pp0_stage9 = 24'd512;
parameter    ap_ST_fsm_pp0_stage10 = 24'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 24'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 24'd4096;
parameter    ap_ST_fsm_pp0_stage13 = 24'd8192;
parameter    ap_ST_fsm_pp0_stage14 = 24'd16384;
parameter    ap_ST_fsm_pp0_stage15 = 24'd32768;
parameter    ap_ST_fsm_pp0_stage16 = 24'd65536;
parameter    ap_ST_fsm_pp0_stage17 = 24'd131072;
parameter    ap_ST_fsm_pp0_stage18 = 24'd262144;
parameter    ap_ST_fsm_pp0_stage19 = 24'd524288;
parameter    ap_ST_fsm_pp0_stage20 = 24'd1048576;
parameter    ap_ST_fsm_pp0_stage21 = 24'd2097152;
parameter    ap_ST_fsm_pp0_stage22 = 24'd4194304;
parameter    ap_ST_fsm_pp0_stage23 = 24'd8388608;

input   ap_clk;
input   ap_rst;
input  [31:0] d_real;
input   d_real_ap_vld;
input  [31:0] d_imag;
input   d_imag_ap_vld;
input  [31:0] W1_real;
input   W1_real_ap_vld;
input  [31:0] W1_imag;
input   W1_imag_ap_vld;
input  [31:0] W2_real;
input   W2_real_ap_vld;
input  [31:0] W2_imag;
input   W2_imag_ap_vld;
input  [31:0] W3_real;
input   W3_real_ap_vld;
input  [31:0] W3_imag;
input   W3_imag_ap_vld;
input  [31:0] W4_real;
input   W4_real_ap_vld;
input  [31:0] W4_imag;
input   W4_imag_ap_vld;
input  [31:0] W5_real;
input   W5_real_ap_vld;
input  [31:0] W5_imag;
input   W5_imag_ap_vld;
input  [31:0] W6_real;
input   W6_real_ap_vld;
input  [31:0] W6_imag;
input   W6_imag_ap_vld;
input  [31:0] W7_real;
input   W7_real_ap_vld;
input  [31:0] W7_imag;
input   W7_imag_ap_vld;
input  [31:0] W8_real;
input   W8_real_ap_vld;
input  [31:0] W8_imag;
input   W8_imag_ap_vld;
input  [31:0] W9_real;
input   W9_real_ap_vld;
input  [31:0] W9_imag;
input   W9_imag_ap_vld;
input  [31:0] x1_real;
input   x1_real_ap_vld;
input  [31:0] x1_imag;
input   x1_imag_ap_vld;
input  [31:0] x2_real;
input   x2_real_ap_vld;
input  [31:0] x2_imag;
input   x2_imag_ap_vld;
input  [31:0] x3_real;
input   x3_real_ap_vld;
input  [31:0] x3_imag;
input   x3_imag_ap_vld;
input  [31:0] x4_real;
input   x4_real_ap_vld;
input  [31:0] x4_imag;
input   x4_imag_ap_vld;
input  [31:0] x5_real;
input   x5_real_ap_vld;
input  [31:0] x5_imag;
input   x5_imag_ap_vld;
input  [31:0] x6_real;
input   x6_real_ap_vld;
input  [31:0] x6_imag;
input   x6_imag_ap_vld;
input  [31:0] x7_real;
input   x7_real_ap_vld;
input  [31:0] x7_imag;
input   x7_imag_ap_vld;
input  [31:0] x8_real;
input   x8_real_ap_vld;
input  [31:0] x8_imag;
input   x8_imag_ap_vld;
input  [31:0] x9_real;
input   x9_real_ap_vld;
input  [31:0] x9_imag;
input   x9_imag_ap_vld;
output  [31:0] err_real;
output   err_real_ap_vld;
output  [31:0] err_imag;
output   err_imag_ap_vld;

reg err_real_ap_vld;
reg err_imag_ap_vld;

reg   [31:0] d_real_preg;
reg   [31:0] d_real_in_sig;
reg    d_real_ap_vld_preg;
reg    d_real_ap_vld_in_sig;
reg   [31:0] d_imag_preg;
reg   [31:0] d_imag_in_sig;
reg    d_imag_ap_vld_preg;
reg    d_imag_ap_vld_in_sig;
reg   [31:0] W1_real_preg;
reg   [31:0] W1_real_in_sig;
reg    W1_real_ap_vld_preg;
reg    W1_real_ap_vld_in_sig;
reg   [31:0] W1_imag_preg;
reg   [31:0] W1_imag_in_sig;
reg    W1_imag_ap_vld_preg;
reg    W1_imag_ap_vld_in_sig;
reg   [31:0] W2_real_preg;
reg   [31:0] W2_real_in_sig;
reg    W2_real_ap_vld_preg;
reg    W2_real_ap_vld_in_sig;
reg   [31:0] W2_imag_preg;
reg   [31:0] W2_imag_in_sig;
reg    W2_imag_ap_vld_preg;
reg    W2_imag_ap_vld_in_sig;
reg   [31:0] W3_real_preg;
reg   [31:0] W3_real_in_sig;
reg    W3_real_ap_vld_preg;
reg    W3_real_ap_vld_in_sig;
reg   [31:0] W3_imag_preg;
reg   [31:0] W3_imag_in_sig;
reg    W3_imag_ap_vld_preg;
reg    W3_imag_ap_vld_in_sig;
reg   [31:0] W4_real_preg;
reg   [31:0] W4_real_in_sig;
reg    W4_real_ap_vld_preg;
reg    W4_real_ap_vld_in_sig;
reg   [31:0] W4_imag_preg;
reg   [31:0] W4_imag_in_sig;
reg    W4_imag_ap_vld_preg;
reg    W4_imag_ap_vld_in_sig;
reg   [31:0] W5_real_preg;
reg   [31:0] W5_real_in_sig;
reg    W5_real_ap_vld_preg;
reg    W5_real_ap_vld_in_sig;
reg   [31:0] W5_imag_preg;
reg   [31:0] W5_imag_in_sig;
reg    W5_imag_ap_vld_preg;
reg    W5_imag_ap_vld_in_sig;
reg   [31:0] W6_real_preg;
reg   [31:0] W6_real_in_sig;
reg    W6_real_ap_vld_preg;
reg    W6_real_ap_vld_in_sig;
reg   [31:0] W6_imag_preg;
reg   [31:0] W6_imag_in_sig;
reg    W6_imag_ap_vld_preg;
reg    W6_imag_ap_vld_in_sig;
reg   [31:0] W7_real_preg;
reg   [31:0] W7_real_in_sig;
reg    W7_real_ap_vld_preg;
reg    W7_real_ap_vld_in_sig;
reg   [31:0] W7_imag_preg;
reg   [31:0] W7_imag_in_sig;
reg    W7_imag_ap_vld_preg;
reg    W7_imag_ap_vld_in_sig;
reg   [31:0] W8_real_preg;
reg   [31:0] W8_real_in_sig;
reg    W8_real_ap_vld_preg;
reg    W8_real_ap_vld_in_sig;
reg   [31:0] W8_imag_preg;
reg   [31:0] W8_imag_in_sig;
reg    W8_imag_ap_vld_preg;
reg    W8_imag_ap_vld_in_sig;
reg   [31:0] W9_real_preg;
reg   [31:0] W9_real_in_sig;
reg    W9_real_ap_vld_preg;
reg    W9_real_ap_vld_in_sig;
reg   [31:0] W9_imag_preg;
reg   [31:0] W9_imag_in_sig;
reg    W9_imag_ap_vld_preg;
reg    W9_imag_ap_vld_in_sig;
reg   [31:0] x1_real_preg;
reg   [31:0] x1_real_in_sig;
reg    x1_real_ap_vld_preg;
reg    x1_real_ap_vld_in_sig;
reg   [31:0] x1_imag_preg;
reg   [31:0] x1_imag_in_sig;
reg    x1_imag_ap_vld_preg;
reg    x1_imag_ap_vld_in_sig;
reg   [31:0] x2_real_preg;
reg   [31:0] x2_real_in_sig;
reg    x2_real_ap_vld_preg;
reg    x2_real_ap_vld_in_sig;
reg   [31:0] x2_imag_preg;
reg   [31:0] x2_imag_in_sig;
reg    x2_imag_ap_vld_preg;
reg    x2_imag_ap_vld_in_sig;
reg   [31:0] x3_real_preg;
reg   [31:0] x3_real_in_sig;
reg    x3_real_ap_vld_preg;
reg    x3_real_ap_vld_in_sig;
reg   [31:0] x3_imag_preg;
reg   [31:0] x3_imag_in_sig;
reg    x3_imag_ap_vld_preg;
reg    x3_imag_ap_vld_in_sig;
reg   [31:0] x4_real_preg;
reg   [31:0] x4_real_in_sig;
reg    x4_real_ap_vld_preg;
reg    x4_real_ap_vld_in_sig;
reg   [31:0] x4_imag_preg;
reg   [31:0] x4_imag_in_sig;
reg    x4_imag_ap_vld_preg;
reg    x4_imag_ap_vld_in_sig;
reg   [31:0] x5_real_preg;
reg   [31:0] x5_real_in_sig;
reg    x5_real_ap_vld_preg;
reg    x5_real_ap_vld_in_sig;
reg   [31:0] x5_imag_preg;
reg   [31:0] x5_imag_in_sig;
reg    x5_imag_ap_vld_preg;
reg    x5_imag_ap_vld_in_sig;
reg   [31:0] x6_real_preg;
reg   [31:0] x6_real_in_sig;
reg    x6_real_ap_vld_preg;
reg    x6_real_ap_vld_in_sig;
reg   [31:0] x6_imag_preg;
reg   [31:0] x6_imag_in_sig;
reg    x6_imag_ap_vld_preg;
reg    x6_imag_ap_vld_in_sig;
reg   [31:0] x7_real_preg;
reg   [31:0] x7_real_in_sig;
reg    x7_real_ap_vld_preg;
reg    x7_real_ap_vld_in_sig;
reg   [31:0] x7_imag_preg;
reg   [31:0] x7_imag_in_sig;
reg    x7_imag_ap_vld_preg;
reg    x7_imag_ap_vld_in_sig;
reg   [31:0] x8_real_preg;
reg   [31:0] x8_real_in_sig;
reg    x8_real_ap_vld_preg;
reg    x8_real_ap_vld_in_sig;
reg   [31:0] x8_imag_preg;
reg   [31:0] x8_imag_in_sig;
reg    x8_imag_ap_vld_preg;
reg    x8_imag_ap_vld_in_sig;
reg   [31:0] x9_real_preg;
reg   [31:0] x9_real_in_sig;
reg    x9_real_ap_vld_preg;
reg    x9_real_ap_vld_in_sig;
reg   [31:0] x9_imag_preg;
reg   [31:0] x9_imag_in_sig;
reg    x9_imag_ap_vld_preg;
reg    x9_imag_ap_vld_in_sig;
reg    d_real_blk_n;
(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    d_imag_blk_n;
reg    W1_real_blk_n;
reg    W1_imag_blk_n;
reg    W2_real_blk_n;
reg    W2_imag_blk_n;
reg    W3_real_blk_n;
reg    W3_imag_blk_n;
reg    W4_real_blk_n;
reg    W4_imag_blk_n;
reg    W5_real_blk_n;
reg    W5_imag_blk_n;
reg    W6_real_blk_n;
reg    W6_imag_blk_n;
reg    W7_real_blk_n;
reg    W7_imag_blk_n;
reg    W8_real_blk_n;
reg    W8_imag_blk_n;
reg    W9_real_blk_n;
reg    W9_imag_blk_n;
reg    x1_real_blk_n;
reg    x1_imag_blk_n;
reg    x2_real_blk_n;
reg    x2_imag_blk_n;
reg    x3_real_blk_n;
reg    x3_imag_blk_n;
reg    x4_real_blk_n;
reg    x4_imag_blk_n;
reg    x5_real_blk_n;
reg    x5_imag_blk_n;
reg    x6_real_blk_n;
reg    x6_imag_blk_n;
reg    x7_real_blk_n;
reg    x7_imag_blk_n;
reg    x8_real_blk_n;
reg    x8_imag_blk_n;
reg    x9_real_blk_n;
reg    x9_imag_blk_n;
wire   [31:0] grp_fu_350_p2;
reg   [31:0] reg_374;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state12_pp0_stage11_iter0;
wire    ap_block_state36_pp0_stage11_iter1;
wire    ap_block_state60_pp0_stage11_iter2;
wire    ap_block_state84_pp0_stage11_iter3;
wire    ap_block_state108_pp0_stage11_iter4;
wire    ap_block_state132_pp0_stage11_iter5;
wire    ap_block_state156_pp0_stage11_iter6;
wire    ap_block_pp0_stage11_11001;
wire    ap_CS_fsm_pp0_stage19;
wire    ap_block_state20_pp0_stage19_iter0;
wire    ap_block_state44_pp0_stage19_iter1;
wire    ap_block_state68_pp0_stage19_iter2;
wire    ap_block_state92_pp0_stage19_iter3;
wire    ap_block_state116_pp0_stage19_iter4;
wire    ap_block_state140_pp0_stage19_iter5;
wire    ap_block_pp0_stage19_11001;
wire   [31:0] grp_fu_355_p2;
reg   [31:0] reg_379;
reg   [31:0] reg_384;
wire    ap_CS_fsm_pp0_stage3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state28_pp0_stage3_iter1;
wire    ap_block_state52_pp0_stage3_iter2;
wire    ap_block_state76_pp0_stage3_iter3;
wire    ap_block_state100_pp0_stage3_iter4;
wire    ap_block_state124_pp0_stage3_iter5;
wire    ap_block_state148_pp0_stage3_iter6;
wire    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_state13_pp0_stage12_iter0;
wire    ap_block_state37_pp0_stage12_iter1;
wire    ap_block_state61_pp0_stage12_iter2;
wire    ap_block_state85_pp0_stage12_iter3;
wire    ap_block_state109_pp0_stage12_iter4;
wire    ap_block_state133_pp0_stage12_iter5;
wire    ap_block_state157_pp0_stage12_iter6;
wire    ap_block_pp0_stage12_11001;
reg   [31:0] reg_389;
reg   [31:0] reg_394;
wire    ap_CS_fsm_pp0_stage20;
wire    ap_block_state21_pp0_stage20_iter0;
wire    ap_block_state45_pp0_stage20_iter1;
wire    ap_block_state69_pp0_stage20_iter2;
wire    ap_block_state93_pp0_stage20_iter3;
wire    ap_block_state117_pp0_stage20_iter4;
wire    ap_block_state141_pp0_stage20_iter5;
wire    ap_block_pp0_stage20_11001;
wire    ap_CS_fsm_pp0_stage4;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state29_pp0_stage4_iter1;
wire    ap_block_state53_pp0_stage4_iter2;
wire    ap_block_state77_pp0_stage4_iter3;
wire    ap_block_state101_pp0_stage4_iter4;
wire    ap_block_state125_pp0_stage4_iter5;
wire    ap_block_state149_pp0_stage4_iter6;
wire    ap_block_pp0_stage4_11001;
reg   [31:0] reg_399;
reg   [31:0] reg_404;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_state14_pp0_stage13_iter0;
wire    ap_block_state38_pp0_stage13_iter1;
wire    ap_block_state62_pp0_stage13_iter2;
wire    ap_block_state86_pp0_stage13_iter3;
wire    ap_block_state110_pp0_stage13_iter4;
wire    ap_block_state134_pp0_stage13_iter5;
wire    ap_block_state158_pp0_stage13_iter6;
wire    ap_block_pp0_stage13_11001;
wire    ap_CS_fsm_pp0_stage21;
wire    ap_block_state22_pp0_stage21_iter0;
wire    ap_block_state46_pp0_stage21_iter1;
wire    ap_block_state70_pp0_stage21_iter2;
wire    ap_block_state94_pp0_stage21_iter3;
wire    ap_block_state118_pp0_stage21_iter4;
wire    ap_block_state142_pp0_stage21_iter5;
wire    ap_block_pp0_stage21_11001;
reg   [31:0] reg_409;
reg   [31:0] reg_414;
wire    ap_CS_fsm_pp0_stage5;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_state30_pp0_stage5_iter1;
wire    ap_block_state54_pp0_stage5_iter2;
wire    ap_block_state78_pp0_stage5_iter3;
wire    ap_block_state102_pp0_stage5_iter4;
wire    ap_block_state126_pp0_stage5_iter5;
wire    ap_block_state150_pp0_stage5_iter6;
wire    ap_block_pp0_stage5_11001;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_state15_pp0_stage14_iter0;
wire    ap_block_state39_pp0_stage14_iter1;
wire    ap_block_state63_pp0_stage14_iter2;
wire    ap_block_state87_pp0_stage14_iter3;
wire    ap_block_state111_pp0_stage14_iter4;
wire    ap_block_state135_pp0_stage14_iter5;
wire    ap_block_state159_pp0_stage14_iter6;
wire    ap_block_pp0_stage14_11001;
reg   [31:0] reg_419;
reg   [31:0] reg_424;
wire    ap_CS_fsm_pp0_stage22;
wire    ap_block_state23_pp0_stage22_iter0;
wire    ap_block_state47_pp0_stage22_iter1;
wire    ap_block_state71_pp0_stage22_iter2;
wire    ap_block_state95_pp0_stage22_iter3;
wire    ap_block_state119_pp0_stage22_iter4;
wire    ap_block_state143_pp0_stage22_iter5;
wire    ap_block_pp0_stage22_11001;
wire    ap_CS_fsm_pp0_stage6;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_state31_pp0_stage6_iter1;
wire    ap_block_state55_pp0_stage6_iter2;
wire    ap_block_state79_pp0_stage6_iter3;
wire    ap_block_state103_pp0_stage6_iter4;
wire    ap_block_state127_pp0_stage6_iter5;
wire    ap_block_state151_pp0_stage6_iter6;
wire    ap_block_pp0_stage6_11001;
reg   [31:0] reg_429;
reg   [31:0] reg_434;
wire    ap_CS_fsm_pp0_stage15;
wire    ap_block_state16_pp0_stage15_iter0;
wire    ap_block_state40_pp0_stage15_iter1;
wire    ap_block_state64_pp0_stage15_iter2;
wire    ap_block_state88_pp0_stage15_iter3;
wire    ap_block_state112_pp0_stage15_iter4;
wire    ap_block_state136_pp0_stage15_iter5;
wire    ap_block_state160_pp0_stage15_iter6;
wire    ap_block_pp0_stage15_11001;
wire    ap_CS_fsm_pp0_stage23;
wire    ap_block_state24_pp0_stage23_iter0;
wire    ap_block_state48_pp0_stage23_iter1;
wire    ap_block_state72_pp0_stage23_iter2;
wire    ap_block_state96_pp0_stage23_iter3;
wire    ap_block_state120_pp0_stage23_iter4;
wire    ap_block_state144_pp0_stage23_iter5;
wire    ap_block_pp0_stage23_11001;
reg   [31:0] reg_439;
reg   [31:0] reg_444;
wire    ap_CS_fsm_pp0_stage7;
reg    ap_enable_reg_pp0_iter5;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_state32_pp0_stage7_iter1;
wire    ap_block_state56_pp0_stage7_iter2;
wire    ap_block_state80_pp0_stage7_iter3;
wire    ap_block_state104_pp0_stage7_iter4;
wire    ap_block_state128_pp0_stage7_iter5;
wire    ap_block_state152_pp0_stage7_iter6;
wire    ap_block_pp0_stage7_11001;
wire    ap_CS_fsm_pp0_stage16;
wire    ap_block_state17_pp0_stage16_iter0;
wire    ap_block_state41_pp0_stage16_iter1;
wire    ap_block_state65_pp0_stage16_iter2;
wire    ap_block_state89_pp0_stage16_iter3;
wire    ap_block_state113_pp0_stage16_iter4;
wire    ap_block_state137_pp0_stage16_iter5;
wire    ap_block_state161_pp0_stage16_iter6;
wire    ap_block_pp0_stage16_11001;
reg   [31:0] reg_449;
reg   [31:0] reg_454;
reg    ap_enable_reg_pp0_iter6;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state25_pp0_stage0_iter1;
wire    ap_block_state49_pp0_stage0_iter2;
wire    ap_block_state73_pp0_stage0_iter3;
wire    ap_block_state97_pp0_stage0_iter4;
wire    ap_block_state121_pp0_stage0_iter5;
wire    ap_block_state145_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_11001;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state9_pp0_stage8_iter0;
wire    ap_block_state33_pp0_stage8_iter1;
wire    ap_block_state57_pp0_stage8_iter2;
wire    ap_block_state81_pp0_stage8_iter3;
wire    ap_block_state105_pp0_stage8_iter4;
wire    ap_block_state129_pp0_stage8_iter5;
wire    ap_block_state153_pp0_stage8_iter6;
wire    ap_block_pp0_stage8_11001;
reg   [31:0] reg_460;
reg   [31:0] x9_imag_read_reg_466;
reg   [31:0] x9_real_read_reg_472;
reg   [31:0] x8_imag_read_reg_478;
reg   [31:0] x8_real_read_reg_484;
reg   [31:0] x7_imag_read_reg_490;
reg   [31:0] x7_real_read_reg_496;
reg   [31:0] x6_imag_read_reg_502;
reg   [31:0] x6_real_read_reg_508;
reg   [31:0] x5_imag_read_reg_514;
reg   [31:0] x5_real_read_reg_520;
reg   [31:0] x4_imag_read_reg_526;
reg   [31:0] x4_real_read_reg_532;
reg   [31:0] x3_imag_read_reg_538;
reg   [31:0] x3_real_read_reg_544;
reg   [31:0] x2_imag_read_reg_550;
reg   [31:0] x2_real_read_reg_556;
reg   [31:0] x1_imag_read_reg_562;
reg   [31:0] W9_imag_read_reg_574;
reg   [31:0] W9_real_read_reg_580;
reg   [31:0] W8_imag_read_reg_586;
reg   [31:0] W8_real_read_reg_592;
reg   [31:0] W7_imag_read_reg_598;
reg   [31:0] W7_real_read_reg_604;
reg   [31:0] W6_imag_read_reg_610;
reg   [31:0] W6_real_read_reg_616;
reg   [31:0] W5_imag_read_reg_622;
reg   [31:0] W5_real_read_reg_628;
reg   [31:0] W4_imag_read_reg_634;
reg   [31:0] W4_real_read_reg_640;
reg   [31:0] W3_imag_read_reg_646;
reg   [31:0] W3_real_read_reg_652;
reg   [31:0] W2_imag_read_reg_658;
reg   [31:0] W2_real_read_reg_664;
reg   [31:0] W1_imag_read_reg_670;
reg   [31:0] W1_real_read_reg_676;
reg   [31:0] d_imag_read_reg_682;
reg   [31:0] d_imag_read_reg_682_pp0_iter1_reg;
reg   [31:0] d_imag_read_reg_682_pp0_iter2_reg;
reg   [31:0] d_imag_read_reg_682_pp0_iter3_reg;
reg   [31:0] d_imag_read_reg_682_pp0_iter4_reg;
reg   [31:0] d_imag_read_reg_682_pp0_iter5_reg;
reg   [31:0] d_imag_read_reg_682_pp0_iter6_reg;
reg   [31:0] d_real_read_reg_687;
reg   [31:0] d_real_read_reg_687_pp0_iter1_reg;
reg   [31:0] d_real_read_reg_687_pp0_iter2_reg;
reg   [31:0] d_real_read_reg_687_pp0_iter3_reg;
reg   [31:0] d_real_read_reg_687_pp0_iter4_reg;
reg   [31:0] d_real_read_reg_687_pp0_iter5_reg;
reg   [31:0] d_real_read_reg_687_pp0_iter6_reg;
wire   [31:0] grp_fu_362_p2;
reg   [31:0] tmp_2_reg_692;
wire   [31:0] grp_fu_368_p2;
reg   [31:0] tmp_6_reg_697;
reg   [31:0] tmp_4_reg_702;
reg   [31:0] tmp_8_reg_707;
reg   [31:0] tmp_2_1_reg_712;
reg   [31:0] tmp_6_1_reg_717;
reg   [31:0] tmp_4_1_reg_722;
reg   [31:0] tmp_8_1_reg_727;
reg   [31:0] tmp_2_2_reg_732;
reg   [31:0] tmp_2_2_reg_732_pp0_iter1_reg;
reg   [31:0] tmp_6_2_reg_737;
reg   [31:0] tmp_6_2_reg_737_pp0_iter1_reg;
reg   [31:0] tmp_4_2_reg_742;
reg   [31:0] tmp_4_2_reg_742_pp0_iter1_reg;
reg   [31:0] tmp_8_2_reg_747;
reg   [31:0] tmp_8_2_reg_747_pp0_iter1_reg;
reg   [31:0] tmp_2_3_reg_752;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state10_pp0_stage9_iter0;
wire    ap_block_state34_pp0_stage9_iter1;
wire    ap_block_state58_pp0_stage9_iter2;
wire    ap_block_state82_pp0_stage9_iter3;
wire    ap_block_state106_pp0_stage9_iter4;
wire    ap_block_state130_pp0_stage9_iter5;
wire    ap_block_state154_pp0_stage9_iter6;
wire    ap_block_pp0_stage9_11001;
reg   [31:0] tmp_2_3_reg_752_pp0_iter1_reg;
reg   [31:0] tmp_6_3_reg_757;
reg   [31:0] tmp_6_3_reg_757_pp0_iter1_reg;
reg   [31:0] tmp_4_3_reg_762;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state11_pp0_stage10_iter0;
wire    ap_block_state35_pp0_stage10_iter1;
wire    ap_block_state59_pp0_stage10_iter2;
wire    ap_block_state83_pp0_stage10_iter3;
wire    ap_block_state107_pp0_stage10_iter4;
wire    ap_block_state131_pp0_stage10_iter5;
wire    ap_block_state155_pp0_stage10_iter6;
wire    ap_block_pp0_stage10_11001;
reg   [31:0] tmp_4_3_reg_762_pp0_iter1_reg;
reg   [31:0] tmp_4_3_reg_762_pp0_iter2_reg;
reg   [31:0] tmp_8_3_reg_767;
reg   [31:0] tmp_8_3_reg_767_pp0_iter1_reg;
reg   [31:0] tmp_8_3_reg_767_pp0_iter2_reg;
reg   [31:0] tmp_2_4_reg_772;
reg   [31:0] tmp_2_4_reg_772_pp0_iter1_reg;
reg   [31:0] tmp_2_4_reg_772_pp0_iter2_reg;
reg   [31:0] tmp_6_4_reg_777;
reg   [31:0] tmp_6_4_reg_777_pp0_iter1_reg;
reg   [31:0] tmp_6_4_reg_777_pp0_iter2_reg;
reg   [31:0] tmp_4_4_reg_782;
reg   [31:0] tmp_4_4_reg_782_pp0_iter1_reg;
reg   [31:0] tmp_4_4_reg_782_pp0_iter2_reg;
reg   [31:0] tmp_8_4_reg_787;
reg   [31:0] tmp_8_4_reg_787_pp0_iter1_reg;
reg   [31:0] tmp_8_4_reg_787_pp0_iter2_reg;
reg   [31:0] tmp_2_5_reg_792;
reg   [31:0] tmp_2_5_reg_792_pp0_iter1_reg;
reg   [31:0] tmp_2_5_reg_792_pp0_iter2_reg;
reg   [31:0] tmp_2_5_reg_792_pp0_iter3_reg;
reg   [31:0] tmp_6_5_reg_797;
reg   [31:0] tmp_6_5_reg_797_pp0_iter1_reg;
reg   [31:0] tmp_6_5_reg_797_pp0_iter2_reg;
reg   [31:0] tmp_6_5_reg_797_pp0_iter3_reg;
reg   [31:0] tmp_4_5_reg_802;
reg   [31:0] tmp_4_5_reg_802_pp0_iter1_reg;
reg   [31:0] tmp_4_5_reg_802_pp0_iter2_reg;
reg   [31:0] tmp_4_5_reg_802_pp0_iter3_reg;
reg   [31:0] tmp_8_5_reg_807;
reg   [31:0] tmp_8_5_reg_807_pp0_iter1_reg;
reg   [31:0] tmp_8_5_reg_807_pp0_iter2_reg;
reg   [31:0] tmp_8_5_reg_807_pp0_iter3_reg;
reg   [31:0] tmp_2_6_reg_812;
reg   [31:0] tmp_2_6_reg_812_pp0_iter1_reg;
reg   [31:0] tmp_2_6_reg_812_pp0_iter2_reg;
reg   [31:0] tmp_2_6_reg_812_pp0_iter3_reg;
reg   [31:0] tmp_6_6_reg_817;
reg   [31:0] tmp_6_6_reg_817_pp0_iter1_reg;
reg   [31:0] tmp_6_6_reg_817_pp0_iter2_reg;
reg   [31:0] tmp_6_6_reg_817_pp0_iter3_reg;
reg   [31:0] tmp_4_6_reg_822;
reg   [31:0] tmp_4_6_reg_822_pp0_iter1_reg;
reg   [31:0] tmp_4_6_reg_822_pp0_iter2_reg;
reg   [31:0] tmp_4_6_reg_822_pp0_iter3_reg;
reg   [31:0] tmp_8_6_reg_827;
reg   [31:0] tmp_8_6_reg_827_pp0_iter1_reg;
reg   [31:0] tmp_8_6_reg_827_pp0_iter2_reg;
reg   [31:0] tmp_8_6_reg_827_pp0_iter3_reg;
reg   [31:0] tmp_2_7_reg_832;
wire    ap_CS_fsm_pp0_stage17;
wire    ap_block_state18_pp0_stage17_iter0;
wire    ap_block_state42_pp0_stage17_iter1;
wire    ap_block_state66_pp0_stage17_iter2;
wire    ap_block_state90_pp0_stage17_iter3;
wire    ap_block_state114_pp0_stage17_iter4;
wire    ap_block_state138_pp0_stage17_iter5;
wire    ap_block_state162_pp0_stage17_iter6;
wire    ap_block_pp0_stage17_11001;
reg   [31:0] tmp_2_7_reg_832_pp0_iter1_reg;
reg   [31:0] tmp_2_7_reg_832_pp0_iter2_reg;
reg   [31:0] tmp_2_7_reg_832_pp0_iter3_reg;
reg   [31:0] tmp_2_7_reg_832_pp0_iter4_reg;
reg   [31:0] tmp_6_7_reg_837;
reg   [31:0] tmp_6_7_reg_837_pp0_iter1_reg;
reg   [31:0] tmp_6_7_reg_837_pp0_iter2_reg;
reg   [31:0] tmp_6_7_reg_837_pp0_iter3_reg;
reg   [31:0] tmp_6_7_reg_837_pp0_iter4_reg;
reg   [31:0] tmp_4_7_reg_842;
wire    ap_CS_fsm_pp0_stage18;
wire    ap_block_state19_pp0_stage18_iter0;
wire    ap_block_state43_pp0_stage18_iter1;
wire    ap_block_state67_pp0_stage18_iter2;
wire    ap_block_state91_pp0_stage18_iter3;
wire    ap_block_state115_pp0_stage18_iter4;
wire    ap_block_state139_pp0_stage18_iter5;
wire    ap_block_pp0_stage18_11001;
reg   [31:0] tmp_4_7_reg_842_pp0_iter1_reg;
reg   [31:0] tmp_4_7_reg_842_pp0_iter2_reg;
reg   [31:0] tmp_4_7_reg_842_pp0_iter3_reg;
reg   [31:0] tmp_4_7_reg_842_pp0_iter4_reg;
reg   [31:0] tmp_8_7_reg_847;
reg   [31:0] tmp_8_7_reg_847_pp0_iter1_reg;
reg   [31:0] tmp_8_7_reg_847_pp0_iter2_reg;
reg   [31:0] tmp_8_7_reg_847_pp0_iter3_reg;
reg   [31:0] tmp_8_7_reg_847_pp0_iter4_reg;
reg   [31:0] tmp_2_8_reg_852;
reg   [31:0] tmp_2_8_reg_852_pp0_iter1_reg;
reg   [31:0] tmp_2_8_reg_852_pp0_iter2_reg;
reg   [31:0] tmp_2_8_reg_852_pp0_iter3_reg;
reg   [31:0] tmp_2_8_reg_852_pp0_iter4_reg;
reg   [31:0] tmp_6_8_reg_857;
reg   [31:0] tmp_6_8_reg_857_pp0_iter1_reg;
reg   [31:0] tmp_6_8_reg_857_pp0_iter2_reg;
reg   [31:0] tmp_6_8_reg_857_pp0_iter3_reg;
reg   [31:0] tmp_6_8_reg_857_pp0_iter4_reg;
reg   [31:0] tmp_4_8_reg_862;
reg   [31:0] tmp_4_8_reg_862_pp0_iter1_reg;
reg   [31:0] tmp_4_8_reg_862_pp0_iter2_reg;
reg   [31:0] tmp_4_8_reg_862_pp0_iter3_reg;
reg   [31:0] tmp_4_8_reg_862_pp0_iter4_reg;
reg   [31:0] tmp_4_8_reg_862_pp0_iter5_reg;
reg   [31:0] tmp_8_8_reg_867;
reg   [31:0] tmp_8_8_reg_867_pp0_iter1_reg;
reg   [31:0] tmp_8_8_reg_867_pp0_iter2_reg;
reg   [31:0] tmp_8_8_reg_867_pp0_iter3_reg;
reg   [31:0] tmp_8_8_reg_867_pp0_iter4_reg;
reg   [31:0] tmp_8_8_reg_867_pp0_iter5_reg;
wire    ap_block_pp0_stage23_subdone;
wire    ap_block_pp0_stage17_subdone;
wire    ap_block_pp0_stage17_01001;
reg   [31:0] grp_fu_350_p0;
reg   [31:0] grp_fu_350_p1;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage12;
wire    ap_block_pp0_stage20;
wire    ap_block_pp0_stage5;
wire    ap_block_pp0_stage13;
wire    ap_block_pp0_stage21;
wire    ap_block_pp0_stage6;
wire    ap_block_pp0_stage14;
wire    ap_block_pp0_stage22;
wire    ap_block_pp0_stage7;
wire    ap_block_pp0_stage15;
wire    ap_block_pp0_stage23;
wire    ap_block_pp0_stage8;
wire    ap_block_pp0_stage16;
wire    ap_block_pp0_stage9;
wire    ap_block_pp0_stage17;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage10;
reg   [31:0] grp_fu_355_p0;
reg   [31:0] grp_fu_355_p1;
reg   [31:0] grp_fu_362_p0;
reg   [31:0] grp_fu_362_p1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage11;
reg   [31:0] grp_fu_368_p0;
reg   [31:0] grp_fu_368_p1;
reg   [1:0] grp_fu_350_opcode;
wire    ap_block_pp0_stage4_00001;
wire    ap_block_pp0_stage20_00001;
wire    ap_block_pp0_stage13_00001;
wire    ap_block_pp0_stage6_00001;
wire    ap_block_pp0_stage22_00001;
wire    ap_block_pp0_stage15_00001;
wire    ap_block_pp0_stage8_00001;
reg    ap_block_pp0_stage0_00001;
wire    ap_block_pp0_stage17_00001;
wire    ap_block_pp0_stage12_00001;
wire    ap_block_pp0_stage5_00001;
wire    ap_block_pp0_stage21_00001;
wire    ap_block_pp0_stage14_00001;
wire    ap_block_pp0_stage7_00001;
wire    ap_block_pp0_stage23_00001;
wire    ap_block_pp0_stage16_00001;
wire    ap_block_pp0_stage9_00001;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state26_pp0_stage1_iter1;
wire    ap_block_state50_pp0_stage1_iter2;
wire    ap_block_state74_pp0_stage1_iter3;
wire    ap_block_state98_pp0_stage1_iter4;
wire    ap_block_state122_pp0_stage1_iter5;
wire    ap_block_state146_pp0_stage1_iter6;
wire    ap_block_pp0_stage1_00001;
wire    ap_block_pp0_stage10_00001;
reg    grp_fu_350_ce;
wire    ap_block_pp0_stage1_11001;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state27_pp0_stage2_iter1;
wire    ap_block_state51_pp0_stage2_iter2;
wire    ap_block_state75_pp0_stage2_iter3;
wire    ap_block_state99_pp0_stage2_iter4;
wire    ap_block_state123_pp0_stage2_iter5;
wire    ap_block_state147_pp0_stage2_iter6;
wire    ap_block_pp0_stage2_11001;
reg   [1:0] grp_fu_355_opcode;
reg    grp_fu_355_ce;
reg    grp_fu_362_ce;
reg    grp_fu_368_ce;
reg   [23:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage12_subdone;
wire    ap_block_pp0_stage13_subdone;
wire    ap_block_pp0_stage14_subdone;
wire    ap_block_pp0_stage15_subdone;
wire    ap_block_pp0_stage16_subdone;
wire    ap_reset_idle_pp0;
wire    ap_block_pp0_stage18_subdone;
wire    ap_block_pp0_stage19_subdone;
wire    ap_block_pp0_stage20_subdone;
wire    ap_block_pp0_stage21_subdone;
wire    ap_block_pp0_stage22_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 d_real_preg = 32'd0;
#0 d_real_ap_vld_preg = 1'b0;
#0 d_imag_preg = 32'd0;
#0 d_imag_ap_vld_preg = 1'b0;
#0 W1_real_preg = 32'd0;
#0 W1_real_ap_vld_preg = 1'b0;
#0 W1_imag_preg = 32'd0;
#0 W1_imag_ap_vld_preg = 1'b0;
#0 W2_real_preg = 32'd0;
#0 W2_real_ap_vld_preg = 1'b0;
#0 W2_imag_preg = 32'd0;
#0 W2_imag_ap_vld_preg = 1'b0;
#0 W3_real_preg = 32'd0;
#0 W3_real_ap_vld_preg = 1'b0;
#0 W3_imag_preg = 32'd0;
#0 W3_imag_ap_vld_preg = 1'b0;
#0 W4_real_preg = 32'd0;
#0 W4_real_ap_vld_preg = 1'b0;
#0 W4_imag_preg = 32'd0;
#0 W4_imag_ap_vld_preg = 1'b0;
#0 W5_real_preg = 32'd0;
#0 W5_real_ap_vld_preg = 1'b0;
#0 W5_imag_preg = 32'd0;
#0 W5_imag_ap_vld_preg = 1'b0;
#0 W6_real_preg = 32'd0;
#0 W6_real_ap_vld_preg = 1'b0;
#0 W6_imag_preg = 32'd0;
#0 W6_imag_ap_vld_preg = 1'b0;
#0 W7_real_preg = 32'd0;
#0 W7_real_ap_vld_preg = 1'b0;
#0 W7_imag_preg = 32'd0;
#0 W7_imag_ap_vld_preg = 1'b0;
#0 W8_real_preg = 32'd0;
#0 W8_real_ap_vld_preg = 1'b0;
#0 W8_imag_preg = 32'd0;
#0 W8_imag_ap_vld_preg = 1'b0;
#0 W9_real_preg = 32'd0;
#0 W9_real_ap_vld_preg = 1'b0;
#0 W9_imag_preg = 32'd0;
#0 W9_imag_ap_vld_preg = 1'b0;
#0 x1_real_preg = 32'd0;
#0 x1_real_ap_vld_preg = 1'b0;
#0 x1_imag_preg = 32'd0;
#0 x1_imag_ap_vld_preg = 1'b0;
#0 x2_real_preg = 32'd0;
#0 x2_real_ap_vld_preg = 1'b0;
#0 x2_imag_preg = 32'd0;
#0 x2_imag_ap_vld_preg = 1'b0;
#0 x3_real_preg = 32'd0;
#0 x3_real_ap_vld_preg = 1'b0;
#0 x3_imag_preg = 32'd0;
#0 x3_imag_ap_vld_preg = 1'b0;
#0 x4_real_preg = 32'd0;
#0 x4_real_ap_vld_preg = 1'b0;
#0 x4_imag_preg = 32'd0;
#0 x4_imag_ap_vld_preg = 1'b0;
#0 x5_real_preg = 32'd0;
#0 x5_real_ap_vld_preg = 1'b0;
#0 x5_imag_preg = 32'd0;
#0 x5_imag_ap_vld_preg = 1'b0;
#0 x6_real_preg = 32'd0;
#0 x6_real_ap_vld_preg = 1'b0;
#0 x6_imag_preg = 32'd0;
#0 x6_imag_ap_vld_preg = 1'b0;
#0 x7_real_preg = 32'd0;
#0 x7_real_ap_vld_preg = 1'b0;
#0 x7_imag_preg = 32'd0;
#0 x7_imag_ap_vld_preg = 1'b0;
#0 x8_real_preg = 32'd0;
#0 x8_real_ap_vld_preg = 1'b0;
#0 x8_imag_preg = 32'd0;
#0 x8_imag_ap_vld_preg = 1'b0;
#0 x9_real_preg = 32'd0;
#0 x9_real_ap_vld_preg = 1'b0;
#0 x9_imag_preg = 32'd0;
#0 x9_imag_ap_vld_preg = 1'b0;
#0 ap_CS_fsm = 24'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

Err_faddfsub_32nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Err_faddfsub_32nsbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_350_p0),
    .din1(grp_fu_350_p1),
    .opcode(grp_fu_350_opcode),
    .ce(grp_fu_350_ce),
    .dout(grp_fu_350_p2)
);

Err_faddfsub_32nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Err_faddfsub_32nsbkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_355_p0),
    .din1(grp_fu_355_p1),
    .opcode(grp_fu_355_opcode),
    .ce(grp_fu_355_ce),
    .dout(grp_fu_355_p2)
);

Err_fmul_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Err_fmul_32ns_32ncud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_362_p0),
    .din1(grp_fu_362_p1),
    .ce(grp_fu_362_ce),
    .dout(grp_fu_362_p2)
);

Err_fmul_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Err_fmul_32ns_32ncud_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_368_p0),
    .din1(grp_fu_368_p1),
    .ce(grp_fu_368_ce),
    .dout(grp_fu_368_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W1_imag_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            W1_imag_ap_vld_preg <= 1'b0;
        end else if ((1'b1 == W1_imag_ap_vld)) begin
            W1_imag_ap_vld_preg <= W1_imag_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W1_imag_preg <= 32'd0;
    end else begin
        if ((1'b1 == W1_imag_ap_vld)) begin
            W1_imag_preg <= W1_imag;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W1_real_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            W1_real_ap_vld_preg <= 1'b0;
        end else if ((1'b1 == W1_real_ap_vld)) begin
            W1_real_ap_vld_preg <= W1_real_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W1_real_preg <= 32'd0;
    end else begin
        if ((1'b1 == W1_real_ap_vld)) begin
            W1_real_preg <= W1_real;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W2_imag_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            W2_imag_ap_vld_preg <= 1'b0;
        end else if ((1'b1 == W2_imag_ap_vld)) begin
            W2_imag_ap_vld_preg <= W2_imag_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W2_imag_preg <= 32'd0;
    end else begin
        if ((1'b1 == W2_imag_ap_vld)) begin
            W2_imag_preg <= W2_imag;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W2_real_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            W2_real_ap_vld_preg <= 1'b0;
        end else if ((1'b1 == W2_real_ap_vld)) begin
            W2_real_ap_vld_preg <= W2_real_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W2_real_preg <= 32'd0;
    end else begin
        if ((1'b1 == W2_real_ap_vld)) begin
            W2_real_preg <= W2_real;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W3_imag_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            W3_imag_ap_vld_preg <= 1'b0;
        end else if ((1'b1 == W3_imag_ap_vld)) begin
            W3_imag_ap_vld_preg <= W3_imag_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W3_imag_preg <= 32'd0;
    end else begin
        if ((1'b1 == W3_imag_ap_vld)) begin
            W3_imag_preg <= W3_imag;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W3_real_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            W3_real_ap_vld_preg <= 1'b0;
        end else if ((1'b1 == W3_real_ap_vld)) begin
            W3_real_ap_vld_preg <= W3_real_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W3_real_preg <= 32'd0;
    end else begin
        if ((1'b1 == W3_real_ap_vld)) begin
            W3_real_preg <= W3_real;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W4_imag_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            W4_imag_ap_vld_preg <= 1'b0;
        end else if ((1'b1 == W4_imag_ap_vld)) begin
            W4_imag_ap_vld_preg <= W4_imag_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W4_imag_preg <= 32'd0;
    end else begin
        if ((1'b1 == W4_imag_ap_vld)) begin
            W4_imag_preg <= W4_imag;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W4_real_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            W4_real_ap_vld_preg <= 1'b0;
        end else if ((1'b1 == W4_real_ap_vld)) begin
            W4_real_ap_vld_preg <= W4_real_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W4_real_preg <= 32'd0;
    end else begin
        if ((1'b1 == W4_real_ap_vld)) begin
            W4_real_preg <= W4_real;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W5_imag_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            W5_imag_ap_vld_preg <= 1'b0;
        end else if ((1'b1 == W5_imag_ap_vld)) begin
            W5_imag_ap_vld_preg <= W5_imag_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W5_imag_preg <= 32'd0;
    end else begin
        if ((1'b1 == W5_imag_ap_vld)) begin
            W5_imag_preg <= W5_imag;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W5_real_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            W5_real_ap_vld_preg <= 1'b0;
        end else if ((1'b1 == W5_real_ap_vld)) begin
            W5_real_ap_vld_preg <= W5_real_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W5_real_preg <= 32'd0;
    end else begin
        if ((1'b1 == W5_real_ap_vld)) begin
            W5_real_preg <= W5_real;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W6_imag_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            W6_imag_ap_vld_preg <= 1'b0;
        end else if ((1'b1 == W6_imag_ap_vld)) begin
            W6_imag_ap_vld_preg <= W6_imag_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W6_imag_preg <= 32'd0;
    end else begin
        if ((1'b1 == W6_imag_ap_vld)) begin
            W6_imag_preg <= W6_imag;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W6_real_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            W6_real_ap_vld_preg <= 1'b0;
        end else if ((1'b1 == W6_real_ap_vld)) begin
            W6_real_ap_vld_preg <= W6_real_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W6_real_preg <= 32'd0;
    end else begin
        if ((1'b1 == W6_real_ap_vld)) begin
            W6_real_preg <= W6_real;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W7_imag_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            W7_imag_ap_vld_preg <= 1'b0;
        end else if ((1'b1 == W7_imag_ap_vld)) begin
            W7_imag_ap_vld_preg <= W7_imag_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W7_imag_preg <= 32'd0;
    end else begin
        if ((1'b1 == W7_imag_ap_vld)) begin
            W7_imag_preg <= W7_imag;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W7_real_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            W7_real_ap_vld_preg <= 1'b0;
        end else if ((1'b1 == W7_real_ap_vld)) begin
            W7_real_ap_vld_preg <= W7_real_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W7_real_preg <= 32'd0;
    end else begin
        if ((1'b1 == W7_real_ap_vld)) begin
            W7_real_preg <= W7_real;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W8_imag_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            W8_imag_ap_vld_preg <= 1'b0;
        end else if ((1'b1 == W8_imag_ap_vld)) begin
            W8_imag_ap_vld_preg <= W8_imag_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W8_imag_preg <= 32'd0;
    end else begin
        if ((1'b1 == W8_imag_ap_vld)) begin
            W8_imag_preg <= W8_imag;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W8_real_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            W8_real_ap_vld_preg <= 1'b0;
        end else if ((1'b1 == W8_real_ap_vld)) begin
            W8_real_ap_vld_preg <= W8_real_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W8_real_preg <= 32'd0;
    end else begin
        if ((1'b1 == W8_real_ap_vld)) begin
            W8_real_preg <= W8_real;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W9_imag_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            W9_imag_ap_vld_preg <= 1'b0;
        end else if ((1'b1 == W9_imag_ap_vld)) begin
            W9_imag_ap_vld_preg <= W9_imag_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W9_imag_preg <= 32'd0;
    end else begin
        if ((1'b1 == W9_imag_ap_vld)) begin
            W9_imag_preg <= W9_imag;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W9_real_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            W9_real_ap_vld_preg <= 1'b0;
        end else if ((1'b1 == W9_real_ap_vld)) begin
            W9_real_ap_vld_preg <= W9_real_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        W9_real_preg <= 32'd0;
    end else begin
        if ((1'b1 == W9_real_ap_vld)) begin
            W9_real_preg <= W9_real;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage23) & (1'b0 == ap_block_pp0_stage23_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage23) & (1'b0 == ap_block_pp0_stage23_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage23) & (1'b0 == ap_block_pp0_stage23_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage23) & (1'b0 == ap_block_pp0_stage23_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage23) & (1'b0 == ap_block_pp0_stage23_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage23) & (1'b0 == ap_block_pp0_stage23_subdone))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if (((ap_enable_reg_pp0_iter5 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_subdone))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        d_imag_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            d_imag_ap_vld_preg <= 1'b0;
        end else if ((d_imag_ap_vld == 1'b1)) begin
            d_imag_ap_vld_preg <= d_imag_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        d_imag_preg <= 32'd0;
    end else begin
        if ((d_imag_ap_vld == 1'b1)) begin
            d_imag_preg <= d_imag;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        d_real_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            d_real_ap_vld_preg <= 1'b0;
        end else if ((d_real_ap_vld == 1'b1)) begin
            d_real_ap_vld_preg <= d_real_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        d_real_preg <= 32'd0;
    end else begin
        if ((d_real_ap_vld == 1'b1)) begin
            d_real_preg <= d_real;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x1_imag_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            x1_imag_ap_vld_preg <= 1'b0;
        end else if ((x1_imag_ap_vld == 1'b1)) begin
            x1_imag_ap_vld_preg <= x1_imag_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x1_imag_preg <= 32'd0;
    end else begin
        if ((x1_imag_ap_vld == 1'b1)) begin
            x1_imag_preg <= x1_imag;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x1_real_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            x1_real_ap_vld_preg <= 1'b0;
        end else if ((x1_real_ap_vld == 1'b1)) begin
            x1_real_ap_vld_preg <= x1_real_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x1_real_preg <= 32'd0;
    end else begin
        if ((x1_real_ap_vld == 1'b1)) begin
            x1_real_preg <= x1_real;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x2_imag_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            x2_imag_ap_vld_preg <= 1'b0;
        end else if ((x2_imag_ap_vld == 1'b1)) begin
            x2_imag_ap_vld_preg <= x2_imag_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x2_imag_preg <= 32'd0;
    end else begin
        if ((x2_imag_ap_vld == 1'b1)) begin
            x2_imag_preg <= x2_imag;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x2_real_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            x2_real_ap_vld_preg <= 1'b0;
        end else if ((x2_real_ap_vld == 1'b1)) begin
            x2_real_ap_vld_preg <= x2_real_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x2_real_preg <= 32'd0;
    end else begin
        if ((x2_real_ap_vld == 1'b1)) begin
            x2_real_preg <= x2_real;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x3_imag_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            x3_imag_ap_vld_preg <= 1'b0;
        end else if ((x3_imag_ap_vld == 1'b1)) begin
            x3_imag_ap_vld_preg <= x3_imag_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x3_imag_preg <= 32'd0;
    end else begin
        if ((x3_imag_ap_vld == 1'b1)) begin
            x3_imag_preg <= x3_imag;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x3_real_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            x3_real_ap_vld_preg <= 1'b0;
        end else if ((x3_real_ap_vld == 1'b1)) begin
            x3_real_ap_vld_preg <= x3_real_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x3_real_preg <= 32'd0;
    end else begin
        if ((x3_real_ap_vld == 1'b1)) begin
            x3_real_preg <= x3_real;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x4_imag_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            x4_imag_ap_vld_preg <= 1'b0;
        end else if ((x4_imag_ap_vld == 1'b1)) begin
            x4_imag_ap_vld_preg <= x4_imag_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x4_imag_preg <= 32'd0;
    end else begin
        if ((x4_imag_ap_vld == 1'b1)) begin
            x4_imag_preg <= x4_imag;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x4_real_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            x4_real_ap_vld_preg <= 1'b0;
        end else if ((x4_real_ap_vld == 1'b1)) begin
            x4_real_ap_vld_preg <= x4_real_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x4_real_preg <= 32'd0;
    end else begin
        if ((x4_real_ap_vld == 1'b1)) begin
            x4_real_preg <= x4_real;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x5_imag_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            x5_imag_ap_vld_preg <= 1'b0;
        end else if ((x5_imag_ap_vld == 1'b1)) begin
            x5_imag_ap_vld_preg <= x5_imag_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x5_imag_preg <= 32'd0;
    end else begin
        if ((x5_imag_ap_vld == 1'b1)) begin
            x5_imag_preg <= x5_imag;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x5_real_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            x5_real_ap_vld_preg <= 1'b0;
        end else if ((x5_real_ap_vld == 1'b1)) begin
            x5_real_ap_vld_preg <= x5_real_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x5_real_preg <= 32'd0;
    end else begin
        if ((x5_real_ap_vld == 1'b1)) begin
            x5_real_preg <= x5_real;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x6_imag_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            x6_imag_ap_vld_preg <= 1'b0;
        end else if ((x6_imag_ap_vld == 1'b1)) begin
            x6_imag_ap_vld_preg <= x6_imag_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x6_imag_preg <= 32'd0;
    end else begin
        if ((x6_imag_ap_vld == 1'b1)) begin
            x6_imag_preg <= x6_imag;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x6_real_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            x6_real_ap_vld_preg <= 1'b0;
        end else if ((x6_real_ap_vld == 1'b1)) begin
            x6_real_ap_vld_preg <= x6_real_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x6_real_preg <= 32'd0;
    end else begin
        if ((x6_real_ap_vld == 1'b1)) begin
            x6_real_preg <= x6_real;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x7_imag_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            x7_imag_ap_vld_preg <= 1'b0;
        end else if ((x7_imag_ap_vld == 1'b1)) begin
            x7_imag_ap_vld_preg <= x7_imag_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x7_imag_preg <= 32'd0;
    end else begin
        if ((x7_imag_ap_vld == 1'b1)) begin
            x7_imag_preg <= x7_imag;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x7_real_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            x7_real_ap_vld_preg <= 1'b0;
        end else if ((x7_real_ap_vld == 1'b1)) begin
            x7_real_ap_vld_preg <= x7_real_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x7_real_preg <= 32'd0;
    end else begin
        if ((x7_real_ap_vld == 1'b1)) begin
            x7_real_preg <= x7_real;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x8_imag_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            x8_imag_ap_vld_preg <= 1'b0;
        end else if ((x8_imag_ap_vld == 1'b1)) begin
            x8_imag_ap_vld_preg <= x8_imag_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x8_imag_preg <= 32'd0;
    end else begin
        if ((x8_imag_ap_vld == 1'b1)) begin
            x8_imag_preg <= x8_imag;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x8_real_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            x8_real_ap_vld_preg <= 1'b0;
        end else if ((x8_real_ap_vld == 1'b1)) begin
            x8_real_ap_vld_preg <= x8_real_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x8_real_preg <= 32'd0;
    end else begin
        if ((x8_real_ap_vld == 1'b1)) begin
            x8_real_preg <= x8_real;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x9_imag_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            x9_imag_ap_vld_preg <= 1'b0;
        end else if ((x9_imag_ap_vld == 1'b1)) begin
            x9_imag_ap_vld_preg <= x9_imag_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x9_imag_preg <= 32'd0;
    end else begin
        if ((x9_imag_ap_vld == 1'b1)) begin
            x9_imag_preg <= x9_imag;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x9_real_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b1 == 1'b1))) begin
            x9_real_ap_vld_preg <= 1'b0;
        end else if ((x9_real_ap_vld == 1'b1)) begin
            x9_real_ap_vld_preg <= x9_real_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x9_real_preg <= 32'd0;
    end else begin
        if ((x9_real_ap_vld == 1'b1)) begin
            x9_real_preg <= x9_real;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W1_imag_read_reg_670 <= W1_imag_in_sig;
        W1_real_read_reg_676 <= W1_real_in_sig;
        W2_imag_read_reg_658 <= W2_imag_in_sig;
        W2_real_read_reg_664 <= W2_real_in_sig;
        W3_imag_read_reg_646 <= W3_imag_in_sig;
        W3_real_read_reg_652 <= W3_real_in_sig;
        W4_imag_read_reg_634 <= W4_imag_in_sig;
        W4_real_read_reg_640 <= W4_real_in_sig;
        W5_imag_read_reg_622 <= W5_imag_in_sig;
        W5_real_read_reg_628 <= W5_real_in_sig;
        W6_imag_read_reg_610 <= W6_imag_in_sig;
        W6_real_read_reg_616 <= W6_real_in_sig;
        W7_imag_read_reg_598 <= W7_imag_in_sig;
        W7_real_read_reg_604 <= W7_real_in_sig;
        W8_imag_read_reg_586 <= W8_imag_in_sig;
        W8_real_read_reg_592 <= W8_real_in_sig;
        W9_imag_read_reg_574 <= W9_imag_in_sig;
        W9_real_read_reg_580 <= W9_real_in_sig;
        d_imag_read_reg_682 <= d_imag_in_sig;
        d_imag_read_reg_682_pp0_iter1_reg <= d_imag_read_reg_682;
        d_imag_read_reg_682_pp0_iter2_reg <= d_imag_read_reg_682_pp0_iter1_reg;
        d_imag_read_reg_682_pp0_iter3_reg <= d_imag_read_reg_682_pp0_iter2_reg;
        d_imag_read_reg_682_pp0_iter4_reg <= d_imag_read_reg_682_pp0_iter3_reg;
        d_imag_read_reg_682_pp0_iter5_reg <= d_imag_read_reg_682_pp0_iter4_reg;
        d_imag_read_reg_682_pp0_iter6_reg <= d_imag_read_reg_682_pp0_iter5_reg;
        d_real_read_reg_687 <= d_real_in_sig;
        d_real_read_reg_687_pp0_iter1_reg <= d_real_read_reg_687;
        d_real_read_reg_687_pp0_iter2_reg <= d_real_read_reg_687_pp0_iter1_reg;
        d_real_read_reg_687_pp0_iter3_reg <= d_real_read_reg_687_pp0_iter2_reg;
        d_real_read_reg_687_pp0_iter4_reg <= d_real_read_reg_687_pp0_iter3_reg;
        d_real_read_reg_687_pp0_iter5_reg <= d_real_read_reg_687_pp0_iter4_reg;
        d_real_read_reg_687_pp0_iter6_reg <= d_real_read_reg_687_pp0_iter5_reg;
        x1_imag_read_reg_562 <= x1_imag_in_sig;
        x2_imag_read_reg_550 <= x2_imag_in_sig;
        x2_real_read_reg_556 <= x2_real_in_sig;
        x3_imag_read_reg_538 <= x3_imag_in_sig;
        x3_real_read_reg_544 <= x3_real_in_sig;
        x4_imag_read_reg_526 <= x4_imag_in_sig;
        x4_real_read_reg_532 <= x4_real_in_sig;
        x5_imag_read_reg_514 <= x5_imag_in_sig;
        x5_real_read_reg_520 <= x5_real_in_sig;
        x6_imag_read_reg_502 <= x6_imag_in_sig;
        x6_real_read_reg_508 <= x6_real_in_sig;
        x7_imag_read_reg_490 <= x7_imag_in_sig;
        x7_real_read_reg_496 <= x7_real_in_sig;
        x8_imag_read_reg_478 <= x8_imag_in_sig;
        x8_real_read_reg_484 <= x8_real_in_sig;
        x9_imag_read_reg_466 <= x9_imag_in_sig;
        x9_real_read_reg_472 <= x9_real_in_sig;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage19_11001) & (1'b1 == ap_CS_fsm_pp0_stage19) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11) & (1'b1 == 1'b1)))) begin
        reg_374 <= grp_fu_350_p2;
        reg_379 <= grp_fu_355_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        reg_384 <= grp_fu_350_p2;
        reg_389 <= grp_fu_355_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage20_11001) & (1'b1 == ap_CS_fsm_pp0_stage20) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        reg_394 <= grp_fu_350_p2;
        reg_399 <= grp_fu_355_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage21_11001) & (1'b1 == ap_CS_fsm_pp0_stage21) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage13_11001) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        reg_404 <= grp_fu_350_p2;
        reg_409 <= grp_fu_355_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)))) begin
        reg_414 <= grp_fu_350_p2;
        reg_419 <= grp_fu_355_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage22_11001) & (1'b1 == ap_CS_fsm_pp0_stage22) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        reg_424 <= grp_fu_350_p2;
        reg_429 <= grp_fu_355_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b0 == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
        reg_434 <= grp_fu_350_p2;
        reg_439 <= grp_fu_355_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage16_11001) & (1'b1 == ap_CS_fsm_pp0_stage16) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)))) begin
        reg_444 <= grp_fu_350_p2;
        reg_449 <= grp_fu_355_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        reg_454 <= grp_fu_350_p2;
        reg_460 <= grp_fu_355_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == 1'b1))) begin
        tmp_2_1_reg_712 <= grp_fu_362_p2;
        tmp_6_1_reg_717 <= grp_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b1 == 1'b1))) begin
        tmp_2_2_reg_732 <= grp_fu_362_p2;
        tmp_6_2_reg_737 <= grp_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        tmp_2_2_reg_732_pp0_iter1_reg <= tmp_2_2_reg_732;
        tmp_6_2_reg_737_pp0_iter1_reg <= tmp_6_2_reg_737;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b1 == 1'b1))) begin
        tmp_2_3_reg_752 <= grp_fu_362_p2;
        tmp_6_3_reg_757 <= grp_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        tmp_2_3_reg_752_pp0_iter1_reg <= tmp_2_3_reg_752;
        tmp_6_3_reg_757_pp0_iter1_reg <= tmp_6_3_reg_757;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11) & (1'b1 == 1'b1))) begin
        tmp_2_4_reg_772 <= grp_fu_362_p2;
        tmp_6_4_reg_777 <= grp_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        tmp_2_4_reg_772_pp0_iter1_reg <= tmp_2_4_reg_772;
        tmp_2_4_reg_772_pp0_iter2_reg <= tmp_2_4_reg_772_pp0_iter1_reg;
        tmp_6_4_reg_777_pp0_iter1_reg <= tmp_6_4_reg_777;
        tmp_6_4_reg_777_pp0_iter2_reg <= tmp_6_4_reg_777_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage13_11001) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b1 == 1'b1))) begin
        tmp_2_5_reg_792 <= grp_fu_362_p2;
        tmp_6_5_reg_797 <= grp_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage13_11001) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
        tmp_2_5_reg_792_pp0_iter1_reg <= tmp_2_5_reg_792;
        tmp_2_5_reg_792_pp0_iter2_reg <= tmp_2_5_reg_792_pp0_iter1_reg;
        tmp_2_5_reg_792_pp0_iter3_reg <= tmp_2_5_reg_792_pp0_iter2_reg;
        tmp_6_5_reg_797_pp0_iter1_reg <= tmp_6_5_reg_797;
        tmp_6_5_reg_797_pp0_iter2_reg <= tmp_6_5_reg_797_pp0_iter1_reg;
        tmp_6_5_reg_797_pp0_iter3_reg <= tmp_6_5_reg_797_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b1 == 1'b1))) begin
        tmp_2_6_reg_812 <= grp_fu_362_p2;
        tmp_6_6_reg_817 <= grp_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        tmp_2_6_reg_812_pp0_iter1_reg <= tmp_2_6_reg_812;
        tmp_2_6_reg_812_pp0_iter2_reg <= tmp_2_6_reg_812_pp0_iter1_reg;
        tmp_2_6_reg_812_pp0_iter3_reg <= tmp_2_6_reg_812_pp0_iter2_reg;
        tmp_6_6_reg_817_pp0_iter1_reg <= tmp_6_6_reg_817;
        tmp_6_6_reg_817_pp0_iter2_reg <= tmp_6_6_reg_817_pp0_iter1_reg;
        tmp_6_6_reg_817_pp0_iter3_reg <= tmp_6_6_reg_817_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_11001))) begin
        tmp_2_7_reg_832 <= grp_fu_362_p2;
        tmp_6_7_reg_837 <= grp_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_11001))) begin
        tmp_2_7_reg_832_pp0_iter1_reg <= tmp_2_7_reg_832;
        tmp_2_7_reg_832_pp0_iter2_reg <= tmp_2_7_reg_832_pp0_iter1_reg;
        tmp_2_7_reg_832_pp0_iter3_reg <= tmp_2_7_reg_832_pp0_iter2_reg;
        tmp_2_7_reg_832_pp0_iter4_reg <= tmp_2_7_reg_832_pp0_iter3_reg;
        tmp_6_7_reg_837_pp0_iter1_reg <= tmp_6_7_reg_837;
        tmp_6_7_reg_837_pp0_iter2_reg <= tmp_6_7_reg_837_pp0_iter1_reg;
        tmp_6_7_reg_837_pp0_iter3_reg <= tmp_6_7_reg_837_pp0_iter2_reg;
        tmp_6_7_reg_837_pp0_iter4_reg <= tmp_6_7_reg_837_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage19_11001) & (1'b1 == ap_CS_fsm_pp0_stage19) & (1'b1 == 1'b1))) begin
        tmp_2_8_reg_852 <= grp_fu_362_p2;
        tmp_6_8_reg_857 <= grp_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage19_11001) & (1'b1 == ap_CS_fsm_pp0_stage19))) begin
        tmp_2_8_reg_852_pp0_iter1_reg <= tmp_2_8_reg_852;
        tmp_2_8_reg_852_pp0_iter2_reg <= tmp_2_8_reg_852_pp0_iter1_reg;
        tmp_2_8_reg_852_pp0_iter3_reg <= tmp_2_8_reg_852_pp0_iter2_reg;
        tmp_2_8_reg_852_pp0_iter4_reg <= tmp_2_8_reg_852_pp0_iter3_reg;
        tmp_6_8_reg_857_pp0_iter1_reg <= tmp_6_8_reg_857;
        tmp_6_8_reg_857_pp0_iter2_reg <= tmp_6_8_reg_857_pp0_iter1_reg;
        tmp_6_8_reg_857_pp0_iter3_reg <= tmp_6_8_reg_857_pp0_iter2_reg;
        tmp_6_8_reg_857_pp0_iter4_reg <= tmp_6_8_reg_857_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == 1'b1))) begin
        tmp_2_reg_692 <= grp_fu_362_p2;
        tmp_6_reg_697 <= grp_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b1 == 1'b1))) begin
        tmp_4_1_reg_722 <= grp_fu_362_p2;
        tmp_8_1_reg_727 <= grp_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b1 == 1'b1))) begin
        tmp_4_2_reg_742 <= grp_fu_362_p2;
        tmp_8_2_reg_747 <= grp_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        tmp_4_2_reg_742_pp0_iter1_reg <= tmp_4_2_reg_742;
        tmp_8_2_reg_747_pp0_iter1_reg <= tmp_8_2_reg_747;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b1 == 1'b1))) begin
        tmp_4_3_reg_762 <= grp_fu_362_p2;
        tmp_8_3_reg_767 <= grp_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        tmp_4_3_reg_762_pp0_iter1_reg <= tmp_4_3_reg_762;
        tmp_4_3_reg_762_pp0_iter2_reg <= tmp_4_3_reg_762_pp0_iter1_reg;
        tmp_8_3_reg_767_pp0_iter1_reg <= tmp_8_3_reg_767;
        tmp_8_3_reg_767_pp0_iter2_reg <= tmp_8_3_reg_767_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b1 == 1'b1))) begin
        tmp_4_4_reg_782 <= grp_fu_362_p2;
        tmp_8_4_reg_787 <= grp_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        tmp_4_4_reg_782_pp0_iter1_reg <= tmp_4_4_reg_782;
        tmp_4_4_reg_782_pp0_iter2_reg <= tmp_4_4_reg_782_pp0_iter1_reg;
        tmp_8_4_reg_787_pp0_iter1_reg <= tmp_8_4_reg_787;
        tmp_8_4_reg_787_pp0_iter2_reg <= tmp_8_4_reg_787_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b1 == 1'b1))) begin
        tmp_4_5_reg_802 <= grp_fu_362_p2;
        tmp_8_5_reg_807 <= grp_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        tmp_4_5_reg_802_pp0_iter1_reg <= tmp_4_5_reg_802;
        tmp_4_5_reg_802_pp0_iter2_reg <= tmp_4_5_reg_802_pp0_iter1_reg;
        tmp_4_5_reg_802_pp0_iter3_reg <= tmp_4_5_reg_802_pp0_iter2_reg;
        tmp_8_5_reg_807_pp0_iter1_reg <= tmp_8_5_reg_807;
        tmp_8_5_reg_807_pp0_iter2_reg <= tmp_8_5_reg_807_pp0_iter1_reg;
        tmp_8_5_reg_807_pp0_iter3_reg <= tmp_8_5_reg_807_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage16_11001) & (1'b1 == ap_CS_fsm_pp0_stage16) & (1'b1 == 1'b1))) begin
        tmp_4_6_reg_822 <= grp_fu_362_p2;
        tmp_8_6_reg_827 <= grp_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage16_11001) & (1'b1 == ap_CS_fsm_pp0_stage16))) begin
        tmp_4_6_reg_822_pp0_iter1_reg <= tmp_4_6_reg_822;
        tmp_4_6_reg_822_pp0_iter2_reg <= tmp_4_6_reg_822_pp0_iter1_reg;
        tmp_4_6_reg_822_pp0_iter3_reg <= tmp_4_6_reg_822_pp0_iter2_reg;
        tmp_8_6_reg_827_pp0_iter1_reg <= tmp_8_6_reg_827;
        tmp_8_6_reg_827_pp0_iter2_reg <= tmp_8_6_reg_827_pp0_iter1_reg;
        tmp_8_6_reg_827_pp0_iter3_reg <= tmp_8_6_reg_827_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage18) & (1'b0 == ap_block_pp0_stage18_11001))) begin
        tmp_4_7_reg_842 <= grp_fu_362_p2;
        tmp_8_7_reg_847 <= grp_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage18) & (1'b0 == ap_block_pp0_stage18_11001))) begin
        tmp_4_7_reg_842_pp0_iter1_reg <= tmp_4_7_reg_842;
        tmp_4_7_reg_842_pp0_iter2_reg <= tmp_4_7_reg_842_pp0_iter1_reg;
        tmp_4_7_reg_842_pp0_iter3_reg <= tmp_4_7_reg_842_pp0_iter2_reg;
        tmp_4_7_reg_842_pp0_iter4_reg <= tmp_4_7_reg_842_pp0_iter3_reg;
        tmp_8_7_reg_847_pp0_iter1_reg <= tmp_8_7_reg_847;
        tmp_8_7_reg_847_pp0_iter2_reg <= tmp_8_7_reg_847_pp0_iter1_reg;
        tmp_8_7_reg_847_pp0_iter3_reg <= tmp_8_7_reg_847_pp0_iter2_reg;
        tmp_8_7_reg_847_pp0_iter4_reg <= tmp_8_7_reg_847_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage20_11001) & (1'b1 == ap_CS_fsm_pp0_stage20) & (1'b1 == 1'b1))) begin
        tmp_4_8_reg_862 <= grp_fu_362_p2;
        tmp_8_8_reg_867 <= grp_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage20_11001) & (1'b1 == ap_CS_fsm_pp0_stage20))) begin
        tmp_4_8_reg_862_pp0_iter1_reg <= tmp_4_8_reg_862;
        tmp_4_8_reg_862_pp0_iter2_reg <= tmp_4_8_reg_862_pp0_iter1_reg;
        tmp_4_8_reg_862_pp0_iter3_reg <= tmp_4_8_reg_862_pp0_iter2_reg;
        tmp_4_8_reg_862_pp0_iter4_reg <= tmp_4_8_reg_862_pp0_iter3_reg;
        tmp_4_8_reg_862_pp0_iter5_reg <= tmp_4_8_reg_862_pp0_iter4_reg;
        tmp_8_8_reg_867_pp0_iter1_reg <= tmp_8_8_reg_867;
        tmp_8_8_reg_867_pp0_iter2_reg <= tmp_8_8_reg_867_pp0_iter1_reg;
        tmp_8_8_reg_867_pp0_iter3_reg <= tmp_8_8_reg_867_pp0_iter2_reg;
        tmp_8_8_reg_867_pp0_iter4_reg <= tmp_8_8_reg_867_pp0_iter3_reg;
        tmp_8_8_reg_867_pp0_iter5_reg <= tmp_8_8_reg_867_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == 1'b1))) begin
        tmp_4_reg_702 <= grp_fu_362_p2;
        tmp_8_reg_707 <= grp_fu_368_p2;
    end
end

always @ (*) begin
    if ((1'b1 == W1_imag_ap_vld)) begin
        W1_imag_ap_vld_in_sig = W1_imag_ap_vld;
    end else begin
        W1_imag_ap_vld_in_sig = W1_imag_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W1_imag_blk_n = W1_imag_ap_vld;
    end else begin
        W1_imag_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == W1_imag_ap_vld)) begin
        W1_imag_in_sig = W1_imag;
    end else begin
        W1_imag_in_sig = W1_imag_preg;
    end
end

always @ (*) begin
    if ((1'b1 == W1_real_ap_vld)) begin
        W1_real_ap_vld_in_sig = W1_real_ap_vld;
    end else begin
        W1_real_ap_vld_in_sig = W1_real_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W1_real_blk_n = W1_real_ap_vld;
    end else begin
        W1_real_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == W1_real_ap_vld)) begin
        W1_real_in_sig = W1_real;
    end else begin
        W1_real_in_sig = W1_real_preg;
    end
end

always @ (*) begin
    if ((1'b1 == W2_imag_ap_vld)) begin
        W2_imag_ap_vld_in_sig = W2_imag_ap_vld;
    end else begin
        W2_imag_ap_vld_in_sig = W2_imag_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W2_imag_blk_n = W2_imag_ap_vld;
    end else begin
        W2_imag_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == W2_imag_ap_vld)) begin
        W2_imag_in_sig = W2_imag;
    end else begin
        W2_imag_in_sig = W2_imag_preg;
    end
end

always @ (*) begin
    if ((1'b1 == W2_real_ap_vld)) begin
        W2_real_ap_vld_in_sig = W2_real_ap_vld;
    end else begin
        W2_real_ap_vld_in_sig = W2_real_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W2_real_blk_n = W2_real_ap_vld;
    end else begin
        W2_real_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == W2_real_ap_vld)) begin
        W2_real_in_sig = W2_real;
    end else begin
        W2_real_in_sig = W2_real_preg;
    end
end

always @ (*) begin
    if ((1'b1 == W3_imag_ap_vld)) begin
        W3_imag_ap_vld_in_sig = W3_imag_ap_vld;
    end else begin
        W3_imag_ap_vld_in_sig = W3_imag_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W3_imag_blk_n = W3_imag_ap_vld;
    end else begin
        W3_imag_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == W3_imag_ap_vld)) begin
        W3_imag_in_sig = W3_imag;
    end else begin
        W3_imag_in_sig = W3_imag_preg;
    end
end

always @ (*) begin
    if ((1'b1 == W3_real_ap_vld)) begin
        W3_real_ap_vld_in_sig = W3_real_ap_vld;
    end else begin
        W3_real_ap_vld_in_sig = W3_real_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W3_real_blk_n = W3_real_ap_vld;
    end else begin
        W3_real_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == W3_real_ap_vld)) begin
        W3_real_in_sig = W3_real;
    end else begin
        W3_real_in_sig = W3_real_preg;
    end
end

always @ (*) begin
    if ((1'b1 == W4_imag_ap_vld)) begin
        W4_imag_ap_vld_in_sig = W4_imag_ap_vld;
    end else begin
        W4_imag_ap_vld_in_sig = W4_imag_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W4_imag_blk_n = W4_imag_ap_vld;
    end else begin
        W4_imag_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == W4_imag_ap_vld)) begin
        W4_imag_in_sig = W4_imag;
    end else begin
        W4_imag_in_sig = W4_imag_preg;
    end
end

always @ (*) begin
    if ((1'b1 == W4_real_ap_vld)) begin
        W4_real_ap_vld_in_sig = W4_real_ap_vld;
    end else begin
        W4_real_ap_vld_in_sig = W4_real_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W4_real_blk_n = W4_real_ap_vld;
    end else begin
        W4_real_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == W4_real_ap_vld)) begin
        W4_real_in_sig = W4_real;
    end else begin
        W4_real_in_sig = W4_real_preg;
    end
end

always @ (*) begin
    if ((1'b1 == W5_imag_ap_vld)) begin
        W5_imag_ap_vld_in_sig = W5_imag_ap_vld;
    end else begin
        W5_imag_ap_vld_in_sig = W5_imag_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W5_imag_blk_n = W5_imag_ap_vld;
    end else begin
        W5_imag_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == W5_imag_ap_vld)) begin
        W5_imag_in_sig = W5_imag;
    end else begin
        W5_imag_in_sig = W5_imag_preg;
    end
end

always @ (*) begin
    if ((1'b1 == W5_real_ap_vld)) begin
        W5_real_ap_vld_in_sig = W5_real_ap_vld;
    end else begin
        W5_real_ap_vld_in_sig = W5_real_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W5_real_blk_n = W5_real_ap_vld;
    end else begin
        W5_real_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == W5_real_ap_vld)) begin
        W5_real_in_sig = W5_real;
    end else begin
        W5_real_in_sig = W5_real_preg;
    end
end

always @ (*) begin
    if ((1'b1 == W6_imag_ap_vld)) begin
        W6_imag_ap_vld_in_sig = W6_imag_ap_vld;
    end else begin
        W6_imag_ap_vld_in_sig = W6_imag_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W6_imag_blk_n = W6_imag_ap_vld;
    end else begin
        W6_imag_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == W6_imag_ap_vld)) begin
        W6_imag_in_sig = W6_imag;
    end else begin
        W6_imag_in_sig = W6_imag_preg;
    end
end

always @ (*) begin
    if ((1'b1 == W6_real_ap_vld)) begin
        W6_real_ap_vld_in_sig = W6_real_ap_vld;
    end else begin
        W6_real_ap_vld_in_sig = W6_real_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W6_real_blk_n = W6_real_ap_vld;
    end else begin
        W6_real_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == W6_real_ap_vld)) begin
        W6_real_in_sig = W6_real;
    end else begin
        W6_real_in_sig = W6_real_preg;
    end
end

always @ (*) begin
    if ((1'b1 == W7_imag_ap_vld)) begin
        W7_imag_ap_vld_in_sig = W7_imag_ap_vld;
    end else begin
        W7_imag_ap_vld_in_sig = W7_imag_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W7_imag_blk_n = W7_imag_ap_vld;
    end else begin
        W7_imag_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == W7_imag_ap_vld)) begin
        W7_imag_in_sig = W7_imag;
    end else begin
        W7_imag_in_sig = W7_imag_preg;
    end
end

always @ (*) begin
    if ((1'b1 == W7_real_ap_vld)) begin
        W7_real_ap_vld_in_sig = W7_real_ap_vld;
    end else begin
        W7_real_ap_vld_in_sig = W7_real_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W7_real_blk_n = W7_real_ap_vld;
    end else begin
        W7_real_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == W7_real_ap_vld)) begin
        W7_real_in_sig = W7_real;
    end else begin
        W7_real_in_sig = W7_real_preg;
    end
end

always @ (*) begin
    if ((1'b1 == W8_imag_ap_vld)) begin
        W8_imag_ap_vld_in_sig = W8_imag_ap_vld;
    end else begin
        W8_imag_ap_vld_in_sig = W8_imag_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W8_imag_blk_n = W8_imag_ap_vld;
    end else begin
        W8_imag_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == W8_imag_ap_vld)) begin
        W8_imag_in_sig = W8_imag;
    end else begin
        W8_imag_in_sig = W8_imag_preg;
    end
end

always @ (*) begin
    if ((1'b1 == W8_real_ap_vld)) begin
        W8_real_ap_vld_in_sig = W8_real_ap_vld;
    end else begin
        W8_real_ap_vld_in_sig = W8_real_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W8_real_blk_n = W8_real_ap_vld;
    end else begin
        W8_real_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == W8_real_ap_vld)) begin
        W8_real_in_sig = W8_real;
    end else begin
        W8_real_in_sig = W8_real_preg;
    end
end

always @ (*) begin
    if ((1'b1 == W9_imag_ap_vld)) begin
        W9_imag_ap_vld_in_sig = W9_imag_ap_vld;
    end else begin
        W9_imag_ap_vld_in_sig = W9_imag_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W9_imag_blk_n = W9_imag_ap_vld;
    end else begin
        W9_imag_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == W9_imag_ap_vld)) begin
        W9_imag_in_sig = W9_imag;
    end else begin
        W9_imag_in_sig = W9_imag_preg;
    end
end

always @ (*) begin
    if ((1'b1 == W9_real_ap_vld)) begin
        W9_real_ap_vld_in_sig = W9_real_ap_vld;
    end else begin
        W9_real_ap_vld_in_sig = W9_real_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W9_real_blk_n = W9_real_ap_vld;
    end else begin
        W9_real_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == W9_real_ap_vld)) begin
        W9_real_in_sig = W9_real;
    end else begin
        W9_real_in_sig = W9_real_preg;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if ((d_imag_ap_vld == 1'b1)) begin
        d_imag_ap_vld_in_sig = d_imag_ap_vld;
    end else begin
        d_imag_ap_vld_in_sig = d_imag_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        d_imag_blk_n = d_imag_ap_vld;
    end else begin
        d_imag_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((d_imag_ap_vld == 1'b1)) begin
        d_imag_in_sig = d_imag;
    end else begin
        d_imag_in_sig = d_imag_preg;
    end
end

always @ (*) begin
    if ((d_real_ap_vld == 1'b1)) begin
        d_real_ap_vld_in_sig = d_real_ap_vld;
    end else begin
        d_real_ap_vld_in_sig = d_real_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        d_real_blk_n = d_real_ap_vld;
    end else begin
        d_real_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((d_real_ap_vld == 1'b1)) begin
        d_real_in_sig = d_real;
    end else begin
        d_real_in_sig = d_real_preg;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_11001))) begin
        err_imag_ap_vld = 1'b1;
    end else begin
        err_imag_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_11001))) begin
        err_real_ap_vld = 1'b1;
    end else begin
        err_real_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage16_11001) & (1'b1 == ap_CS_fsm_pp0_stage16)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23)) | ((1'b0 == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage22_11001) & (1'b1 == ap_CS_fsm_pp0_stage22)) | ((1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage21_11001) & (1'b1 == ap_CS_fsm_pp0_stage21)) | ((1'b0 == ap_block_pp0_stage13_11001) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage20_11001) & (1'b1 == ap_CS_fsm_pp0_stage20)) | ((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage19_11001) & (1'b1 == ap_CS_fsm_pp0_stage19)) | ((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage18) & (1'b0 == ap_block_pp0_stage18_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_11001)))) begin
        grp_fu_350_ce = 1'b1;
    end else begin
        grp_fu_350_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage10_00001)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_00001)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage9_00001)) | ((1'b1 == ap_CS_fsm_pp0_stage16) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage16_00001)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage7_00001)) | ((1'b1 == ap_CS_fsm_pp0_stage23) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage23_00001)) | ((1'b1 == ap_CS_fsm_pp0_stage14) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage14_00001)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5_00001)) | ((1'b1 == ap_CS_fsm_pp0_stage21) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage21_00001)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage12_00001)))) begin
        grp_fu_350_opcode = 2'd1;
    end else if ((((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_00001)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage8_00001)) | ((1'b1 == ap_CS_fsm_pp0_stage15) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage15_00001)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage6_00001)) | ((1'b1 == ap_CS_fsm_pp0_stage22) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage22_00001)) | ((1'b1 == ap_CS_fsm_pp0_stage13) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage13_00001)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage4_00001)) | ((1'b1 == ap_CS_fsm_pp0_stage20) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage20_00001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_00001)))) begin
        grp_fu_350_opcode = 2'd0;
    end else begin
        grp_fu_350_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage10))) begin
        grp_fu_350_p0 = d_real_read_reg_687_pp0_iter6_reg;
    end else if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_350_p0 = reg_454;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage9)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17)))) begin
        grp_fu_350_p0 = reg_444;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage16) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage16)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_350_p0 = reg_434;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage8)) | ((1'b1 == ap_CS_fsm_pp0_stage23) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage23)))) begin
        grp_fu_350_p0 = reg_424;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage7)) | ((1'b1 == ap_CS_fsm_pp0_stage15) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage15)))) begin
        grp_fu_350_p0 = reg_414;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage22) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage22)) | ((1'b1 == ap_CS_fsm_pp0_stage14) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage14)))) begin
        grp_fu_350_p0 = reg_404;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage6)) | ((1'b1 == ap_CS_fsm_pp0_stage21) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage21)))) begin
        grp_fu_350_p0 = reg_394;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5)) | ((1'b1 == ap_CS_fsm_pp0_stage13) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage13)))) begin
        grp_fu_350_p0 = reg_384;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage20) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage20)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage12)))) begin
        grp_fu_350_p0 = reg_374;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage4))) begin
        grp_fu_350_p0 = tmp_2_reg_692;
    end else begin
        grp_fu_350_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage10))) begin
        grp_fu_350_p1 = reg_454;
    end else if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_350_p1 = tmp_4_8_reg_862_pp0_iter5_reg;
    end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17))) begin
        grp_fu_350_p1 = tmp_2_8_reg_852_pp0_iter4_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage9))) begin
        grp_fu_350_p1 = tmp_4_7_reg_842_pp0_iter4_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_350_p1 = tmp_2_7_reg_832_pp0_iter4_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage16) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage16))) begin
        grp_fu_350_p1 = tmp_4_6_reg_822_pp0_iter3_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage8))) begin
        grp_fu_350_p1 = tmp_2_6_reg_812_pp0_iter3_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage23) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage23))) begin
        grp_fu_350_p1 = tmp_4_5_reg_802_pp0_iter3_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage15) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage15))) begin
        grp_fu_350_p1 = tmp_2_5_reg_792_pp0_iter3_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage7))) begin
        grp_fu_350_p1 = tmp_4_4_reg_782_pp0_iter2_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage22) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage22))) begin
        grp_fu_350_p1 = tmp_2_4_reg_772_pp0_iter2_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage14) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage14))) begin
        grp_fu_350_p1 = tmp_4_3_reg_762_pp0_iter2_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage6))) begin
        grp_fu_350_p1 = tmp_2_3_reg_752_pp0_iter1_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage21) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage21))) begin
        grp_fu_350_p1 = tmp_4_2_reg_742_pp0_iter1_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage13) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage13))) begin
        grp_fu_350_p1 = tmp_2_2_reg_732_pp0_iter1_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5))) begin
        grp_fu_350_p1 = tmp_4_1_reg_722;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage20) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage20))) begin
        grp_fu_350_p1 = tmp_2_1_reg_712;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage12))) begin
        grp_fu_350_p1 = tmp_4_reg_702;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage4))) begin
        grp_fu_350_p1 = 32'd0;
    end else begin
        grp_fu_350_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage16_11001) & (1'b1 == ap_CS_fsm_pp0_stage16)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23)) | ((1'b0 == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage22_11001) & (1'b1 == ap_CS_fsm_pp0_stage22)) | ((1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage21_11001) & (1'b1 == ap_CS_fsm_pp0_stage21)) | ((1'b0 == ap_block_pp0_stage13_11001) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage20_11001) & (1'b1 == ap_CS_fsm_pp0_stage20)) | ((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage19_11001) & (1'b1 == ap_CS_fsm_pp0_stage19)) | ((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage18) & (1'b0 == ap_block_pp0_stage18_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_11001)))) begin
        grp_fu_355_ce = 1'b1;
    end else begin
        grp_fu_355_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage10_00001))) begin
        grp_fu_355_opcode = 2'd1;
    end else if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_00001)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage9_00001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_00001)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage8_00001)) | ((1'b1 == ap_CS_fsm_pp0_stage16) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage16_00001)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage7_00001)) | ((1'b1 == ap_CS_fsm_pp0_stage23) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage23_00001)) | ((1'b1 == ap_CS_fsm_pp0_stage15) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage15_00001)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage6_00001)) | ((1'b1 == ap_CS_fsm_pp0_stage22) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage22_00001)) | ((1'b1 == ap_CS_fsm_pp0_stage14) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage14_00001)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5_00001)) | ((1'b1 == ap_CS_fsm_pp0_stage21) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage21_00001)) | ((1'b1 == ap_CS_fsm_pp0_stage13) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage13_00001)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage4_00001)) | ((1'b1 == ap_CS_fsm_pp0_stage20) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage20_00001)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage12_00001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_00001)))) begin
        grp_fu_355_opcode = 2'd0;
    end else begin
        grp_fu_355_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage10))) begin
        grp_fu_355_p0 = d_imag_read_reg_682_pp0_iter6_reg;
    end else if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_355_p0 = reg_460;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage9)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17)))) begin
        grp_fu_355_p0 = reg_449;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage16) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage16)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_355_p0 = reg_439;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage8)) | ((1'b1 == ap_CS_fsm_pp0_stage23) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage23)))) begin
        grp_fu_355_p0 = reg_429;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage7)) | ((1'b1 == ap_CS_fsm_pp0_stage15) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage15)))) begin
        grp_fu_355_p0 = reg_419;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage22) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage22)) | ((1'b1 == ap_CS_fsm_pp0_stage14) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage14)))) begin
        grp_fu_355_p0 = reg_409;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage6)) | ((1'b1 == ap_CS_fsm_pp0_stage21) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage21)))) begin
        grp_fu_355_p0 = reg_399;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5)) | ((1'b1 == ap_CS_fsm_pp0_stage13) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage13)))) begin
        grp_fu_355_p0 = reg_389;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage20) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage20)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage12)))) begin
        grp_fu_355_p0 = reg_379;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage4))) begin
        grp_fu_355_p0 = tmp_6_reg_697;
    end else begin
        grp_fu_355_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage10))) begin
        grp_fu_355_p1 = reg_460;
    end else if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_355_p1 = tmp_8_8_reg_867_pp0_iter5_reg;
    end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17))) begin
        grp_fu_355_p1 = tmp_6_8_reg_857_pp0_iter4_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage9))) begin
        grp_fu_355_p1 = tmp_8_7_reg_847_pp0_iter4_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_355_p1 = tmp_6_7_reg_837_pp0_iter4_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage16) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage16))) begin
        grp_fu_355_p1 = tmp_8_6_reg_827_pp0_iter3_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage8))) begin
        grp_fu_355_p1 = tmp_6_6_reg_817_pp0_iter3_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage23) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage23))) begin
        grp_fu_355_p1 = tmp_8_5_reg_807_pp0_iter3_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage15) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage15))) begin
        grp_fu_355_p1 = tmp_6_5_reg_797_pp0_iter3_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage7))) begin
        grp_fu_355_p1 = tmp_8_4_reg_787_pp0_iter2_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage22) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage22))) begin
        grp_fu_355_p1 = tmp_6_4_reg_777_pp0_iter2_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage14) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage14))) begin
        grp_fu_355_p1 = tmp_8_3_reg_767_pp0_iter2_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage6))) begin
        grp_fu_355_p1 = tmp_6_3_reg_757_pp0_iter1_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage21) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage21))) begin
        grp_fu_355_p1 = tmp_8_2_reg_747_pp0_iter1_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage13) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage13))) begin
        grp_fu_355_p1 = tmp_6_2_reg_737_pp0_iter1_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5))) begin
        grp_fu_355_p1 = tmp_8_1_reg_727;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage20) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage20))) begin
        grp_fu_355_p1 = tmp_6_1_reg_717;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage12))) begin
        grp_fu_355_p1 = tmp_8_reg_707;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage4))) begin
        grp_fu_355_p1 = 32'd0;
    end else begin
        grp_fu_355_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage16_11001) & (1'b1 == ap_CS_fsm_pp0_stage16)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage13_11001) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage20_11001) & (1'b1 == ap_CS_fsm_pp0_stage20)) | ((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage19_11001) & (1'b1 == ap_CS_fsm_pp0_stage19)) | ((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage18) & (1'b0 == ap_block_pp0_stage18_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_11001)))) begin
        grp_fu_362_ce = 1'b1;
    end else begin
        grp_fu_362_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17))) begin
            grp_fu_362_p0 = x9_imag_read_reg_466;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16))) begin
            grp_fu_362_p0 = x9_real_read_reg_472;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15))) begin
            grp_fu_362_p0 = x8_imag_read_reg_478;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14))) begin
            grp_fu_362_p0 = x8_real_read_reg_484;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13))) begin
            grp_fu_362_p0 = x7_imag_read_reg_490;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12))) begin
            grp_fu_362_p0 = x7_real_read_reg_496;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11))) begin
            grp_fu_362_p0 = x6_imag_read_reg_502;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10))) begin
            grp_fu_362_p0 = x6_real_read_reg_508;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9))) begin
            grp_fu_362_p0 = x5_imag_read_reg_514;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
            grp_fu_362_p0 = x5_real_read_reg_520;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7))) begin
            grp_fu_362_p0 = x4_imag_read_reg_526;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6))) begin
            grp_fu_362_p0 = x4_real_read_reg_532;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5))) begin
            grp_fu_362_p0 = x3_imag_read_reg_538;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
            grp_fu_362_p0 = x3_real_read_reg_544;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            grp_fu_362_p0 = x2_imag_read_reg_550;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            grp_fu_362_p0 = x2_real_read_reg_556;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            grp_fu_362_p0 = x1_imag_read_reg_562;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_362_p0 = x1_real_in_sig;
        end else begin
            grp_fu_362_p0 = 'bx;
        end
    end else begin
        grp_fu_362_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17))) begin
            grp_fu_362_p1 = W9_imag_read_reg_574;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16))) begin
            grp_fu_362_p1 = W9_real_read_reg_580;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15))) begin
            grp_fu_362_p1 = W8_imag_read_reg_586;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14))) begin
            grp_fu_362_p1 = W8_real_read_reg_592;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13))) begin
            grp_fu_362_p1 = W7_imag_read_reg_598;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12))) begin
            grp_fu_362_p1 = W7_real_read_reg_604;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11))) begin
            grp_fu_362_p1 = W6_imag_read_reg_610;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10))) begin
            grp_fu_362_p1 = W6_real_read_reg_616;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9))) begin
            grp_fu_362_p1 = W5_imag_read_reg_622;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
            grp_fu_362_p1 = W5_real_read_reg_628;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7))) begin
            grp_fu_362_p1 = W4_imag_read_reg_634;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6))) begin
            grp_fu_362_p1 = W4_real_read_reg_640;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5))) begin
            grp_fu_362_p1 = W3_imag_read_reg_646;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
            grp_fu_362_p1 = W3_real_read_reg_652;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            grp_fu_362_p1 = W2_imag_read_reg_658;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            grp_fu_362_p1 = W2_real_read_reg_664;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            grp_fu_362_p1 = W1_imag_read_reg_670;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_362_p1 = W1_real_in_sig;
        end else begin
            grp_fu_362_p1 = 'bx;
        end
    end else begin
        grp_fu_362_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage16_11001) & (1'b1 == ap_CS_fsm_pp0_stage16)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage13_11001) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage20_11001) & (1'b1 == ap_CS_fsm_pp0_stage20)) | ((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage19_11001) & (1'b1 == ap_CS_fsm_pp0_stage19)) | ((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage18) & (1'b0 == ap_block_pp0_stage18_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_11001)))) begin
        grp_fu_368_ce = 1'b1;
    end else begin
        grp_fu_368_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17))) begin
            grp_fu_368_p0 = x9_imag_read_reg_466;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16))) begin
            grp_fu_368_p0 = x9_real_read_reg_472;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15))) begin
            grp_fu_368_p0 = x8_imag_read_reg_478;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14))) begin
            grp_fu_368_p0 = x8_real_read_reg_484;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13))) begin
            grp_fu_368_p0 = x7_imag_read_reg_490;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12))) begin
            grp_fu_368_p0 = x7_real_read_reg_496;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11))) begin
            grp_fu_368_p0 = x6_imag_read_reg_502;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10))) begin
            grp_fu_368_p0 = x6_real_read_reg_508;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9))) begin
            grp_fu_368_p0 = x5_imag_read_reg_514;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
            grp_fu_368_p0 = x5_real_read_reg_520;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7))) begin
            grp_fu_368_p0 = x4_imag_read_reg_526;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6))) begin
            grp_fu_368_p0 = x4_real_read_reg_532;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5))) begin
            grp_fu_368_p0 = x3_imag_read_reg_538;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
            grp_fu_368_p0 = x3_real_read_reg_544;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            grp_fu_368_p0 = x2_imag_read_reg_550;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            grp_fu_368_p0 = x2_real_read_reg_556;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            grp_fu_368_p0 = x1_imag_read_reg_562;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_368_p0 = x1_real_in_sig;
        end else begin
            grp_fu_368_p0 = 'bx;
        end
    end else begin
        grp_fu_368_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17))) begin
            grp_fu_368_p1 = W9_real_read_reg_580;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16))) begin
            grp_fu_368_p1 = W9_imag_read_reg_574;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15))) begin
            grp_fu_368_p1 = W8_real_read_reg_592;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14))) begin
            grp_fu_368_p1 = W8_imag_read_reg_586;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13))) begin
            grp_fu_368_p1 = W7_real_read_reg_604;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12))) begin
            grp_fu_368_p1 = W7_imag_read_reg_598;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11))) begin
            grp_fu_368_p1 = W6_real_read_reg_616;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10))) begin
            grp_fu_368_p1 = W6_imag_read_reg_610;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9))) begin
            grp_fu_368_p1 = W5_real_read_reg_628;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
            grp_fu_368_p1 = W5_imag_read_reg_622;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7))) begin
            grp_fu_368_p1 = W4_real_read_reg_640;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6))) begin
            grp_fu_368_p1 = W4_imag_read_reg_634;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5))) begin
            grp_fu_368_p1 = W3_real_read_reg_652;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
            grp_fu_368_p1 = W3_imag_read_reg_646;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            grp_fu_368_p1 = W2_real_read_reg_664;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            grp_fu_368_p1 = W2_imag_read_reg_658;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            grp_fu_368_p1 = W1_real_read_reg_676;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_368_p1 = W1_imag_in_sig;
        end else begin
            grp_fu_368_p1 = 'bx;
        end
    end else begin
        grp_fu_368_p1 = 'bx;
    end
end

always @ (*) begin
    if ((x1_imag_ap_vld == 1'b1)) begin
        x1_imag_ap_vld_in_sig = x1_imag_ap_vld;
    end else begin
        x1_imag_ap_vld_in_sig = x1_imag_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x1_imag_blk_n = x1_imag_ap_vld;
    end else begin
        x1_imag_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x1_imag_ap_vld == 1'b1)) begin
        x1_imag_in_sig = x1_imag;
    end else begin
        x1_imag_in_sig = x1_imag_preg;
    end
end

always @ (*) begin
    if ((x1_real_ap_vld == 1'b1)) begin
        x1_real_ap_vld_in_sig = x1_real_ap_vld;
    end else begin
        x1_real_ap_vld_in_sig = x1_real_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x1_real_blk_n = x1_real_ap_vld;
    end else begin
        x1_real_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x1_real_ap_vld == 1'b1)) begin
        x1_real_in_sig = x1_real;
    end else begin
        x1_real_in_sig = x1_real_preg;
    end
end

always @ (*) begin
    if ((x2_imag_ap_vld == 1'b1)) begin
        x2_imag_ap_vld_in_sig = x2_imag_ap_vld;
    end else begin
        x2_imag_ap_vld_in_sig = x2_imag_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x2_imag_blk_n = x2_imag_ap_vld;
    end else begin
        x2_imag_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x2_imag_ap_vld == 1'b1)) begin
        x2_imag_in_sig = x2_imag;
    end else begin
        x2_imag_in_sig = x2_imag_preg;
    end
end

always @ (*) begin
    if ((x2_real_ap_vld == 1'b1)) begin
        x2_real_ap_vld_in_sig = x2_real_ap_vld;
    end else begin
        x2_real_ap_vld_in_sig = x2_real_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x2_real_blk_n = x2_real_ap_vld;
    end else begin
        x2_real_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x2_real_ap_vld == 1'b1)) begin
        x2_real_in_sig = x2_real;
    end else begin
        x2_real_in_sig = x2_real_preg;
    end
end

always @ (*) begin
    if ((x3_imag_ap_vld == 1'b1)) begin
        x3_imag_ap_vld_in_sig = x3_imag_ap_vld;
    end else begin
        x3_imag_ap_vld_in_sig = x3_imag_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x3_imag_blk_n = x3_imag_ap_vld;
    end else begin
        x3_imag_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x3_imag_ap_vld == 1'b1)) begin
        x3_imag_in_sig = x3_imag;
    end else begin
        x3_imag_in_sig = x3_imag_preg;
    end
end

always @ (*) begin
    if ((x3_real_ap_vld == 1'b1)) begin
        x3_real_ap_vld_in_sig = x3_real_ap_vld;
    end else begin
        x3_real_ap_vld_in_sig = x3_real_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x3_real_blk_n = x3_real_ap_vld;
    end else begin
        x3_real_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x3_real_ap_vld == 1'b1)) begin
        x3_real_in_sig = x3_real;
    end else begin
        x3_real_in_sig = x3_real_preg;
    end
end

always @ (*) begin
    if ((x4_imag_ap_vld == 1'b1)) begin
        x4_imag_ap_vld_in_sig = x4_imag_ap_vld;
    end else begin
        x4_imag_ap_vld_in_sig = x4_imag_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x4_imag_blk_n = x4_imag_ap_vld;
    end else begin
        x4_imag_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x4_imag_ap_vld == 1'b1)) begin
        x4_imag_in_sig = x4_imag;
    end else begin
        x4_imag_in_sig = x4_imag_preg;
    end
end

always @ (*) begin
    if ((x4_real_ap_vld == 1'b1)) begin
        x4_real_ap_vld_in_sig = x4_real_ap_vld;
    end else begin
        x4_real_ap_vld_in_sig = x4_real_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x4_real_blk_n = x4_real_ap_vld;
    end else begin
        x4_real_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x4_real_ap_vld == 1'b1)) begin
        x4_real_in_sig = x4_real;
    end else begin
        x4_real_in_sig = x4_real_preg;
    end
end

always @ (*) begin
    if ((x5_imag_ap_vld == 1'b1)) begin
        x5_imag_ap_vld_in_sig = x5_imag_ap_vld;
    end else begin
        x5_imag_ap_vld_in_sig = x5_imag_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x5_imag_blk_n = x5_imag_ap_vld;
    end else begin
        x5_imag_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x5_imag_ap_vld == 1'b1)) begin
        x5_imag_in_sig = x5_imag;
    end else begin
        x5_imag_in_sig = x5_imag_preg;
    end
end

always @ (*) begin
    if ((x5_real_ap_vld == 1'b1)) begin
        x5_real_ap_vld_in_sig = x5_real_ap_vld;
    end else begin
        x5_real_ap_vld_in_sig = x5_real_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x5_real_blk_n = x5_real_ap_vld;
    end else begin
        x5_real_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x5_real_ap_vld == 1'b1)) begin
        x5_real_in_sig = x5_real;
    end else begin
        x5_real_in_sig = x5_real_preg;
    end
end

always @ (*) begin
    if ((x6_imag_ap_vld == 1'b1)) begin
        x6_imag_ap_vld_in_sig = x6_imag_ap_vld;
    end else begin
        x6_imag_ap_vld_in_sig = x6_imag_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x6_imag_blk_n = x6_imag_ap_vld;
    end else begin
        x6_imag_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x6_imag_ap_vld == 1'b1)) begin
        x6_imag_in_sig = x6_imag;
    end else begin
        x6_imag_in_sig = x6_imag_preg;
    end
end

always @ (*) begin
    if ((x6_real_ap_vld == 1'b1)) begin
        x6_real_ap_vld_in_sig = x6_real_ap_vld;
    end else begin
        x6_real_ap_vld_in_sig = x6_real_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x6_real_blk_n = x6_real_ap_vld;
    end else begin
        x6_real_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x6_real_ap_vld == 1'b1)) begin
        x6_real_in_sig = x6_real;
    end else begin
        x6_real_in_sig = x6_real_preg;
    end
end

always @ (*) begin
    if ((x7_imag_ap_vld == 1'b1)) begin
        x7_imag_ap_vld_in_sig = x7_imag_ap_vld;
    end else begin
        x7_imag_ap_vld_in_sig = x7_imag_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x7_imag_blk_n = x7_imag_ap_vld;
    end else begin
        x7_imag_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x7_imag_ap_vld == 1'b1)) begin
        x7_imag_in_sig = x7_imag;
    end else begin
        x7_imag_in_sig = x7_imag_preg;
    end
end

always @ (*) begin
    if ((x7_real_ap_vld == 1'b1)) begin
        x7_real_ap_vld_in_sig = x7_real_ap_vld;
    end else begin
        x7_real_ap_vld_in_sig = x7_real_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x7_real_blk_n = x7_real_ap_vld;
    end else begin
        x7_real_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x7_real_ap_vld == 1'b1)) begin
        x7_real_in_sig = x7_real;
    end else begin
        x7_real_in_sig = x7_real_preg;
    end
end

always @ (*) begin
    if ((x8_imag_ap_vld == 1'b1)) begin
        x8_imag_ap_vld_in_sig = x8_imag_ap_vld;
    end else begin
        x8_imag_ap_vld_in_sig = x8_imag_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x8_imag_blk_n = x8_imag_ap_vld;
    end else begin
        x8_imag_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x8_imag_ap_vld == 1'b1)) begin
        x8_imag_in_sig = x8_imag;
    end else begin
        x8_imag_in_sig = x8_imag_preg;
    end
end

always @ (*) begin
    if ((x8_real_ap_vld == 1'b1)) begin
        x8_real_ap_vld_in_sig = x8_real_ap_vld;
    end else begin
        x8_real_ap_vld_in_sig = x8_real_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x8_real_blk_n = x8_real_ap_vld;
    end else begin
        x8_real_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x8_real_ap_vld == 1'b1)) begin
        x8_real_in_sig = x8_real;
    end else begin
        x8_real_in_sig = x8_real_preg;
    end
end

always @ (*) begin
    if ((x9_imag_ap_vld == 1'b1)) begin
        x9_imag_ap_vld_in_sig = x9_imag_ap_vld;
    end else begin
        x9_imag_ap_vld_in_sig = x9_imag_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x9_imag_blk_n = x9_imag_ap_vld;
    end else begin
        x9_imag_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x9_imag_ap_vld == 1'b1)) begin
        x9_imag_in_sig = x9_imag;
    end else begin
        x9_imag_in_sig = x9_imag_preg;
    end
end

always @ (*) begin
    if ((x9_real_ap_vld == 1'b1)) begin
        x9_real_ap_vld_in_sig = x9_real_ap_vld;
    end else begin
        x9_real_ap_vld_in_sig = x9_real_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x9_real_blk_n = x9_real_ap_vld;
    end else begin
        x9_real_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x9_real_ap_vld == 1'b1)) begin
        x9_real_in_sig = x9_real;
    end else begin
        x9_real_in_sig = x9_real_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_pp0_stage16 : begin
            if ((1'b0 == ap_block_pp0_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end
        end
        ap_ST_fsm_pp0_stage17 : begin
            if (((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage17_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage17_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end
        end
        ap_ST_fsm_pp0_stage18 : begin
            if ((1'b0 == ap_block_pp0_stage18_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end
        end
        ap_ST_fsm_pp0_stage19 : begin
            if ((1'b0 == ap_block_pp0_stage19_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end
        end
        ap_ST_fsm_pp0_stage20 : begin
            if ((1'b0 == ap_block_pp0_stage20_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end
        end
        ap_ST_fsm_pp0_stage21 : begin
            if ((1'b0 == ap_block_pp0_stage21_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end
        end
        ap_ST_fsm_pp0_stage22 : begin
            if ((1'b0 == ap_block_pp0_stage22_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end
        end
        ap_ST_fsm_pp0_stage23 : begin
            if ((1'b0 == ap_block_pp0_stage23_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage16 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage17 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp0_stage18 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp0_stage19 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage20 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp0_stage21 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp0_stage22 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_pp0_stage23 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_00001 = ((1'b1 == 1'b1) & ((1'b0 == W4_real_ap_vld_in_sig) | (1'b0 == W3_imag_ap_vld_in_sig) | (1'b0 == W3_real_ap_vld_in_sig) | (1'b0 == W2_imag_ap_vld_in_sig) | (1'b0 == W2_real_ap_vld_in_sig) | (1'b0 == W1_imag_ap_vld_in_sig) | (1'b0 == W1_real_ap_vld_in_sig) | (d_imag_ap_vld_in_sig == 1'b0) | (d_real_ap_vld_in_sig == 1'b0) | (x9_imag_ap_vld_in_sig == 1'b0) | (x9_real_ap_vld_in_sig == 1'b0) | (x8_imag_ap_vld_in_sig == 1'b0) | (x8_real_ap_vld_in_sig == 1'b0) | (x7_imag_ap_vld_in_sig == 1'b0) | (x7_real_ap_vld_in_sig == 1'b0) | (x6_imag_ap_vld_in_sig == 1'b0) | (x6_real_ap_vld_in_sig == 1'b0) | (x5_imag_ap_vld_in_sig == 1'b0) | (x5_real_ap_vld_in_sig == 1'b0) | (x4_imag_ap_vld_in_sig == 1'b0) | (x4_real_ap_vld_in_sig == 1'b0) | (x3_imag_ap_vld_in_sig == 1'b0) | (x3_real_ap_vld_in_sig == 1'b0) | (x2_imag_ap_vld_in_sig == 1'b0) | (x2_real_ap_vld_in_sig == 1'b0) | (x1_imag_ap_vld_in_sig == 1'b0) | (x1_real_ap_vld_in_sig == 1'b0) | (1'b0 == W9_imag_ap_vld_in_sig) | (1'b0 == W9_real_ap_vld_in_sig) | (1'b0 == W8_imag_ap_vld_in_sig) | (1'b0 == W8_real_ap_vld_in_sig) | (1'b0 == W7_imag_ap_vld_in_sig) | (1'b0 == W7_real_ap_vld_in_sig) | (1'b0 == W6_imag_ap_vld_in_sig) | (1'b0 == W6_real_ap_vld_in_sig) | (1'b0 == W5_imag_ap_vld_in_sig) | (1'b0 == W5_real_ap_vld_in_sig) | (1'b0 == W4_imag_ap_vld_in_sig)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b1 == 1'b1) & ((1'b0 == W4_real_ap_vld_in_sig) | (1'b0 == W3_imag_ap_vld_in_sig) | (1'b0 == W3_real_ap_vld_in_sig) | (1'b0 == W2_imag_ap_vld_in_sig) | (1'b0 == W2_real_ap_vld_in_sig) | (1'b0 == W1_imag_ap_vld_in_sig) | (1'b0 == W1_real_ap_vld_in_sig) | (d_imag_ap_vld_in_sig == 1'b0) | (d_real_ap_vld_in_sig == 1'b0) | (x9_imag_ap_vld_in_sig == 1'b0) | (x9_real_ap_vld_in_sig == 1'b0) | (x8_imag_ap_vld_in_sig == 1'b0) | (x8_real_ap_vld_in_sig == 1'b0) | (x7_imag_ap_vld_in_sig == 1'b0) | (x7_real_ap_vld_in_sig == 1'b0) | (x6_imag_ap_vld_in_sig == 1'b0) | (x6_real_ap_vld_in_sig == 1'b0) | (x5_imag_ap_vld_in_sig == 1'b0) | (x5_real_ap_vld_in_sig == 1'b0) | (x4_imag_ap_vld_in_sig == 1'b0) | (x4_real_ap_vld_in_sig == 1'b0) | (x3_imag_ap_vld_in_sig == 1'b0) | (x3_real_ap_vld_in_sig == 1'b0) | (x2_imag_ap_vld_in_sig == 1'b0) | (x2_real_ap_vld_in_sig == 1'b0) | (x1_imag_ap_vld_in_sig == 1'b0) | (x1_real_ap_vld_in_sig == 1'b0) | (1'b0 == W9_imag_ap_vld_in_sig) | (1'b0 == W9_real_ap_vld_in_sig) | (1'b0 == W8_imag_ap_vld_in_sig) | (1'b0 == W8_real_ap_vld_in_sig) | (1'b0 == W7_imag_ap_vld_in_sig) | (1'b0 == W7_real_ap_vld_in_sig) | (1'b0 == W6_imag_ap_vld_in_sig) | (1'b0 == W6_real_ap_vld_in_sig) | (1'b0 == W5_imag_ap_vld_in_sig) | (1'b0 == W5_real_ap_vld_in_sig) | (1'b0 == W4_imag_ap_vld_in_sig)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b1 == 1'b1) & ((1'b0 == W4_real_ap_vld_in_sig) | (1'b0 == W3_imag_ap_vld_in_sig) | (1'b0 == W3_real_ap_vld_in_sig) | (1'b0 == W2_imag_ap_vld_in_sig) | (1'b0 == W2_real_ap_vld_in_sig) | (1'b0 == W1_imag_ap_vld_in_sig) | (1'b0 == W1_real_ap_vld_in_sig) | (d_imag_ap_vld_in_sig == 1'b0) | (d_real_ap_vld_in_sig == 1'b0) | (x9_imag_ap_vld_in_sig == 1'b0) | (x9_real_ap_vld_in_sig == 1'b0) | (x8_imag_ap_vld_in_sig == 1'b0) | (x8_real_ap_vld_in_sig == 1'b0) | (x7_imag_ap_vld_in_sig == 1'b0) | (x7_real_ap_vld_in_sig == 1'b0) | (x6_imag_ap_vld_in_sig == 1'b0) | (x6_real_ap_vld_in_sig == 1'b0) | (x5_imag_ap_vld_in_sig == 1'b0) | (x5_real_ap_vld_in_sig == 1'b0) | (x4_imag_ap_vld_in_sig == 1'b0) | (x4_real_ap_vld_in_sig == 1'b0) | (x3_imag_ap_vld_in_sig == 1'b0) | (x3_real_ap_vld_in_sig == 1'b0) | (x2_imag_ap_vld_in_sig == 1'b0) | (x2_real_ap_vld_in_sig == 1'b0) | (x1_imag_ap_vld_in_sig == 1'b0) | (x1_real_ap_vld_in_sig == 1'b0) | (1'b0 == W9_imag_ap_vld_in_sig) | (1'b0 == W9_real_ap_vld_in_sig) | (1'b0 == W8_imag_ap_vld_in_sig) | (1'b0 == W8_real_ap_vld_in_sig) | (1'b0 == W7_imag_ap_vld_in_sig) | (1'b0 == W7_real_ap_vld_in_sig) | (1'b0 == W6_imag_ap_vld_in_sig) | (1'b0 == W6_real_ap_vld_in_sig) | (1'b0 == W5_imag_ap_vld_in_sig) | (1'b0 == W5_real_ap_vld_in_sig) | (1'b0 == W4_imag_ap_vld_in_sig)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state100_pp0_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state101_pp0_stage4_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state102_pp0_stage5_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state103_pp0_stage6_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state104_pp0_stage7_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state105_pp0_stage8_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state106_pp0_stage9_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state107_pp0_stage10_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state108_pp0_stage11_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state109_pp0_stage12_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state110_pp0_stage13_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state111_pp0_stage14_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state112_pp0_stage15_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state113_pp0_stage16_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state114_pp0_stage17_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state115_pp0_stage18_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state116_pp0_stage19_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state117_pp0_stage20_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state118_pp0_stage21_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state119_pp0_stage22_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state120_pp0_stage23_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state121_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state122_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state123_pp0_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state124_pp0_stage3_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state125_pp0_stage4_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state126_pp0_stage5_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state127_pp0_stage6_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state128_pp0_stage7_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state129_pp0_stage8_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state130_pp0_stage9_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state131_pp0_stage10_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state132_pp0_stage11_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state133_pp0_stage12_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state134_pp0_stage13_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state135_pp0_stage14_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state136_pp0_stage15_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state137_pp0_stage16_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state138_pp0_stage17_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state139_pp0_stage18_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state140_pp0_stage19_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state141_pp0_stage20_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state142_pp0_stage21_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state143_pp0_stage22_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state144_pp0_stage23_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state145_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state146_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state147_pp0_stage2_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state148_pp0_stage3_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state149_pp0_stage4_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state150_pp0_stage5_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state151_pp0_stage6_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state152_pp0_stage7_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state153_pp0_stage8_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state154_pp0_stage9_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state155_pp0_stage10_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state156_pp0_stage11_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state157_pp0_stage12_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state158_pp0_stage13_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state159_pp0_stage14_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state160_pp0_stage15_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state161_pp0_stage16_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state162_pp0_stage17_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage16_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage17_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage18_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((1'b0 == W4_real_ap_vld_in_sig) | (1'b0 == W3_imag_ap_vld_in_sig) | (1'b0 == W3_real_ap_vld_in_sig) | (1'b0 == W2_imag_ap_vld_in_sig) | (1'b0 == W2_real_ap_vld_in_sig) | (1'b0 == W1_imag_ap_vld_in_sig) | (1'b0 == W1_real_ap_vld_in_sig) | (d_imag_ap_vld_in_sig == 1'b0) | (d_real_ap_vld_in_sig == 1'b0) | (x9_imag_ap_vld_in_sig == 1'b0) | (x9_real_ap_vld_in_sig == 1'b0) | (x8_imag_ap_vld_in_sig == 1'b0) | (x8_real_ap_vld_in_sig == 1'b0) | (x7_imag_ap_vld_in_sig == 1'b0) | (x7_real_ap_vld_in_sig == 1'b0) | (x6_imag_ap_vld_in_sig == 1'b0) | (x6_real_ap_vld_in_sig == 1'b0) | (x5_imag_ap_vld_in_sig == 1'b0) | (x5_real_ap_vld_in_sig == 1'b0) | (x4_imag_ap_vld_in_sig == 1'b0) | (x4_real_ap_vld_in_sig == 1'b0) | (x3_imag_ap_vld_in_sig == 1'b0) | (x3_real_ap_vld_in_sig == 1'b0) | (x2_imag_ap_vld_in_sig == 1'b0) | (x2_real_ap_vld_in_sig == 1'b0) | (x1_imag_ap_vld_in_sig == 1'b0) | (x1_real_ap_vld_in_sig == 1'b0) | (1'b0 == W9_imag_ap_vld_in_sig) | (1'b0 == W9_real_ap_vld_in_sig) | (1'b0 == W8_imag_ap_vld_in_sig) | (1'b0 == W8_real_ap_vld_in_sig) | (1'b0 == W7_imag_ap_vld_in_sig) | (1'b0 == W7_real_ap_vld_in_sig) | (1'b0 == W6_imag_ap_vld_in_sig) | (1'b0 == W6_real_ap_vld_in_sig) | (1'b0 == W5_imag_ap_vld_in_sig) | (1'b0 == W5_real_ap_vld_in_sig) | (1'b0 == W4_imag_ap_vld_in_sig));
end

assign ap_block_state20_pp0_stage19_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage20_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage21_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage22_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage23_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage7_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage8_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage9_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage10_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage11_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage12_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage13_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage14_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage15_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage16_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage17_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage18_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage19_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage20_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage21_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage22_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage23_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage6_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage7_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage8_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage9_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage10_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage11_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage12_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage13_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage14_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage15_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage16_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage17_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp0_stage18_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp0_stage19_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage20_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp0_stage21_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp0_stage22_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp0_stage23_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp0_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp0_stage5_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp0_stage6_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp0_stage7_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp0_stage8_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp0_stage9_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state83_pp0_stage10_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state84_pp0_stage11_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state85_pp0_stage12_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state86_pp0_stage13_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state87_pp0_stage14_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state88_pp0_stage15_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state89_pp0_stage16_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state90_pp0_stage17_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state91_pp0_stage18_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state92_pp0_stage19_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state93_pp0_stage20_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state94_pp0_stage21_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state95_pp0_stage22_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state96_pp0_stage23_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state97_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state98_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state99_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign err_imag = grp_fu_355_p2;

assign err_real = grp_fu_350_p2;

endmodule //Err
