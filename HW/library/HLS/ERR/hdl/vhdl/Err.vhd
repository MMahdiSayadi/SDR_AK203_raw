-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Err is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    d_real : IN STD_LOGIC_VECTOR (31 downto 0);
    d_real_ap_vld : IN STD_LOGIC;
    d_imag : IN STD_LOGIC_VECTOR (31 downto 0);
    d_imag_ap_vld : IN STD_LOGIC;
    W1_real : IN STD_LOGIC_VECTOR (31 downto 0);
    W1_real_ap_vld : IN STD_LOGIC;
    W1_imag : IN STD_LOGIC_VECTOR (31 downto 0);
    W1_imag_ap_vld : IN STD_LOGIC;
    W2_real : IN STD_LOGIC_VECTOR (31 downto 0);
    W2_real_ap_vld : IN STD_LOGIC;
    W2_imag : IN STD_LOGIC_VECTOR (31 downto 0);
    W2_imag_ap_vld : IN STD_LOGIC;
    W3_real : IN STD_LOGIC_VECTOR (31 downto 0);
    W3_real_ap_vld : IN STD_LOGIC;
    W3_imag : IN STD_LOGIC_VECTOR (31 downto 0);
    W3_imag_ap_vld : IN STD_LOGIC;
    W4_real : IN STD_LOGIC_VECTOR (31 downto 0);
    W4_real_ap_vld : IN STD_LOGIC;
    W4_imag : IN STD_LOGIC_VECTOR (31 downto 0);
    W4_imag_ap_vld : IN STD_LOGIC;
    W5_real : IN STD_LOGIC_VECTOR (31 downto 0);
    W5_real_ap_vld : IN STD_LOGIC;
    W5_imag : IN STD_LOGIC_VECTOR (31 downto 0);
    W5_imag_ap_vld : IN STD_LOGIC;
    W6_real : IN STD_LOGIC_VECTOR (31 downto 0);
    W6_real_ap_vld : IN STD_LOGIC;
    W6_imag : IN STD_LOGIC_VECTOR (31 downto 0);
    W6_imag_ap_vld : IN STD_LOGIC;
    W7_real : IN STD_LOGIC_VECTOR (31 downto 0);
    W7_real_ap_vld : IN STD_LOGIC;
    W7_imag : IN STD_LOGIC_VECTOR (31 downto 0);
    W7_imag_ap_vld : IN STD_LOGIC;
    W8_real : IN STD_LOGIC_VECTOR (31 downto 0);
    W8_real_ap_vld : IN STD_LOGIC;
    W8_imag : IN STD_LOGIC_VECTOR (31 downto 0);
    W8_imag_ap_vld : IN STD_LOGIC;
    W9_real : IN STD_LOGIC_VECTOR (31 downto 0);
    W9_real_ap_vld : IN STD_LOGIC;
    W9_imag : IN STD_LOGIC_VECTOR (31 downto 0);
    W9_imag_ap_vld : IN STD_LOGIC;
    x1_real : IN STD_LOGIC_VECTOR (31 downto 0);
    x1_real_ap_vld : IN STD_LOGIC;
    x1_imag : IN STD_LOGIC_VECTOR (31 downto 0);
    x1_imag_ap_vld : IN STD_LOGIC;
    x2_real : IN STD_LOGIC_VECTOR (31 downto 0);
    x2_real_ap_vld : IN STD_LOGIC;
    x2_imag : IN STD_LOGIC_VECTOR (31 downto 0);
    x2_imag_ap_vld : IN STD_LOGIC;
    x3_real : IN STD_LOGIC_VECTOR (31 downto 0);
    x3_real_ap_vld : IN STD_LOGIC;
    x3_imag : IN STD_LOGIC_VECTOR (31 downto 0);
    x3_imag_ap_vld : IN STD_LOGIC;
    x4_real : IN STD_LOGIC_VECTOR (31 downto 0);
    x4_real_ap_vld : IN STD_LOGIC;
    x4_imag : IN STD_LOGIC_VECTOR (31 downto 0);
    x4_imag_ap_vld : IN STD_LOGIC;
    x5_real : IN STD_LOGIC_VECTOR (31 downto 0);
    x5_real_ap_vld : IN STD_LOGIC;
    x5_imag : IN STD_LOGIC_VECTOR (31 downto 0);
    x5_imag_ap_vld : IN STD_LOGIC;
    x6_real : IN STD_LOGIC_VECTOR (31 downto 0);
    x6_real_ap_vld : IN STD_LOGIC;
    x6_imag : IN STD_LOGIC_VECTOR (31 downto 0);
    x6_imag_ap_vld : IN STD_LOGIC;
    x7_real : IN STD_LOGIC_VECTOR (31 downto 0);
    x7_real_ap_vld : IN STD_LOGIC;
    x7_imag : IN STD_LOGIC_VECTOR (31 downto 0);
    x7_imag_ap_vld : IN STD_LOGIC;
    x8_real : IN STD_LOGIC_VECTOR (31 downto 0);
    x8_real_ap_vld : IN STD_LOGIC;
    x8_imag : IN STD_LOGIC_VECTOR (31 downto 0);
    x8_imag_ap_vld : IN STD_LOGIC;
    x9_real : IN STD_LOGIC_VECTOR (31 downto 0);
    x9_real_ap_vld : IN STD_LOGIC;
    x9_imag : IN STD_LOGIC_VECTOR (31 downto 0);
    x9_imag_ap_vld : IN STD_LOGIC;
    err_real : OUT STD_LOGIC_VECTOR (31 downto 0);
    err_real_ap_vld : OUT STD_LOGIC;
    err_imag : OUT STD_LOGIC_VECTOR (31 downto 0);
    err_imag_ap_vld : OUT STD_LOGIC );
end;


architecture behav of Err is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Err,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-2,HLS_INPUT_CLOCK=6.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=5.288200,HLS_SYN_LAT=161,HLS_SYN_TPT=24,HLS_SYN_MEM=0,HLS_SYN_DSP=10,HLS_SYN_FF=6866,HLS_SYN_LUT=2879,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_pp0_stage16 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_pp0_stage17 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_pp0_stage18 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_pp0_stage19 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_pp0_stage20 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_pp0_stage21 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_pp0_stage22 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_pp0_stage23 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal d_real_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal d_real_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal d_real_ap_vld_preg : STD_LOGIC := '0';
    signal d_real_ap_vld_in_sig : STD_LOGIC;
    signal d_imag_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal d_imag_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal d_imag_ap_vld_preg : STD_LOGIC := '0';
    signal d_imag_ap_vld_in_sig : STD_LOGIC;
    signal W1_real_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal W1_real_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal W1_real_ap_vld_preg : STD_LOGIC := '0';
    signal W1_real_ap_vld_in_sig : STD_LOGIC;
    signal W1_imag_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal W1_imag_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal W1_imag_ap_vld_preg : STD_LOGIC := '0';
    signal W1_imag_ap_vld_in_sig : STD_LOGIC;
    signal W2_real_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal W2_real_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal W2_real_ap_vld_preg : STD_LOGIC := '0';
    signal W2_real_ap_vld_in_sig : STD_LOGIC;
    signal W2_imag_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal W2_imag_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal W2_imag_ap_vld_preg : STD_LOGIC := '0';
    signal W2_imag_ap_vld_in_sig : STD_LOGIC;
    signal W3_real_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal W3_real_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal W3_real_ap_vld_preg : STD_LOGIC := '0';
    signal W3_real_ap_vld_in_sig : STD_LOGIC;
    signal W3_imag_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal W3_imag_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal W3_imag_ap_vld_preg : STD_LOGIC := '0';
    signal W3_imag_ap_vld_in_sig : STD_LOGIC;
    signal W4_real_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal W4_real_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal W4_real_ap_vld_preg : STD_LOGIC := '0';
    signal W4_real_ap_vld_in_sig : STD_LOGIC;
    signal W4_imag_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal W4_imag_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal W4_imag_ap_vld_preg : STD_LOGIC := '0';
    signal W4_imag_ap_vld_in_sig : STD_LOGIC;
    signal W5_real_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal W5_real_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal W5_real_ap_vld_preg : STD_LOGIC := '0';
    signal W5_real_ap_vld_in_sig : STD_LOGIC;
    signal W5_imag_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal W5_imag_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal W5_imag_ap_vld_preg : STD_LOGIC := '0';
    signal W5_imag_ap_vld_in_sig : STD_LOGIC;
    signal W6_real_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal W6_real_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal W6_real_ap_vld_preg : STD_LOGIC := '0';
    signal W6_real_ap_vld_in_sig : STD_LOGIC;
    signal W6_imag_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal W6_imag_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal W6_imag_ap_vld_preg : STD_LOGIC := '0';
    signal W6_imag_ap_vld_in_sig : STD_LOGIC;
    signal W7_real_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal W7_real_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal W7_real_ap_vld_preg : STD_LOGIC := '0';
    signal W7_real_ap_vld_in_sig : STD_LOGIC;
    signal W7_imag_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal W7_imag_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal W7_imag_ap_vld_preg : STD_LOGIC := '0';
    signal W7_imag_ap_vld_in_sig : STD_LOGIC;
    signal W8_real_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal W8_real_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal W8_real_ap_vld_preg : STD_LOGIC := '0';
    signal W8_real_ap_vld_in_sig : STD_LOGIC;
    signal W8_imag_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal W8_imag_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal W8_imag_ap_vld_preg : STD_LOGIC := '0';
    signal W8_imag_ap_vld_in_sig : STD_LOGIC;
    signal W9_real_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal W9_real_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal W9_real_ap_vld_preg : STD_LOGIC := '0';
    signal W9_real_ap_vld_in_sig : STD_LOGIC;
    signal W9_imag_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal W9_imag_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal W9_imag_ap_vld_preg : STD_LOGIC := '0';
    signal W9_imag_ap_vld_in_sig : STD_LOGIC;
    signal x1_real_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal x1_real_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal x1_real_ap_vld_preg : STD_LOGIC := '0';
    signal x1_real_ap_vld_in_sig : STD_LOGIC;
    signal x1_imag_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal x1_imag_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal x1_imag_ap_vld_preg : STD_LOGIC := '0';
    signal x1_imag_ap_vld_in_sig : STD_LOGIC;
    signal x2_real_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal x2_real_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal x2_real_ap_vld_preg : STD_LOGIC := '0';
    signal x2_real_ap_vld_in_sig : STD_LOGIC;
    signal x2_imag_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal x2_imag_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal x2_imag_ap_vld_preg : STD_LOGIC := '0';
    signal x2_imag_ap_vld_in_sig : STD_LOGIC;
    signal x3_real_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal x3_real_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal x3_real_ap_vld_preg : STD_LOGIC := '0';
    signal x3_real_ap_vld_in_sig : STD_LOGIC;
    signal x3_imag_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal x3_imag_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal x3_imag_ap_vld_preg : STD_LOGIC := '0';
    signal x3_imag_ap_vld_in_sig : STD_LOGIC;
    signal x4_real_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal x4_real_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal x4_real_ap_vld_preg : STD_LOGIC := '0';
    signal x4_real_ap_vld_in_sig : STD_LOGIC;
    signal x4_imag_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal x4_imag_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal x4_imag_ap_vld_preg : STD_LOGIC := '0';
    signal x4_imag_ap_vld_in_sig : STD_LOGIC;
    signal x5_real_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal x5_real_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal x5_real_ap_vld_preg : STD_LOGIC := '0';
    signal x5_real_ap_vld_in_sig : STD_LOGIC;
    signal x5_imag_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal x5_imag_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal x5_imag_ap_vld_preg : STD_LOGIC := '0';
    signal x5_imag_ap_vld_in_sig : STD_LOGIC;
    signal x6_real_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal x6_real_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal x6_real_ap_vld_preg : STD_LOGIC := '0';
    signal x6_real_ap_vld_in_sig : STD_LOGIC;
    signal x6_imag_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal x6_imag_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal x6_imag_ap_vld_preg : STD_LOGIC := '0';
    signal x6_imag_ap_vld_in_sig : STD_LOGIC;
    signal x7_real_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal x7_real_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal x7_real_ap_vld_preg : STD_LOGIC := '0';
    signal x7_real_ap_vld_in_sig : STD_LOGIC;
    signal x7_imag_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal x7_imag_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal x7_imag_ap_vld_preg : STD_LOGIC := '0';
    signal x7_imag_ap_vld_in_sig : STD_LOGIC;
    signal x8_real_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal x8_real_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal x8_real_ap_vld_preg : STD_LOGIC := '0';
    signal x8_real_ap_vld_in_sig : STD_LOGIC;
    signal x8_imag_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal x8_imag_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal x8_imag_ap_vld_preg : STD_LOGIC := '0';
    signal x8_imag_ap_vld_in_sig : STD_LOGIC;
    signal x9_real_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal x9_real_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal x9_real_ap_vld_preg : STD_LOGIC := '0';
    signal x9_real_ap_vld_in_sig : STD_LOGIC;
    signal x9_imag_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal x9_imag_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal x9_imag_ap_vld_preg : STD_LOGIC := '0';
    signal x9_imag_ap_vld_in_sig : STD_LOGIC;
    signal d_real_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal d_imag_blk_n : STD_LOGIC;
    signal W1_real_blk_n : STD_LOGIC;
    signal W1_imag_blk_n : STD_LOGIC;
    signal W2_real_blk_n : STD_LOGIC;
    signal W2_imag_blk_n : STD_LOGIC;
    signal W3_real_blk_n : STD_LOGIC;
    signal W3_imag_blk_n : STD_LOGIC;
    signal W4_real_blk_n : STD_LOGIC;
    signal W4_imag_blk_n : STD_LOGIC;
    signal W5_real_blk_n : STD_LOGIC;
    signal W5_imag_blk_n : STD_LOGIC;
    signal W6_real_blk_n : STD_LOGIC;
    signal W6_imag_blk_n : STD_LOGIC;
    signal W7_real_blk_n : STD_LOGIC;
    signal W7_imag_blk_n : STD_LOGIC;
    signal W8_real_blk_n : STD_LOGIC;
    signal W8_imag_blk_n : STD_LOGIC;
    signal W9_real_blk_n : STD_LOGIC;
    signal W9_imag_blk_n : STD_LOGIC;
    signal x1_real_blk_n : STD_LOGIC;
    signal x1_imag_blk_n : STD_LOGIC;
    signal x2_real_blk_n : STD_LOGIC;
    signal x2_imag_blk_n : STD_LOGIC;
    signal x3_real_blk_n : STD_LOGIC;
    signal x3_imag_blk_n : STD_LOGIC;
    signal x4_real_blk_n : STD_LOGIC;
    signal x4_imag_blk_n : STD_LOGIC;
    signal x5_real_blk_n : STD_LOGIC;
    signal x5_imag_blk_n : STD_LOGIC;
    signal x6_real_blk_n : STD_LOGIC;
    signal x6_imag_blk_n : STD_LOGIC;
    signal x7_real_blk_n : STD_LOGIC;
    signal x7_imag_blk_n : STD_LOGIC;
    signal x8_real_blk_n : STD_LOGIC;
    signal x8_imag_blk_n : STD_LOGIC;
    signal x9_real_blk_n : STD_LOGIC;
    signal x9_imag_blk_n : STD_LOGIC;
    signal grp_fu_350_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_374 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_state12_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_state36_pp0_stage11_iter1 : BOOLEAN;
    signal ap_block_state60_pp0_stage11_iter2 : BOOLEAN;
    signal ap_block_state84_pp0_stage11_iter3 : BOOLEAN;
    signal ap_block_state108_pp0_stage11_iter4 : BOOLEAN;
    signal ap_block_state132_pp0_stage11_iter5 : BOOLEAN;
    signal ap_block_state156_pp0_stage11_iter6 : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage19 : signal is "none";
    signal ap_block_state20_pp0_stage19_iter0 : BOOLEAN;
    signal ap_block_state44_pp0_stage19_iter1 : BOOLEAN;
    signal ap_block_state68_pp0_stage19_iter2 : BOOLEAN;
    signal ap_block_state92_pp0_stage19_iter3 : BOOLEAN;
    signal ap_block_state116_pp0_stage19_iter4 : BOOLEAN;
    signal ap_block_state140_pp0_stage19_iter5 : BOOLEAN;
    signal ap_block_pp0_stage19_11001 : BOOLEAN;
    signal grp_fu_355_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_379 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_384 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state28_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state52_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state76_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_state100_pp0_stage3_iter4 : BOOLEAN;
    signal ap_block_state124_pp0_stage3_iter5 : BOOLEAN;
    signal ap_block_state148_pp0_stage3_iter6 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_state13_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_state37_pp0_stage12_iter1 : BOOLEAN;
    signal ap_block_state61_pp0_stage12_iter2 : BOOLEAN;
    signal ap_block_state85_pp0_stage12_iter3 : BOOLEAN;
    signal ap_block_state109_pp0_stage12_iter4 : BOOLEAN;
    signal ap_block_state133_pp0_stage12_iter5 : BOOLEAN;
    signal ap_block_state157_pp0_stage12_iter6 : BOOLEAN;
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_394 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage20 : signal is "none";
    signal ap_block_state21_pp0_stage20_iter0 : BOOLEAN;
    signal ap_block_state45_pp0_stage20_iter1 : BOOLEAN;
    signal ap_block_state69_pp0_stage20_iter2 : BOOLEAN;
    signal ap_block_state93_pp0_stage20_iter3 : BOOLEAN;
    signal ap_block_state117_pp0_stage20_iter4 : BOOLEAN;
    signal ap_block_state141_pp0_stage20_iter5 : BOOLEAN;
    signal ap_block_pp0_stage20_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state29_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state53_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_state77_pp0_stage4_iter3 : BOOLEAN;
    signal ap_block_state101_pp0_stage4_iter4 : BOOLEAN;
    signal ap_block_state125_pp0_stage4_iter5 : BOOLEAN;
    signal ap_block_state149_pp0_stage4_iter6 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal reg_399 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_404 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_block_state14_pp0_stage13_iter0 : BOOLEAN;
    signal ap_block_state38_pp0_stage13_iter1 : BOOLEAN;
    signal ap_block_state62_pp0_stage13_iter2 : BOOLEAN;
    signal ap_block_state86_pp0_stage13_iter3 : BOOLEAN;
    signal ap_block_state110_pp0_stage13_iter4 : BOOLEAN;
    signal ap_block_state134_pp0_stage13_iter5 : BOOLEAN;
    signal ap_block_state158_pp0_stage13_iter6 : BOOLEAN;
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage21 : signal is "none";
    signal ap_block_state22_pp0_stage21_iter0 : BOOLEAN;
    signal ap_block_state46_pp0_stage21_iter1 : BOOLEAN;
    signal ap_block_state70_pp0_stage21_iter2 : BOOLEAN;
    signal ap_block_state94_pp0_stage21_iter3 : BOOLEAN;
    signal ap_block_state118_pp0_stage21_iter4 : BOOLEAN;
    signal ap_block_state142_pp0_stage21_iter5 : BOOLEAN;
    signal ap_block_pp0_stage21_11001 : BOOLEAN;
    signal reg_409 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_414 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state30_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_state54_pp0_stage5_iter2 : BOOLEAN;
    signal ap_block_state78_pp0_stage5_iter3 : BOOLEAN;
    signal ap_block_state102_pp0_stage5_iter4 : BOOLEAN;
    signal ap_block_state126_pp0_stage5_iter5 : BOOLEAN;
    signal ap_block_state150_pp0_stage5_iter6 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_state15_pp0_stage14_iter0 : BOOLEAN;
    signal ap_block_state39_pp0_stage14_iter1 : BOOLEAN;
    signal ap_block_state63_pp0_stage14_iter2 : BOOLEAN;
    signal ap_block_state87_pp0_stage14_iter3 : BOOLEAN;
    signal ap_block_state111_pp0_stage14_iter4 : BOOLEAN;
    signal ap_block_state135_pp0_stage14_iter5 : BOOLEAN;
    signal ap_block_state159_pp0_stage14_iter6 : BOOLEAN;
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal reg_419 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_424 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage22 : signal is "none";
    signal ap_block_state23_pp0_stage22_iter0 : BOOLEAN;
    signal ap_block_state47_pp0_stage22_iter1 : BOOLEAN;
    signal ap_block_state71_pp0_stage22_iter2 : BOOLEAN;
    signal ap_block_state95_pp0_stage22_iter3 : BOOLEAN;
    signal ap_block_state119_pp0_stage22_iter4 : BOOLEAN;
    signal ap_block_state143_pp0_stage22_iter5 : BOOLEAN;
    signal ap_block_pp0_stage22_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_state31_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_state55_pp0_stage6_iter2 : BOOLEAN;
    signal ap_block_state79_pp0_stage6_iter3 : BOOLEAN;
    signal ap_block_state103_pp0_stage6_iter4 : BOOLEAN;
    signal ap_block_state127_pp0_stage6_iter5 : BOOLEAN;
    signal ap_block_state151_pp0_stage6_iter6 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal reg_429 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_434 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage15 : signal is "none";
    signal ap_block_state16_pp0_stage15_iter0 : BOOLEAN;
    signal ap_block_state40_pp0_stage15_iter1 : BOOLEAN;
    signal ap_block_state64_pp0_stage15_iter2 : BOOLEAN;
    signal ap_block_state88_pp0_stage15_iter3 : BOOLEAN;
    signal ap_block_state112_pp0_stage15_iter4 : BOOLEAN;
    signal ap_block_state136_pp0_stage15_iter5 : BOOLEAN;
    signal ap_block_state160_pp0_stage15_iter6 : BOOLEAN;
    signal ap_block_pp0_stage15_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage23 : signal is "none";
    signal ap_block_state24_pp0_stage23_iter0 : BOOLEAN;
    signal ap_block_state48_pp0_stage23_iter1 : BOOLEAN;
    signal ap_block_state72_pp0_stage23_iter2 : BOOLEAN;
    signal ap_block_state96_pp0_stage23_iter3 : BOOLEAN;
    signal ap_block_state120_pp0_stage23_iter4 : BOOLEAN;
    signal ap_block_state144_pp0_stage23_iter5 : BOOLEAN;
    signal ap_block_pp0_stage23_11001 : BOOLEAN;
    signal reg_439 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_444 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_state32_pp0_stage7_iter1 : BOOLEAN;
    signal ap_block_state56_pp0_stage7_iter2 : BOOLEAN;
    signal ap_block_state80_pp0_stage7_iter3 : BOOLEAN;
    signal ap_block_state104_pp0_stage7_iter4 : BOOLEAN;
    signal ap_block_state128_pp0_stage7_iter5 : BOOLEAN;
    signal ap_block_state152_pp0_stage7_iter6 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage16 : signal is "none";
    signal ap_block_state17_pp0_stage16_iter0 : BOOLEAN;
    signal ap_block_state41_pp0_stage16_iter1 : BOOLEAN;
    signal ap_block_state65_pp0_stage16_iter2 : BOOLEAN;
    signal ap_block_state89_pp0_stage16_iter3 : BOOLEAN;
    signal ap_block_state113_pp0_stage16_iter4 : BOOLEAN;
    signal ap_block_state137_pp0_stage16_iter5 : BOOLEAN;
    signal ap_block_state161_pp0_stage16_iter6 : BOOLEAN;
    signal ap_block_pp0_stage16_11001 : BOOLEAN;
    signal reg_449 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_454 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state49_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state73_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state97_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state121_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state145_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_state33_pp0_stage8_iter1 : BOOLEAN;
    signal ap_block_state57_pp0_stage8_iter2 : BOOLEAN;
    signal ap_block_state81_pp0_stage8_iter3 : BOOLEAN;
    signal ap_block_state105_pp0_stage8_iter4 : BOOLEAN;
    signal ap_block_state129_pp0_stage8_iter5 : BOOLEAN;
    signal ap_block_state153_pp0_stage8_iter6 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal reg_460 : STD_LOGIC_VECTOR (31 downto 0);
    signal x9_imag_read_reg_466 : STD_LOGIC_VECTOR (31 downto 0);
    signal x9_real_read_reg_472 : STD_LOGIC_VECTOR (31 downto 0);
    signal x8_imag_read_reg_478 : STD_LOGIC_VECTOR (31 downto 0);
    signal x8_real_read_reg_484 : STD_LOGIC_VECTOR (31 downto 0);
    signal x7_imag_read_reg_490 : STD_LOGIC_VECTOR (31 downto 0);
    signal x7_real_read_reg_496 : STD_LOGIC_VECTOR (31 downto 0);
    signal x6_imag_read_reg_502 : STD_LOGIC_VECTOR (31 downto 0);
    signal x6_real_read_reg_508 : STD_LOGIC_VECTOR (31 downto 0);
    signal x5_imag_read_reg_514 : STD_LOGIC_VECTOR (31 downto 0);
    signal x5_real_read_reg_520 : STD_LOGIC_VECTOR (31 downto 0);
    signal x4_imag_read_reg_526 : STD_LOGIC_VECTOR (31 downto 0);
    signal x4_real_read_reg_532 : STD_LOGIC_VECTOR (31 downto 0);
    signal x3_imag_read_reg_538 : STD_LOGIC_VECTOR (31 downto 0);
    signal x3_real_read_reg_544 : STD_LOGIC_VECTOR (31 downto 0);
    signal x2_imag_read_reg_550 : STD_LOGIC_VECTOR (31 downto 0);
    signal x2_real_read_reg_556 : STD_LOGIC_VECTOR (31 downto 0);
    signal x1_imag_read_reg_562 : STD_LOGIC_VECTOR (31 downto 0);
    signal W9_imag_read_reg_574 : STD_LOGIC_VECTOR (31 downto 0);
    signal W9_real_read_reg_580 : STD_LOGIC_VECTOR (31 downto 0);
    signal W8_imag_read_reg_586 : STD_LOGIC_VECTOR (31 downto 0);
    signal W8_real_read_reg_592 : STD_LOGIC_VECTOR (31 downto 0);
    signal W7_imag_read_reg_598 : STD_LOGIC_VECTOR (31 downto 0);
    signal W7_real_read_reg_604 : STD_LOGIC_VECTOR (31 downto 0);
    signal W6_imag_read_reg_610 : STD_LOGIC_VECTOR (31 downto 0);
    signal W6_real_read_reg_616 : STD_LOGIC_VECTOR (31 downto 0);
    signal W5_imag_read_reg_622 : STD_LOGIC_VECTOR (31 downto 0);
    signal W5_real_read_reg_628 : STD_LOGIC_VECTOR (31 downto 0);
    signal W4_imag_read_reg_634 : STD_LOGIC_VECTOR (31 downto 0);
    signal W4_real_read_reg_640 : STD_LOGIC_VECTOR (31 downto 0);
    signal W3_imag_read_reg_646 : STD_LOGIC_VECTOR (31 downto 0);
    signal W3_real_read_reg_652 : STD_LOGIC_VECTOR (31 downto 0);
    signal W2_imag_read_reg_658 : STD_LOGIC_VECTOR (31 downto 0);
    signal W2_real_read_reg_664 : STD_LOGIC_VECTOR (31 downto 0);
    signal W1_imag_read_reg_670 : STD_LOGIC_VECTOR (31 downto 0);
    signal W1_real_read_reg_676 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_imag_read_reg_682 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_imag_read_reg_682_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal d_imag_read_reg_682_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal d_imag_read_reg_682_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal d_imag_read_reg_682_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal d_imag_read_reg_682_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal d_imag_read_reg_682_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal d_real_read_reg_687 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_real_read_reg_687_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal d_real_read_reg_687_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal d_real_read_reg_687_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal d_real_read_reg_687_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal d_real_read_reg_687_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal d_real_read_reg_687_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_362_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_692 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_368_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_697 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_702 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_707 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_reg_712 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_1_reg_717 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_1_reg_722 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_1_reg_727 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_reg_732 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_reg_732_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_2_reg_737 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_2_reg_737_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_2_reg_742 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_2_reg_742_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_2_reg_747 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_2_reg_747_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_3_reg_752 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_state34_pp0_stage9_iter1 : BOOLEAN;
    signal ap_block_state58_pp0_stage9_iter2 : BOOLEAN;
    signal ap_block_state82_pp0_stage9_iter3 : BOOLEAN;
    signal ap_block_state106_pp0_stage9_iter4 : BOOLEAN;
    signal ap_block_state130_pp0_stage9_iter5 : BOOLEAN;
    signal ap_block_state154_pp0_stage9_iter6 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal tmp_2_3_reg_752_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_3_reg_757 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_3_reg_757_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_3_reg_762 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_state11_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_state35_pp0_stage10_iter1 : BOOLEAN;
    signal ap_block_state59_pp0_stage10_iter2 : BOOLEAN;
    signal ap_block_state83_pp0_stage10_iter3 : BOOLEAN;
    signal ap_block_state107_pp0_stage10_iter4 : BOOLEAN;
    signal ap_block_state131_pp0_stage10_iter5 : BOOLEAN;
    signal ap_block_state155_pp0_stage10_iter6 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal tmp_4_3_reg_762_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_3_reg_762_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_3_reg_767 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_3_reg_767_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_3_reg_767_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_4_reg_772 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_4_reg_772_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_4_reg_772_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_4_reg_777 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_4_reg_777_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_4_reg_777_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_4_reg_782 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_4_reg_782_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_4_reg_782_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_4_reg_787 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_4_reg_787_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_4_reg_787_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_5_reg_792 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_5_reg_792_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_5_reg_792_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_5_reg_792_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_5_reg_797 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_5_reg_797_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_5_reg_797_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_5_reg_797_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_5_reg_802 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_5_reg_802_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_5_reg_802_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_5_reg_802_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_5_reg_807 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_5_reg_807_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_5_reg_807_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_5_reg_807_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_6_reg_812 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_6_reg_812_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_6_reg_812_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_6_reg_812_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_6_reg_817 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_6_reg_817_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_6_reg_817_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_6_reg_817_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_6_reg_822 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_6_reg_822_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_6_reg_822_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_6_reg_822_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_6_reg_827 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_6_reg_827_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_6_reg_827_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_6_reg_827_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_7_reg_832 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage17 : signal is "none";
    signal ap_block_state18_pp0_stage17_iter0 : BOOLEAN;
    signal ap_block_state42_pp0_stage17_iter1 : BOOLEAN;
    signal ap_block_state66_pp0_stage17_iter2 : BOOLEAN;
    signal ap_block_state90_pp0_stage17_iter3 : BOOLEAN;
    signal ap_block_state114_pp0_stage17_iter4 : BOOLEAN;
    signal ap_block_state138_pp0_stage17_iter5 : BOOLEAN;
    signal ap_block_state162_pp0_stage17_iter6 : BOOLEAN;
    signal ap_block_pp0_stage17_11001 : BOOLEAN;
    signal tmp_2_7_reg_832_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_7_reg_832_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_7_reg_832_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_7_reg_832_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_7_reg_837 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_7_reg_837_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_7_reg_837_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_7_reg_837_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_7_reg_837_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_7_reg_842 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage18 : signal is "none";
    signal ap_block_state19_pp0_stage18_iter0 : BOOLEAN;
    signal ap_block_state43_pp0_stage18_iter1 : BOOLEAN;
    signal ap_block_state67_pp0_stage18_iter2 : BOOLEAN;
    signal ap_block_state91_pp0_stage18_iter3 : BOOLEAN;
    signal ap_block_state115_pp0_stage18_iter4 : BOOLEAN;
    signal ap_block_state139_pp0_stage18_iter5 : BOOLEAN;
    signal ap_block_pp0_stage18_11001 : BOOLEAN;
    signal tmp_4_7_reg_842_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_7_reg_842_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_7_reg_842_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_7_reg_842_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_7_reg_847 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_7_reg_847_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_7_reg_847_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_7_reg_847_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_7_reg_847_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_8_reg_852 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_8_reg_852_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_8_reg_852_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_8_reg_852_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_8_reg_852_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_8_reg_857 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_8_reg_857_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_8_reg_857_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_8_reg_857_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_8_reg_857_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_8_reg_862 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_8_reg_862_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_8_reg_862_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_8_reg_862_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_8_reg_862_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_8_reg_862_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_8_reg_867 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_8_reg_867_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_8_reg_867_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_8_reg_867_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_8_reg_867_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_8_reg_867_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage23_subdone : BOOLEAN;
    signal ap_block_pp0_stage17_subdone : BOOLEAN;
    signal ap_block_pp0_stage17_01001 : BOOLEAN;
    signal grp_fu_350_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_350_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_block_pp0_stage12 : BOOLEAN;
    signal ap_block_pp0_stage20 : BOOLEAN;
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_block_pp0_stage13 : BOOLEAN;
    signal ap_block_pp0_stage21 : BOOLEAN;
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_block_pp0_stage14 : BOOLEAN;
    signal ap_block_pp0_stage22 : BOOLEAN;
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_block_pp0_stage15 : BOOLEAN;
    signal ap_block_pp0_stage23 : BOOLEAN;
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal ap_block_pp0_stage16 : BOOLEAN;
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal ap_block_pp0_stage17 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal grp_fu_355_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_355_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_362_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_362_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal grp_fu_368_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_368_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_350_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage4_00001 : BOOLEAN;
    signal ap_block_pp0_stage20_00001 : BOOLEAN;
    signal ap_block_pp0_stage13_00001 : BOOLEAN;
    signal ap_block_pp0_stage6_00001 : BOOLEAN;
    signal ap_block_pp0_stage22_00001 : BOOLEAN;
    signal ap_block_pp0_stage15_00001 : BOOLEAN;
    signal ap_block_pp0_stage8_00001 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp0_stage17_00001 : BOOLEAN;
    signal ap_block_pp0_stage12_00001 : BOOLEAN;
    signal ap_block_pp0_stage5_00001 : BOOLEAN;
    signal ap_block_pp0_stage21_00001 : BOOLEAN;
    signal ap_block_pp0_stage14_00001 : BOOLEAN;
    signal ap_block_pp0_stage7_00001 : BOOLEAN;
    signal ap_block_pp0_stage23_00001 : BOOLEAN;
    signal ap_block_pp0_stage16_00001 : BOOLEAN;
    signal ap_block_pp0_stage9_00001 : BOOLEAN;
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state26_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state50_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state74_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state98_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state122_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state146_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage10_00001 : BOOLEAN;
    signal grp_fu_350_ce : STD_LOGIC;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state27_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state51_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state75_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state99_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state123_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state147_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal grp_fu_355_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_355_ce : STD_LOGIC;
    signal grp_fu_362_ce : STD_LOGIC;
    signal grp_fu_368_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal ap_block_pp0_stage16_subdone : BOOLEAN;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage18_subdone : BOOLEAN;
    signal ap_block_pp0_stage19_subdone : BOOLEAN;
    signal ap_block_pp0_stage20_subdone : BOOLEAN;
    signal ap_block_pp0_stage21_subdone : BOOLEAN;
    signal ap_block_pp0_stage22_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component Err_faddfsub_32nsbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Err_fmul_32ns_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    Err_faddfsub_32nsbkb_U1 : component Err_faddfsub_32nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_350_p0,
        din1 => grp_fu_350_p1,
        opcode => grp_fu_350_opcode,
        ce => grp_fu_350_ce,
        dout => grp_fu_350_p2);

    Err_faddfsub_32nsbkb_U2 : component Err_faddfsub_32nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_355_p0,
        din1 => grp_fu_355_p1,
        opcode => grp_fu_355_opcode,
        ce => grp_fu_355_ce,
        dout => grp_fu_355_p2);

    Err_fmul_32ns_32ncud_U3 : component Err_fmul_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_362_p0,
        din1 => grp_fu_362_p1,
        ce => grp_fu_362_ce,
        dout => grp_fu_362_p2);

    Err_fmul_32ns_32ncud_U4 : component Err_fmul_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_368_p0,
        din1 => grp_fu_368_p1,
        ce => grp_fu_368_ce,
        dout => grp_fu_368_p2);





    W1_imag_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W1_imag_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    W1_imag_ap_vld_preg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = W1_imag_ap_vld)) then 
                    W1_imag_ap_vld_preg <= W1_imag_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    W1_imag_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W1_imag_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = W1_imag_ap_vld)) then 
                    W1_imag_preg <= W1_imag;
                end if; 
            end if;
        end if;
    end process;


    W1_real_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W1_real_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    W1_real_ap_vld_preg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = W1_real_ap_vld)) then 
                    W1_real_ap_vld_preg <= W1_real_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    W1_real_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W1_real_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = W1_real_ap_vld)) then 
                    W1_real_preg <= W1_real;
                end if; 
            end if;
        end if;
    end process;


    W2_imag_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W2_imag_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    W2_imag_ap_vld_preg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = W2_imag_ap_vld)) then 
                    W2_imag_ap_vld_preg <= W2_imag_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    W2_imag_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W2_imag_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = W2_imag_ap_vld)) then 
                    W2_imag_preg <= W2_imag;
                end if; 
            end if;
        end if;
    end process;


    W2_real_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W2_real_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    W2_real_ap_vld_preg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = W2_real_ap_vld)) then 
                    W2_real_ap_vld_preg <= W2_real_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    W2_real_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W2_real_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = W2_real_ap_vld)) then 
                    W2_real_preg <= W2_real;
                end if; 
            end if;
        end if;
    end process;


    W3_imag_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W3_imag_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    W3_imag_ap_vld_preg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = W3_imag_ap_vld)) then 
                    W3_imag_ap_vld_preg <= W3_imag_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    W3_imag_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W3_imag_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = W3_imag_ap_vld)) then 
                    W3_imag_preg <= W3_imag;
                end if; 
            end if;
        end if;
    end process;


    W3_real_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W3_real_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    W3_real_ap_vld_preg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = W3_real_ap_vld)) then 
                    W3_real_ap_vld_preg <= W3_real_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    W3_real_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W3_real_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = W3_real_ap_vld)) then 
                    W3_real_preg <= W3_real;
                end if; 
            end if;
        end if;
    end process;


    W4_imag_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W4_imag_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    W4_imag_ap_vld_preg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = W4_imag_ap_vld)) then 
                    W4_imag_ap_vld_preg <= W4_imag_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    W4_imag_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W4_imag_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = W4_imag_ap_vld)) then 
                    W4_imag_preg <= W4_imag;
                end if; 
            end if;
        end if;
    end process;


    W4_real_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W4_real_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    W4_real_ap_vld_preg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = W4_real_ap_vld)) then 
                    W4_real_ap_vld_preg <= W4_real_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    W4_real_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W4_real_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = W4_real_ap_vld)) then 
                    W4_real_preg <= W4_real;
                end if; 
            end if;
        end if;
    end process;


    W5_imag_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W5_imag_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    W5_imag_ap_vld_preg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = W5_imag_ap_vld)) then 
                    W5_imag_ap_vld_preg <= W5_imag_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    W5_imag_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W5_imag_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = W5_imag_ap_vld)) then 
                    W5_imag_preg <= W5_imag;
                end if; 
            end if;
        end if;
    end process;


    W5_real_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W5_real_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    W5_real_ap_vld_preg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = W5_real_ap_vld)) then 
                    W5_real_ap_vld_preg <= W5_real_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    W5_real_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W5_real_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = W5_real_ap_vld)) then 
                    W5_real_preg <= W5_real;
                end if; 
            end if;
        end if;
    end process;


    W6_imag_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W6_imag_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    W6_imag_ap_vld_preg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = W6_imag_ap_vld)) then 
                    W6_imag_ap_vld_preg <= W6_imag_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    W6_imag_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W6_imag_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = W6_imag_ap_vld)) then 
                    W6_imag_preg <= W6_imag;
                end if; 
            end if;
        end if;
    end process;


    W6_real_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W6_real_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    W6_real_ap_vld_preg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = W6_real_ap_vld)) then 
                    W6_real_ap_vld_preg <= W6_real_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    W6_real_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W6_real_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = W6_real_ap_vld)) then 
                    W6_real_preg <= W6_real;
                end if; 
            end if;
        end if;
    end process;


    W7_imag_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W7_imag_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    W7_imag_ap_vld_preg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = W7_imag_ap_vld)) then 
                    W7_imag_ap_vld_preg <= W7_imag_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    W7_imag_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W7_imag_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = W7_imag_ap_vld)) then 
                    W7_imag_preg <= W7_imag;
                end if; 
            end if;
        end if;
    end process;


    W7_real_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W7_real_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    W7_real_ap_vld_preg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = W7_real_ap_vld)) then 
                    W7_real_ap_vld_preg <= W7_real_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    W7_real_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W7_real_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = W7_real_ap_vld)) then 
                    W7_real_preg <= W7_real;
                end if; 
            end if;
        end if;
    end process;


    W8_imag_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W8_imag_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    W8_imag_ap_vld_preg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = W8_imag_ap_vld)) then 
                    W8_imag_ap_vld_preg <= W8_imag_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    W8_imag_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W8_imag_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = W8_imag_ap_vld)) then 
                    W8_imag_preg <= W8_imag;
                end if; 
            end if;
        end if;
    end process;


    W8_real_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W8_real_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    W8_real_ap_vld_preg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = W8_real_ap_vld)) then 
                    W8_real_ap_vld_preg <= W8_real_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    W8_real_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W8_real_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = W8_real_ap_vld)) then 
                    W8_real_preg <= W8_real;
                end if; 
            end if;
        end if;
    end process;


    W9_imag_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W9_imag_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    W9_imag_ap_vld_preg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = W9_imag_ap_vld)) then 
                    W9_imag_ap_vld_preg <= W9_imag_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    W9_imag_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W9_imag_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = W9_imag_ap_vld)) then 
                    W9_imag_preg <= W9_imag;
                end if; 
            end if;
        end if;
    end process;


    W9_real_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W9_real_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    W9_real_ap_vld_preg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = W9_real_ap_vld)) then 
                    W9_real_ap_vld_preg <= W9_real_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    W9_real_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                W9_real_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = W9_real_ap_vld)) then 
                    W9_real_preg <= W9_real;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_boolean_0 = ap_block_pp0_stage23_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_boolean_0 = ap_block_pp0_stage23_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_boolean_0 = ap_block_pp0_stage23_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_boolean_0 = ap_block_pp0_stage23_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_boolean_0 = ap_block_pp0_stage23_subdone))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_boolean_0 = ap_block_pp0_stage23_subdone))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17_subdone))) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    d_imag_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                d_imag_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    d_imag_ap_vld_preg <= ap_const_logic_0;
                elsif ((d_imag_ap_vld = ap_const_logic_1)) then 
                    d_imag_ap_vld_preg <= d_imag_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    d_imag_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                d_imag_preg <= ap_const_lv32_0;
            else
                if ((d_imag_ap_vld = ap_const_logic_1)) then 
                    d_imag_preg <= d_imag;
                end if; 
            end if;
        end if;
    end process;


    d_real_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                d_real_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    d_real_ap_vld_preg <= ap_const_logic_0;
                elsif ((d_real_ap_vld = ap_const_logic_1)) then 
                    d_real_ap_vld_preg <= d_real_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    d_real_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                d_real_preg <= ap_const_lv32_0;
            else
                if ((d_real_ap_vld = ap_const_logic_1)) then 
                    d_real_preg <= d_real;
                end if; 
            end if;
        end if;
    end process;


    x1_imag_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x1_imag_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    x1_imag_ap_vld_preg <= ap_const_logic_0;
                elsif ((x1_imag_ap_vld = ap_const_logic_1)) then 
                    x1_imag_ap_vld_preg <= x1_imag_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x1_imag_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x1_imag_preg <= ap_const_lv32_0;
            else
                if ((x1_imag_ap_vld = ap_const_logic_1)) then 
                    x1_imag_preg <= x1_imag;
                end if; 
            end if;
        end if;
    end process;


    x1_real_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x1_real_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    x1_real_ap_vld_preg <= ap_const_logic_0;
                elsif ((x1_real_ap_vld = ap_const_logic_1)) then 
                    x1_real_ap_vld_preg <= x1_real_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x1_real_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x1_real_preg <= ap_const_lv32_0;
            else
                if ((x1_real_ap_vld = ap_const_logic_1)) then 
                    x1_real_preg <= x1_real;
                end if; 
            end if;
        end if;
    end process;


    x2_imag_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x2_imag_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    x2_imag_ap_vld_preg <= ap_const_logic_0;
                elsif ((x2_imag_ap_vld = ap_const_logic_1)) then 
                    x2_imag_ap_vld_preg <= x2_imag_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x2_imag_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x2_imag_preg <= ap_const_lv32_0;
            else
                if ((x2_imag_ap_vld = ap_const_logic_1)) then 
                    x2_imag_preg <= x2_imag;
                end if; 
            end if;
        end if;
    end process;


    x2_real_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x2_real_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    x2_real_ap_vld_preg <= ap_const_logic_0;
                elsif ((x2_real_ap_vld = ap_const_logic_1)) then 
                    x2_real_ap_vld_preg <= x2_real_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x2_real_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x2_real_preg <= ap_const_lv32_0;
            else
                if ((x2_real_ap_vld = ap_const_logic_1)) then 
                    x2_real_preg <= x2_real;
                end if; 
            end if;
        end if;
    end process;


    x3_imag_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x3_imag_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    x3_imag_ap_vld_preg <= ap_const_logic_0;
                elsif ((x3_imag_ap_vld = ap_const_logic_1)) then 
                    x3_imag_ap_vld_preg <= x3_imag_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x3_imag_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x3_imag_preg <= ap_const_lv32_0;
            else
                if ((x3_imag_ap_vld = ap_const_logic_1)) then 
                    x3_imag_preg <= x3_imag;
                end if; 
            end if;
        end if;
    end process;


    x3_real_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x3_real_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    x3_real_ap_vld_preg <= ap_const_logic_0;
                elsif ((x3_real_ap_vld = ap_const_logic_1)) then 
                    x3_real_ap_vld_preg <= x3_real_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x3_real_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x3_real_preg <= ap_const_lv32_0;
            else
                if ((x3_real_ap_vld = ap_const_logic_1)) then 
                    x3_real_preg <= x3_real;
                end if; 
            end if;
        end if;
    end process;


    x4_imag_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x4_imag_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    x4_imag_ap_vld_preg <= ap_const_logic_0;
                elsif ((x4_imag_ap_vld = ap_const_logic_1)) then 
                    x4_imag_ap_vld_preg <= x4_imag_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x4_imag_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x4_imag_preg <= ap_const_lv32_0;
            else
                if ((x4_imag_ap_vld = ap_const_logic_1)) then 
                    x4_imag_preg <= x4_imag;
                end if; 
            end if;
        end if;
    end process;


    x4_real_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x4_real_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    x4_real_ap_vld_preg <= ap_const_logic_0;
                elsif ((x4_real_ap_vld = ap_const_logic_1)) then 
                    x4_real_ap_vld_preg <= x4_real_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x4_real_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x4_real_preg <= ap_const_lv32_0;
            else
                if ((x4_real_ap_vld = ap_const_logic_1)) then 
                    x4_real_preg <= x4_real;
                end if; 
            end if;
        end if;
    end process;


    x5_imag_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x5_imag_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    x5_imag_ap_vld_preg <= ap_const_logic_0;
                elsif ((x5_imag_ap_vld = ap_const_logic_1)) then 
                    x5_imag_ap_vld_preg <= x5_imag_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x5_imag_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x5_imag_preg <= ap_const_lv32_0;
            else
                if ((x5_imag_ap_vld = ap_const_logic_1)) then 
                    x5_imag_preg <= x5_imag;
                end if; 
            end if;
        end if;
    end process;


    x5_real_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x5_real_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    x5_real_ap_vld_preg <= ap_const_logic_0;
                elsif ((x5_real_ap_vld = ap_const_logic_1)) then 
                    x5_real_ap_vld_preg <= x5_real_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x5_real_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x5_real_preg <= ap_const_lv32_0;
            else
                if ((x5_real_ap_vld = ap_const_logic_1)) then 
                    x5_real_preg <= x5_real;
                end if; 
            end if;
        end if;
    end process;


    x6_imag_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x6_imag_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    x6_imag_ap_vld_preg <= ap_const_logic_0;
                elsif ((x6_imag_ap_vld = ap_const_logic_1)) then 
                    x6_imag_ap_vld_preg <= x6_imag_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x6_imag_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x6_imag_preg <= ap_const_lv32_0;
            else
                if ((x6_imag_ap_vld = ap_const_logic_1)) then 
                    x6_imag_preg <= x6_imag;
                end if; 
            end if;
        end if;
    end process;


    x6_real_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x6_real_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    x6_real_ap_vld_preg <= ap_const_logic_0;
                elsif ((x6_real_ap_vld = ap_const_logic_1)) then 
                    x6_real_ap_vld_preg <= x6_real_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x6_real_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x6_real_preg <= ap_const_lv32_0;
            else
                if ((x6_real_ap_vld = ap_const_logic_1)) then 
                    x6_real_preg <= x6_real;
                end if; 
            end if;
        end if;
    end process;


    x7_imag_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x7_imag_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    x7_imag_ap_vld_preg <= ap_const_logic_0;
                elsif ((x7_imag_ap_vld = ap_const_logic_1)) then 
                    x7_imag_ap_vld_preg <= x7_imag_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x7_imag_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x7_imag_preg <= ap_const_lv32_0;
            else
                if ((x7_imag_ap_vld = ap_const_logic_1)) then 
                    x7_imag_preg <= x7_imag;
                end if; 
            end if;
        end if;
    end process;


    x7_real_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x7_real_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    x7_real_ap_vld_preg <= ap_const_logic_0;
                elsif ((x7_real_ap_vld = ap_const_logic_1)) then 
                    x7_real_ap_vld_preg <= x7_real_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x7_real_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x7_real_preg <= ap_const_lv32_0;
            else
                if ((x7_real_ap_vld = ap_const_logic_1)) then 
                    x7_real_preg <= x7_real;
                end if; 
            end if;
        end if;
    end process;


    x8_imag_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x8_imag_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    x8_imag_ap_vld_preg <= ap_const_logic_0;
                elsif ((x8_imag_ap_vld = ap_const_logic_1)) then 
                    x8_imag_ap_vld_preg <= x8_imag_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x8_imag_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x8_imag_preg <= ap_const_lv32_0;
            else
                if ((x8_imag_ap_vld = ap_const_logic_1)) then 
                    x8_imag_preg <= x8_imag;
                end if; 
            end if;
        end if;
    end process;


    x8_real_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x8_real_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    x8_real_ap_vld_preg <= ap_const_logic_0;
                elsif ((x8_real_ap_vld = ap_const_logic_1)) then 
                    x8_real_ap_vld_preg <= x8_real_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x8_real_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x8_real_preg <= ap_const_lv32_0;
            else
                if ((x8_real_ap_vld = ap_const_logic_1)) then 
                    x8_real_preg <= x8_real;
                end if; 
            end if;
        end if;
    end process;


    x9_imag_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x9_imag_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    x9_imag_ap_vld_preg <= ap_const_logic_0;
                elsif ((x9_imag_ap_vld = ap_const_logic_1)) then 
                    x9_imag_ap_vld_preg <= x9_imag_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x9_imag_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x9_imag_preg <= ap_const_lv32_0;
            else
                if ((x9_imag_ap_vld = ap_const_logic_1)) then 
                    x9_imag_preg <= x9_imag;
                end if; 
            end if;
        end if;
    end process;


    x9_real_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x9_real_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    x9_real_ap_vld_preg <= ap_const_logic_0;
                elsif ((x9_real_ap_vld = ap_const_logic_1)) then 
                    x9_real_ap_vld_preg <= x9_real_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x9_real_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x9_real_preg <= ap_const_lv32_0;
            else
                if ((x9_real_ap_vld = ap_const_logic_1)) then 
                    x9_real_preg <= x9_real;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                W1_imag_read_reg_670 <= W1_imag_in_sig;
                W1_real_read_reg_676 <= W1_real_in_sig;
                W2_imag_read_reg_658 <= W2_imag_in_sig;
                W2_real_read_reg_664 <= W2_real_in_sig;
                W3_imag_read_reg_646 <= W3_imag_in_sig;
                W3_real_read_reg_652 <= W3_real_in_sig;
                W4_imag_read_reg_634 <= W4_imag_in_sig;
                W4_real_read_reg_640 <= W4_real_in_sig;
                W5_imag_read_reg_622 <= W5_imag_in_sig;
                W5_real_read_reg_628 <= W5_real_in_sig;
                W6_imag_read_reg_610 <= W6_imag_in_sig;
                W6_real_read_reg_616 <= W6_real_in_sig;
                W7_imag_read_reg_598 <= W7_imag_in_sig;
                W7_real_read_reg_604 <= W7_real_in_sig;
                W8_imag_read_reg_586 <= W8_imag_in_sig;
                W8_real_read_reg_592 <= W8_real_in_sig;
                W9_imag_read_reg_574 <= W9_imag_in_sig;
                W9_real_read_reg_580 <= W9_real_in_sig;
                d_imag_read_reg_682 <= d_imag_in_sig;
                d_imag_read_reg_682_pp0_iter1_reg <= d_imag_read_reg_682;
                d_imag_read_reg_682_pp0_iter2_reg <= d_imag_read_reg_682_pp0_iter1_reg;
                d_imag_read_reg_682_pp0_iter3_reg <= d_imag_read_reg_682_pp0_iter2_reg;
                d_imag_read_reg_682_pp0_iter4_reg <= d_imag_read_reg_682_pp0_iter3_reg;
                d_imag_read_reg_682_pp0_iter5_reg <= d_imag_read_reg_682_pp0_iter4_reg;
                d_imag_read_reg_682_pp0_iter6_reg <= d_imag_read_reg_682_pp0_iter5_reg;
                d_real_read_reg_687 <= d_real_in_sig;
                d_real_read_reg_687_pp0_iter1_reg <= d_real_read_reg_687;
                d_real_read_reg_687_pp0_iter2_reg <= d_real_read_reg_687_pp0_iter1_reg;
                d_real_read_reg_687_pp0_iter3_reg <= d_real_read_reg_687_pp0_iter2_reg;
                d_real_read_reg_687_pp0_iter4_reg <= d_real_read_reg_687_pp0_iter3_reg;
                d_real_read_reg_687_pp0_iter5_reg <= d_real_read_reg_687_pp0_iter4_reg;
                d_real_read_reg_687_pp0_iter6_reg <= d_real_read_reg_687_pp0_iter5_reg;
                x1_imag_read_reg_562 <= x1_imag_in_sig;
                x2_imag_read_reg_550 <= x2_imag_in_sig;
                x2_real_read_reg_556 <= x2_real_in_sig;
                x3_imag_read_reg_538 <= x3_imag_in_sig;
                x3_real_read_reg_544 <= x3_real_in_sig;
                x4_imag_read_reg_526 <= x4_imag_in_sig;
                x4_real_read_reg_532 <= x4_real_in_sig;
                x5_imag_read_reg_514 <= x5_imag_in_sig;
                x5_real_read_reg_520 <= x5_real_in_sig;
                x6_imag_read_reg_502 <= x6_imag_in_sig;
                x6_real_read_reg_508 <= x6_real_in_sig;
                x7_imag_read_reg_490 <= x7_imag_in_sig;
                x7_real_read_reg_496 <= x7_real_in_sig;
                x8_imag_read_reg_478 <= x8_imag_in_sig;
                x8_real_read_reg_484 <= x8_real_in_sig;
                x9_imag_read_reg_466 <= x9_imag_in_sig;
                x9_real_read_reg_472 <= x9_real_in_sig;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage19_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_logic_1 = ap_const_logic_1)))) then
                reg_374 <= grp_fu_350_p2;
                reg_379 <= grp_fu_355_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then
                reg_384 <= grp_fu_350_p2;
                reg_389 <= grp_fu_355_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage20_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then
                reg_394 <= grp_fu_350_p2;
                reg_399 <= grp_fu_355_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage21_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then
                reg_404 <= grp_fu_350_p2;
                reg_409 <= grp_fu_355_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)))) then
                reg_414 <= grp_fu_350_p2;
                reg_419 <= grp_fu_355_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage22_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then
                reg_424 <= grp_fu_350_p2;
                reg_429 <= grp_fu_355_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then
                reg_434 <= grp_fu_350_p2;
                reg_439 <= grp_fu_355_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage16_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)))) then
                reg_444 <= grp_fu_350_p2;
                reg_449 <= grp_fu_355_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then
                reg_454 <= grp_fu_350_p2;
                reg_460 <= grp_fu_355_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_logic_1 = ap_const_logic_1))) then
                tmp_2_1_reg_712 <= grp_fu_362_p2;
                tmp_6_1_reg_717 <= grp_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_logic_1 = ap_const_logic_1))) then
                tmp_2_2_reg_732 <= grp_fu_362_p2;
                tmp_6_2_reg_737 <= grp_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                tmp_2_2_reg_732_pp0_iter1_reg <= tmp_2_2_reg_732;
                tmp_6_2_reg_737_pp0_iter1_reg <= tmp_6_2_reg_737;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_logic_1 = ap_const_logic_1))) then
                tmp_2_3_reg_752 <= grp_fu_362_p2;
                tmp_6_3_reg_757 <= grp_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                tmp_2_3_reg_752_pp0_iter1_reg <= tmp_2_3_reg_752;
                tmp_6_3_reg_757_pp0_iter1_reg <= tmp_6_3_reg_757;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_logic_1 = ap_const_logic_1))) then
                tmp_2_4_reg_772 <= grp_fu_362_p2;
                tmp_6_4_reg_777 <= grp_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then
                tmp_2_4_reg_772_pp0_iter1_reg <= tmp_2_4_reg_772;
                tmp_2_4_reg_772_pp0_iter2_reg <= tmp_2_4_reg_772_pp0_iter1_reg;
                tmp_6_4_reg_777_pp0_iter1_reg <= tmp_6_4_reg_777;
                tmp_6_4_reg_777_pp0_iter2_reg <= tmp_6_4_reg_777_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_logic_1 = ap_const_logic_1))) then
                tmp_2_5_reg_792 <= grp_fu_362_p2;
                tmp_6_5_reg_797 <= grp_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then
                tmp_2_5_reg_792_pp0_iter1_reg <= tmp_2_5_reg_792;
                tmp_2_5_reg_792_pp0_iter2_reg <= tmp_2_5_reg_792_pp0_iter1_reg;
                tmp_2_5_reg_792_pp0_iter3_reg <= tmp_2_5_reg_792_pp0_iter2_reg;
                tmp_6_5_reg_797_pp0_iter1_reg <= tmp_6_5_reg_797;
                tmp_6_5_reg_797_pp0_iter2_reg <= tmp_6_5_reg_797_pp0_iter1_reg;
                tmp_6_5_reg_797_pp0_iter3_reg <= tmp_6_5_reg_797_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_logic_1 = ap_const_logic_1))) then
                tmp_2_6_reg_812 <= grp_fu_362_p2;
                tmp_6_6_reg_817 <= grp_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then
                tmp_2_6_reg_812_pp0_iter1_reg <= tmp_2_6_reg_812;
                tmp_2_6_reg_812_pp0_iter2_reg <= tmp_2_6_reg_812_pp0_iter1_reg;
                tmp_2_6_reg_812_pp0_iter3_reg <= tmp_2_6_reg_812_pp0_iter2_reg;
                tmp_6_6_reg_817_pp0_iter1_reg <= tmp_6_6_reg_817;
                tmp_6_6_reg_817_pp0_iter2_reg <= tmp_6_6_reg_817_pp0_iter1_reg;
                tmp_6_6_reg_817_pp0_iter3_reg <= tmp_6_6_reg_817_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17_11001))) then
                tmp_2_7_reg_832 <= grp_fu_362_p2;
                tmp_6_7_reg_837 <= grp_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17_11001))) then
                tmp_2_7_reg_832_pp0_iter1_reg <= tmp_2_7_reg_832;
                tmp_2_7_reg_832_pp0_iter2_reg <= tmp_2_7_reg_832_pp0_iter1_reg;
                tmp_2_7_reg_832_pp0_iter3_reg <= tmp_2_7_reg_832_pp0_iter2_reg;
                tmp_2_7_reg_832_pp0_iter4_reg <= tmp_2_7_reg_832_pp0_iter3_reg;
                tmp_6_7_reg_837_pp0_iter1_reg <= tmp_6_7_reg_837;
                tmp_6_7_reg_837_pp0_iter2_reg <= tmp_6_7_reg_837_pp0_iter1_reg;
                tmp_6_7_reg_837_pp0_iter3_reg <= tmp_6_7_reg_837_pp0_iter2_reg;
                tmp_6_7_reg_837_pp0_iter4_reg <= tmp_6_7_reg_837_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage19_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (ap_const_logic_1 = ap_const_logic_1))) then
                tmp_2_8_reg_852 <= grp_fu_362_p2;
                tmp_6_8_reg_857 <= grp_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage19_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19))) then
                tmp_2_8_reg_852_pp0_iter1_reg <= tmp_2_8_reg_852;
                tmp_2_8_reg_852_pp0_iter2_reg <= tmp_2_8_reg_852_pp0_iter1_reg;
                tmp_2_8_reg_852_pp0_iter3_reg <= tmp_2_8_reg_852_pp0_iter2_reg;
                tmp_2_8_reg_852_pp0_iter4_reg <= tmp_2_8_reg_852_pp0_iter3_reg;
                tmp_6_8_reg_857_pp0_iter1_reg <= tmp_6_8_reg_857;
                tmp_6_8_reg_857_pp0_iter2_reg <= tmp_6_8_reg_857_pp0_iter1_reg;
                tmp_6_8_reg_857_pp0_iter3_reg <= tmp_6_8_reg_857_pp0_iter2_reg;
                tmp_6_8_reg_857_pp0_iter4_reg <= tmp_6_8_reg_857_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_const_logic_1))) then
                tmp_2_reg_692 <= grp_fu_362_p2;
                tmp_6_reg_697 <= grp_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_logic_1 = ap_const_logic_1))) then
                tmp_4_1_reg_722 <= grp_fu_362_p2;
                tmp_8_1_reg_727 <= grp_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_logic_1 = ap_const_logic_1))) then
                tmp_4_2_reg_742 <= grp_fu_362_p2;
                tmp_8_2_reg_747 <= grp_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                tmp_4_2_reg_742_pp0_iter1_reg <= tmp_4_2_reg_742;
                tmp_8_2_reg_747_pp0_iter1_reg <= tmp_8_2_reg_747;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_logic_1 = ap_const_logic_1))) then
                tmp_4_3_reg_762 <= grp_fu_362_p2;
                tmp_8_3_reg_767 <= grp_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then
                tmp_4_3_reg_762_pp0_iter1_reg <= tmp_4_3_reg_762;
                tmp_4_3_reg_762_pp0_iter2_reg <= tmp_4_3_reg_762_pp0_iter1_reg;
                tmp_8_3_reg_767_pp0_iter1_reg <= tmp_8_3_reg_767;
                tmp_8_3_reg_767_pp0_iter2_reg <= tmp_8_3_reg_767_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_logic_1 = ap_const_logic_1))) then
                tmp_4_4_reg_782 <= grp_fu_362_p2;
                tmp_8_4_reg_787 <= grp_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then
                tmp_4_4_reg_782_pp0_iter1_reg <= tmp_4_4_reg_782;
                tmp_4_4_reg_782_pp0_iter2_reg <= tmp_4_4_reg_782_pp0_iter1_reg;
                tmp_8_4_reg_787_pp0_iter1_reg <= tmp_8_4_reg_787;
                tmp_8_4_reg_787_pp0_iter2_reg <= tmp_8_4_reg_787_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_logic_1 = ap_const_logic_1))) then
                tmp_4_5_reg_802 <= grp_fu_362_p2;
                tmp_8_5_reg_807 <= grp_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then
                tmp_4_5_reg_802_pp0_iter1_reg <= tmp_4_5_reg_802;
                tmp_4_5_reg_802_pp0_iter2_reg <= tmp_4_5_reg_802_pp0_iter1_reg;
                tmp_4_5_reg_802_pp0_iter3_reg <= tmp_4_5_reg_802_pp0_iter2_reg;
                tmp_8_5_reg_807_pp0_iter1_reg <= tmp_8_5_reg_807;
                tmp_8_5_reg_807_pp0_iter2_reg <= tmp_8_5_reg_807_pp0_iter1_reg;
                tmp_8_5_reg_807_pp0_iter3_reg <= tmp_8_5_reg_807_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage16_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_logic_1 = ap_const_logic_1))) then
                tmp_4_6_reg_822 <= grp_fu_362_p2;
                tmp_8_6_reg_827 <= grp_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage16_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16))) then
                tmp_4_6_reg_822_pp0_iter1_reg <= tmp_4_6_reg_822;
                tmp_4_6_reg_822_pp0_iter2_reg <= tmp_4_6_reg_822_pp0_iter1_reg;
                tmp_4_6_reg_822_pp0_iter3_reg <= tmp_4_6_reg_822_pp0_iter2_reg;
                tmp_8_6_reg_827_pp0_iter1_reg <= tmp_8_6_reg_827;
                tmp_8_6_reg_827_pp0_iter2_reg <= tmp_8_6_reg_827_pp0_iter1_reg;
                tmp_8_6_reg_827_pp0_iter3_reg <= tmp_8_6_reg_827_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_const_boolean_0 = ap_block_pp0_stage18_11001))) then
                tmp_4_7_reg_842 <= grp_fu_362_p2;
                tmp_8_7_reg_847 <= grp_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_const_boolean_0 = ap_block_pp0_stage18_11001))) then
                tmp_4_7_reg_842_pp0_iter1_reg <= tmp_4_7_reg_842;
                tmp_4_7_reg_842_pp0_iter2_reg <= tmp_4_7_reg_842_pp0_iter1_reg;
                tmp_4_7_reg_842_pp0_iter3_reg <= tmp_4_7_reg_842_pp0_iter2_reg;
                tmp_4_7_reg_842_pp0_iter4_reg <= tmp_4_7_reg_842_pp0_iter3_reg;
                tmp_8_7_reg_847_pp0_iter1_reg <= tmp_8_7_reg_847;
                tmp_8_7_reg_847_pp0_iter2_reg <= tmp_8_7_reg_847_pp0_iter1_reg;
                tmp_8_7_reg_847_pp0_iter3_reg <= tmp_8_7_reg_847_pp0_iter2_reg;
                tmp_8_7_reg_847_pp0_iter4_reg <= tmp_8_7_reg_847_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage20_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (ap_const_logic_1 = ap_const_logic_1))) then
                tmp_4_8_reg_862 <= grp_fu_362_p2;
                tmp_8_8_reg_867 <= grp_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage20_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20))) then
                tmp_4_8_reg_862_pp0_iter1_reg <= tmp_4_8_reg_862;
                tmp_4_8_reg_862_pp0_iter2_reg <= tmp_4_8_reg_862_pp0_iter1_reg;
                tmp_4_8_reg_862_pp0_iter3_reg <= tmp_4_8_reg_862_pp0_iter2_reg;
                tmp_4_8_reg_862_pp0_iter4_reg <= tmp_4_8_reg_862_pp0_iter3_reg;
                tmp_4_8_reg_862_pp0_iter5_reg <= tmp_4_8_reg_862_pp0_iter4_reg;
                tmp_8_8_reg_867_pp0_iter1_reg <= tmp_8_8_reg_867;
                tmp_8_8_reg_867_pp0_iter2_reg <= tmp_8_8_reg_867_pp0_iter1_reg;
                tmp_8_8_reg_867_pp0_iter3_reg <= tmp_8_8_reg_867_pp0_iter2_reg;
                tmp_8_8_reg_867_pp0_iter4_reg <= tmp_8_8_reg_867_pp0_iter3_reg;
                tmp_8_8_reg_867_pp0_iter5_reg <= tmp_8_8_reg_867_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_logic_1 = ap_const_logic_1))) then
                tmp_4_reg_702 <= grp_fu_362_p2;
                tmp_8_reg_707 <= grp_fu_368_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage23_subdone, ap_block_pp0_stage17_subdone, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone, ap_block_pp0_stage15_subdone, ap_block_pp0_stage16_subdone, ap_reset_idle_pp0, ap_block_pp0_stage18_subdone, ap_block_pp0_stage19_subdone, ap_block_pp0_stage20_subdone, ap_block_pp0_stage21_subdone, ap_block_pp0_stage22_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when ap_ST_fsm_pp0_stage16 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage16_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                end if;
            when ap_ST_fsm_pp0_stage17 => 
                if (((ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage17_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage17_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                end if;
            when ap_ST_fsm_pp0_stage18 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage18_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                end if;
            when ap_ST_fsm_pp0_stage19 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage19_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                end if;
            when ap_ST_fsm_pp0_stage20 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage20_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                end if;
            when ap_ST_fsm_pp0_stage21 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage21_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                end if;
            when ap_ST_fsm_pp0_stage22 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage22_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                end if;
            when ap_ST_fsm_pp0_stage23 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage23_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    W1_imag_ap_vld_in_sig_assign_proc : process(W1_imag_ap_vld, W1_imag_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = W1_imag_ap_vld)) then 
            W1_imag_ap_vld_in_sig <= W1_imag_ap_vld;
        else 
            W1_imag_ap_vld_in_sig <= W1_imag_ap_vld_preg;
        end if; 
    end process;


    W1_imag_blk_n_assign_proc : process(W1_imag_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W1_imag_blk_n <= W1_imag_ap_vld;
        else 
            W1_imag_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    W1_imag_in_sig_assign_proc : process(W1_imag, W1_imag_preg, W1_imag_ap_vld)
    begin
        if ((ap_const_logic_1 = W1_imag_ap_vld)) then 
            W1_imag_in_sig <= W1_imag;
        else 
            W1_imag_in_sig <= W1_imag_preg;
        end if; 
    end process;


    W1_real_ap_vld_in_sig_assign_proc : process(W1_real_ap_vld, W1_real_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = W1_real_ap_vld)) then 
            W1_real_ap_vld_in_sig <= W1_real_ap_vld;
        else 
            W1_real_ap_vld_in_sig <= W1_real_ap_vld_preg;
        end if; 
    end process;


    W1_real_blk_n_assign_proc : process(W1_real_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W1_real_blk_n <= W1_real_ap_vld;
        else 
            W1_real_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    W1_real_in_sig_assign_proc : process(W1_real, W1_real_preg, W1_real_ap_vld)
    begin
        if ((ap_const_logic_1 = W1_real_ap_vld)) then 
            W1_real_in_sig <= W1_real;
        else 
            W1_real_in_sig <= W1_real_preg;
        end if; 
    end process;


    W2_imag_ap_vld_in_sig_assign_proc : process(W2_imag_ap_vld, W2_imag_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = W2_imag_ap_vld)) then 
            W2_imag_ap_vld_in_sig <= W2_imag_ap_vld;
        else 
            W2_imag_ap_vld_in_sig <= W2_imag_ap_vld_preg;
        end if; 
    end process;


    W2_imag_blk_n_assign_proc : process(W2_imag_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W2_imag_blk_n <= W2_imag_ap_vld;
        else 
            W2_imag_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    W2_imag_in_sig_assign_proc : process(W2_imag, W2_imag_preg, W2_imag_ap_vld)
    begin
        if ((ap_const_logic_1 = W2_imag_ap_vld)) then 
            W2_imag_in_sig <= W2_imag;
        else 
            W2_imag_in_sig <= W2_imag_preg;
        end if; 
    end process;


    W2_real_ap_vld_in_sig_assign_proc : process(W2_real_ap_vld, W2_real_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = W2_real_ap_vld)) then 
            W2_real_ap_vld_in_sig <= W2_real_ap_vld;
        else 
            W2_real_ap_vld_in_sig <= W2_real_ap_vld_preg;
        end if; 
    end process;


    W2_real_blk_n_assign_proc : process(W2_real_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W2_real_blk_n <= W2_real_ap_vld;
        else 
            W2_real_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    W2_real_in_sig_assign_proc : process(W2_real, W2_real_preg, W2_real_ap_vld)
    begin
        if ((ap_const_logic_1 = W2_real_ap_vld)) then 
            W2_real_in_sig <= W2_real;
        else 
            W2_real_in_sig <= W2_real_preg;
        end if; 
    end process;


    W3_imag_ap_vld_in_sig_assign_proc : process(W3_imag_ap_vld, W3_imag_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = W3_imag_ap_vld)) then 
            W3_imag_ap_vld_in_sig <= W3_imag_ap_vld;
        else 
            W3_imag_ap_vld_in_sig <= W3_imag_ap_vld_preg;
        end if; 
    end process;


    W3_imag_blk_n_assign_proc : process(W3_imag_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W3_imag_blk_n <= W3_imag_ap_vld;
        else 
            W3_imag_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    W3_imag_in_sig_assign_proc : process(W3_imag, W3_imag_preg, W3_imag_ap_vld)
    begin
        if ((ap_const_logic_1 = W3_imag_ap_vld)) then 
            W3_imag_in_sig <= W3_imag;
        else 
            W3_imag_in_sig <= W3_imag_preg;
        end if; 
    end process;


    W3_real_ap_vld_in_sig_assign_proc : process(W3_real_ap_vld, W3_real_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = W3_real_ap_vld)) then 
            W3_real_ap_vld_in_sig <= W3_real_ap_vld;
        else 
            W3_real_ap_vld_in_sig <= W3_real_ap_vld_preg;
        end if; 
    end process;


    W3_real_blk_n_assign_proc : process(W3_real_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W3_real_blk_n <= W3_real_ap_vld;
        else 
            W3_real_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    W3_real_in_sig_assign_proc : process(W3_real, W3_real_preg, W3_real_ap_vld)
    begin
        if ((ap_const_logic_1 = W3_real_ap_vld)) then 
            W3_real_in_sig <= W3_real;
        else 
            W3_real_in_sig <= W3_real_preg;
        end if; 
    end process;


    W4_imag_ap_vld_in_sig_assign_proc : process(W4_imag_ap_vld, W4_imag_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = W4_imag_ap_vld)) then 
            W4_imag_ap_vld_in_sig <= W4_imag_ap_vld;
        else 
            W4_imag_ap_vld_in_sig <= W4_imag_ap_vld_preg;
        end if; 
    end process;


    W4_imag_blk_n_assign_proc : process(W4_imag_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W4_imag_blk_n <= W4_imag_ap_vld;
        else 
            W4_imag_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    W4_imag_in_sig_assign_proc : process(W4_imag, W4_imag_preg, W4_imag_ap_vld)
    begin
        if ((ap_const_logic_1 = W4_imag_ap_vld)) then 
            W4_imag_in_sig <= W4_imag;
        else 
            W4_imag_in_sig <= W4_imag_preg;
        end if; 
    end process;


    W4_real_ap_vld_in_sig_assign_proc : process(W4_real_ap_vld, W4_real_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = W4_real_ap_vld)) then 
            W4_real_ap_vld_in_sig <= W4_real_ap_vld;
        else 
            W4_real_ap_vld_in_sig <= W4_real_ap_vld_preg;
        end if; 
    end process;


    W4_real_blk_n_assign_proc : process(W4_real_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W4_real_blk_n <= W4_real_ap_vld;
        else 
            W4_real_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    W4_real_in_sig_assign_proc : process(W4_real, W4_real_preg, W4_real_ap_vld)
    begin
        if ((ap_const_logic_1 = W4_real_ap_vld)) then 
            W4_real_in_sig <= W4_real;
        else 
            W4_real_in_sig <= W4_real_preg;
        end if; 
    end process;


    W5_imag_ap_vld_in_sig_assign_proc : process(W5_imag_ap_vld, W5_imag_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = W5_imag_ap_vld)) then 
            W5_imag_ap_vld_in_sig <= W5_imag_ap_vld;
        else 
            W5_imag_ap_vld_in_sig <= W5_imag_ap_vld_preg;
        end if; 
    end process;


    W5_imag_blk_n_assign_proc : process(W5_imag_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W5_imag_blk_n <= W5_imag_ap_vld;
        else 
            W5_imag_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    W5_imag_in_sig_assign_proc : process(W5_imag, W5_imag_preg, W5_imag_ap_vld)
    begin
        if ((ap_const_logic_1 = W5_imag_ap_vld)) then 
            W5_imag_in_sig <= W5_imag;
        else 
            W5_imag_in_sig <= W5_imag_preg;
        end if; 
    end process;


    W5_real_ap_vld_in_sig_assign_proc : process(W5_real_ap_vld, W5_real_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = W5_real_ap_vld)) then 
            W5_real_ap_vld_in_sig <= W5_real_ap_vld;
        else 
            W5_real_ap_vld_in_sig <= W5_real_ap_vld_preg;
        end if; 
    end process;


    W5_real_blk_n_assign_proc : process(W5_real_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W5_real_blk_n <= W5_real_ap_vld;
        else 
            W5_real_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    W5_real_in_sig_assign_proc : process(W5_real, W5_real_preg, W5_real_ap_vld)
    begin
        if ((ap_const_logic_1 = W5_real_ap_vld)) then 
            W5_real_in_sig <= W5_real;
        else 
            W5_real_in_sig <= W5_real_preg;
        end if; 
    end process;


    W6_imag_ap_vld_in_sig_assign_proc : process(W6_imag_ap_vld, W6_imag_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = W6_imag_ap_vld)) then 
            W6_imag_ap_vld_in_sig <= W6_imag_ap_vld;
        else 
            W6_imag_ap_vld_in_sig <= W6_imag_ap_vld_preg;
        end if; 
    end process;


    W6_imag_blk_n_assign_proc : process(W6_imag_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W6_imag_blk_n <= W6_imag_ap_vld;
        else 
            W6_imag_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    W6_imag_in_sig_assign_proc : process(W6_imag, W6_imag_preg, W6_imag_ap_vld)
    begin
        if ((ap_const_logic_1 = W6_imag_ap_vld)) then 
            W6_imag_in_sig <= W6_imag;
        else 
            W6_imag_in_sig <= W6_imag_preg;
        end if; 
    end process;


    W6_real_ap_vld_in_sig_assign_proc : process(W6_real_ap_vld, W6_real_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = W6_real_ap_vld)) then 
            W6_real_ap_vld_in_sig <= W6_real_ap_vld;
        else 
            W6_real_ap_vld_in_sig <= W6_real_ap_vld_preg;
        end if; 
    end process;


    W6_real_blk_n_assign_proc : process(W6_real_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W6_real_blk_n <= W6_real_ap_vld;
        else 
            W6_real_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    W6_real_in_sig_assign_proc : process(W6_real, W6_real_preg, W6_real_ap_vld)
    begin
        if ((ap_const_logic_1 = W6_real_ap_vld)) then 
            W6_real_in_sig <= W6_real;
        else 
            W6_real_in_sig <= W6_real_preg;
        end if; 
    end process;


    W7_imag_ap_vld_in_sig_assign_proc : process(W7_imag_ap_vld, W7_imag_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = W7_imag_ap_vld)) then 
            W7_imag_ap_vld_in_sig <= W7_imag_ap_vld;
        else 
            W7_imag_ap_vld_in_sig <= W7_imag_ap_vld_preg;
        end if; 
    end process;


    W7_imag_blk_n_assign_proc : process(W7_imag_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W7_imag_blk_n <= W7_imag_ap_vld;
        else 
            W7_imag_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    W7_imag_in_sig_assign_proc : process(W7_imag, W7_imag_preg, W7_imag_ap_vld)
    begin
        if ((ap_const_logic_1 = W7_imag_ap_vld)) then 
            W7_imag_in_sig <= W7_imag;
        else 
            W7_imag_in_sig <= W7_imag_preg;
        end if; 
    end process;


    W7_real_ap_vld_in_sig_assign_proc : process(W7_real_ap_vld, W7_real_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = W7_real_ap_vld)) then 
            W7_real_ap_vld_in_sig <= W7_real_ap_vld;
        else 
            W7_real_ap_vld_in_sig <= W7_real_ap_vld_preg;
        end if; 
    end process;


    W7_real_blk_n_assign_proc : process(W7_real_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W7_real_blk_n <= W7_real_ap_vld;
        else 
            W7_real_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    W7_real_in_sig_assign_proc : process(W7_real, W7_real_preg, W7_real_ap_vld)
    begin
        if ((ap_const_logic_1 = W7_real_ap_vld)) then 
            W7_real_in_sig <= W7_real;
        else 
            W7_real_in_sig <= W7_real_preg;
        end if; 
    end process;


    W8_imag_ap_vld_in_sig_assign_proc : process(W8_imag_ap_vld, W8_imag_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = W8_imag_ap_vld)) then 
            W8_imag_ap_vld_in_sig <= W8_imag_ap_vld;
        else 
            W8_imag_ap_vld_in_sig <= W8_imag_ap_vld_preg;
        end if; 
    end process;


    W8_imag_blk_n_assign_proc : process(W8_imag_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W8_imag_blk_n <= W8_imag_ap_vld;
        else 
            W8_imag_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    W8_imag_in_sig_assign_proc : process(W8_imag, W8_imag_preg, W8_imag_ap_vld)
    begin
        if ((ap_const_logic_1 = W8_imag_ap_vld)) then 
            W8_imag_in_sig <= W8_imag;
        else 
            W8_imag_in_sig <= W8_imag_preg;
        end if; 
    end process;


    W8_real_ap_vld_in_sig_assign_proc : process(W8_real_ap_vld, W8_real_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = W8_real_ap_vld)) then 
            W8_real_ap_vld_in_sig <= W8_real_ap_vld;
        else 
            W8_real_ap_vld_in_sig <= W8_real_ap_vld_preg;
        end if; 
    end process;


    W8_real_blk_n_assign_proc : process(W8_real_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W8_real_blk_n <= W8_real_ap_vld;
        else 
            W8_real_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    W8_real_in_sig_assign_proc : process(W8_real, W8_real_preg, W8_real_ap_vld)
    begin
        if ((ap_const_logic_1 = W8_real_ap_vld)) then 
            W8_real_in_sig <= W8_real;
        else 
            W8_real_in_sig <= W8_real_preg;
        end if; 
    end process;


    W9_imag_ap_vld_in_sig_assign_proc : process(W9_imag_ap_vld, W9_imag_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = W9_imag_ap_vld)) then 
            W9_imag_ap_vld_in_sig <= W9_imag_ap_vld;
        else 
            W9_imag_ap_vld_in_sig <= W9_imag_ap_vld_preg;
        end if; 
    end process;


    W9_imag_blk_n_assign_proc : process(W9_imag_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W9_imag_blk_n <= W9_imag_ap_vld;
        else 
            W9_imag_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    W9_imag_in_sig_assign_proc : process(W9_imag, W9_imag_preg, W9_imag_ap_vld)
    begin
        if ((ap_const_logic_1 = W9_imag_ap_vld)) then 
            W9_imag_in_sig <= W9_imag;
        else 
            W9_imag_in_sig <= W9_imag_preg;
        end if; 
    end process;


    W9_real_ap_vld_in_sig_assign_proc : process(W9_real_ap_vld, W9_real_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = W9_real_ap_vld)) then 
            W9_real_ap_vld_in_sig <= W9_real_ap_vld;
        else 
            W9_real_ap_vld_in_sig <= W9_real_ap_vld_preg;
        end if; 
    end process;


    W9_real_blk_n_assign_proc : process(W9_real_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W9_real_blk_n <= W9_real_ap_vld;
        else 
            W9_real_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    W9_real_in_sig_assign_proc : process(W9_real, W9_real_preg, W9_real_ap_vld)
    begin
        if ((ap_const_logic_1 = W9_real_ap_vld)) then 
            W9_real_in_sig <= W9_real;
        else 
            W9_real_in_sig <= W9_real_preg;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage15 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage16 <= ap_CS_fsm(16);
    ap_CS_fsm_pp0_stage17 <= ap_CS_fsm(17);
    ap_CS_fsm_pp0_stage18 <= ap_CS_fsm(18);
    ap_CS_fsm_pp0_stage19 <= ap_CS_fsm(19);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage20 <= ap_CS_fsm(20);
    ap_CS_fsm_pp0_stage21 <= ap_CS_fsm(21);
    ap_CS_fsm_pp0_stage22 <= ap_CS_fsm(22);
    ap_CS_fsm_pp0_stage23 <= ap_CS_fsm(23);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_00001_assign_proc : process(d_real_ap_vld_in_sig, d_imag_ap_vld_in_sig, W1_real_ap_vld_in_sig, W1_imag_ap_vld_in_sig, W2_real_ap_vld_in_sig, W2_imag_ap_vld_in_sig, W3_real_ap_vld_in_sig, W3_imag_ap_vld_in_sig, W4_real_ap_vld_in_sig, W4_imag_ap_vld_in_sig, W5_real_ap_vld_in_sig, W5_imag_ap_vld_in_sig, W6_real_ap_vld_in_sig, W6_imag_ap_vld_in_sig, W7_real_ap_vld_in_sig, W7_imag_ap_vld_in_sig, W8_real_ap_vld_in_sig, W8_imag_ap_vld_in_sig, W9_real_ap_vld_in_sig, W9_imag_ap_vld_in_sig, x1_real_ap_vld_in_sig, x1_imag_ap_vld_in_sig, x2_real_ap_vld_in_sig, x2_imag_ap_vld_in_sig, x3_real_ap_vld_in_sig, x3_imag_ap_vld_in_sig, x4_real_ap_vld_in_sig, x4_imag_ap_vld_in_sig, x5_real_ap_vld_in_sig, x5_imag_ap_vld_in_sig, x6_real_ap_vld_in_sig, x6_imag_ap_vld_in_sig, x7_real_ap_vld_in_sig, x7_imag_ap_vld_in_sig, x8_real_ap_vld_in_sig, x8_imag_ap_vld_in_sig, x9_real_ap_vld_in_sig, x9_imag_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_00001 <= ((ap_const_logic_1 = ap_const_logic_1) and ((ap_const_logic_0 = W4_real_ap_vld_in_sig) or (ap_const_logic_0 = W3_imag_ap_vld_in_sig) or (ap_const_logic_0 = W3_real_ap_vld_in_sig) or (ap_const_logic_0 = W2_imag_ap_vld_in_sig) or (ap_const_logic_0 = W2_real_ap_vld_in_sig) or (ap_const_logic_0 = W1_imag_ap_vld_in_sig) or (ap_const_logic_0 = W1_real_ap_vld_in_sig) or (d_imag_ap_vld_in_sig = ap_const_logic_0) or (d_real_ap_vld_in_sig = ap_const_logic_0) or (x9_imag_ap_vld_in_sig = ap_const_logic_0) or (x9_real_ap_vld_in_sig = ap_const_logic_0) or (x8_imag_ap_vld_in_sig = ap_const_logic_0) or (x8_real_ap_vld_in_sig = ap_const_logic_0) or (x7_imag_ap_vld_in_sig = ap_const_logic_0) or (x7_real_ap_vld_in_sig = ap_const_logic_0) or (x6_imag_ap_vld_in_sig = ap_const_logic_0) or (x6_real_ap_vld_in_sig = ap_const_logic_0) or (x5_imag_ap_vld_in_sig = ap_const_logic_0) or (x5_real_ap_vld_in_sig = ap_const_logic_0) or (x4_imag_ap_vld_in_sig = ap_const_logic_0) or (x4_real_ap_vld_in_sig = ap_const_logic_0) or (x3_imag_ap_vld_in_sig = ap_const_logic_0) or (x3_real_ap_vld_in_sig = ap_const_logic_0) or (x2_imag_ap_vld_in_sig = ap_const_logic_0) or (x2_real_ap_vld_in_sig = ap_const_logic_0) or (x1_imag_ap_vld_in_sig = ap_const_logic_0) or (x1_real_ap_vld_in_sig = ap_const_logic_0) or (ap_const_logic_0 = W9_imag_ap_vld_in_sig) or (ap_const_logic_0 = W9_real_ap_vld_in_sig) or (ap_const_logic_0 = W8_imag_ap_vld_in_sig) or (ap_const_logic_0 = W8_real_ap_vld_in_sig) or (ap_const_logic_0 = W7_imag_ap_vld_in_sig) or (ap_const_logic_0 = W7_real_ap_vld_in_sig) or (ap_const_logic_0 = W6_imag_ap_vld_in_sig) or (ap_const_logic_0 = W6_real_ap_vld_in_sig) or (ap_const_logic_0 = W5_imag_ap_vld_in_sig) or (ap_const_logic_0 = W5_real_ap_vld_in_sig) or (ap_const_logic_0 = W4_imag_ap_vld_in_sig)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(d_real_ap_vld_in_sig, d_imag_ap_vld_in_sig, W1_real_ap_vld_in_sig, W1_imag_ap_vld_in_sig, W2_real_ap_vld_in_sig, W2_imag_ap_vld_in_sig, W3_real_ap_vld_in_sig, W3_imag_ap_vld_in_sig, W4_real_ap_vld_in_sig, W4_imag_ap_vld_in_sig, W5_real_ap_vld_in_sig, W5_imag_ap_vld_in_sig, W6_real_ap_vld_in_sig, W6_imag_ap_vld_in_sig, W7_real_ap_vld_in_sig, W7_imag_ap_vld_in_sig, W8_real_ap_vld_in_sig, W8_imag_ap_vld_in_sig, W9_real_ap_vld_in_sig, W9_imag_ap_vld_in_sig, x1_real_ap_vld_in_sig, x1_imag_ap_vld_in_sig, x2_real_ap_vld_in_sig, x2_imag_ap_vld_in_sig, x3_real_ap_vld_in_sig, x3_imag_ap_vld_in_sig, x4_real_ap_vld_in_sig, x4_imag_ap_vld_in_sig, x5_real_ap_vld_in_sig, x5_imag_ap_vld_in_sig, x6_real_ap_vld_in_sig, x6_imag_ap_vld_in_sig, x7_real_ap_vld_in_sig, x7_imag_ap_vld_in_sig, x8_real_ap_vld_in_sig, x8_imag_ap_vld_in_sig, x9_real_ap_vld_in_sig, x9_imag_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_logic_1 = ap_const_logic_1) and ((ap_const_logic_0 = W4_real_ap_vld_in_sig) or (ap_const_logic_0 = W3_imag_ap_vld_in_sig) or (ap_const_logic_0 = W3_real_ap_vld_in_sig) or (ap_const_logic_0 = W2_imag_ap_vld_in_sig) or (ap_const_logic_0 = W2_real_ap_vld_in_sig) or (ap_const_logic_0 = W1_imag_ap_vld_in_sig) or (ap_const_logic_0 = W1_real_ap_vld_in_sig) or (d_imag_ap_vld_in_sig = ap_const_logic_0) or (d_real_ap_vld_in_sig = ap_const_logic_0) or (x9_imag_ap_vld_in_sig = ap_const_logic_0) or (x9_real_ap_vld_in_sig = ap_const_logic_0) or (x8_imag_ap_vld_in_sig = ap_const_logic_0) or (x8_real_ap_vld_in_sig = ap_const_logic_0) or (x7_imag_ap_vld_in_sig = ap_const_logic_0) or (x7_real_ap_vld_in_sig = ap_const_logic_0) or (x6_imag_ap_vld_in_sig = ap_const_logic_0) or (x6_real_ap_vld_in_sig = ap_const_logic_0) or (x5_imag_ap_vld_in_sig = ap_const_logic_0) or (x5_real_ap_vld_in_sig = ap_const_logic_0) or (x4_imag_ap_vld_in_sig = ap_const_logic_0) or (x4_real_ap_vld_in_sig = ap_const_logic_0) or (x3_imag_ap_vld_in_sig = ap_const_logic_0) or (x3_real_ap_vld_in_sig = ap_const_logic_0) or (x2_imag_ap_vld_in_sig = ap_const_logic_0) or (x2_real_ap_vld_in_sig = ap_const_logic_0) or (x1_imag_ap_vld_in_sig = ap_const_logic_0) or (x1_real_ap_vld_in_sig = ap_const_logic_0) or (ap_const_logic_0 = W9_imag_ap_vld_in_sig) or (ap_const_logic_0 = W9_real_ap_vld_in_sig) or (ap_const_logic_0 = W8_imag_ap_vld_in_sig) or (ap_const_logic_0 = W8_real_ap_vld_in_sig) or (ap_const_logic_0 = W7_imag_ap_vld_in_sig) or (ap_const_logic_0 = W7_real_ap_vld_in_sig) or (ap_const_logic_0 = W6_imag_ap_vld_in_sig) or (ap_const_logic_0 = W6_real_ap_vld_in_sig) or (ap_const_logic_0 = W5_imag_ap_vld_in_sig) or (ap_const_logic_0 = W5_real_ap_vld_in_sig) or (ap_const_logic_0 = W4_imag_ap_vld_in_sig)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(d_real_ap_vld_in_sig, d_imag_ap_vld_in_sig, W1_real_ap_vld_in_sig, W1_imag_ap_vld_in_sig, W2_real_ap_vld_in_sig, W2_imag_ap_vld_in_sig, W3_real_ap_vld_in_sig, W3_imag_ap_vld_in_sig, W4_real_ap_vld_in_sig, W4_imag_ap_vld_in_sig, W5_real_ap_vld_in_sig, W5_imag_ap_vld_in_sig, W6_real_ap_vld_in_sig, W6_imag_ap_vld_in_sig, W7_real_ap_vld_in_sig, W7_imag_ap_vld_in_sig, W8_real_ap_vld_in_sig, W8_imag_ap_vld_in_sig, W9_real_ap_vld_in_sig, W9_imag_ap_vld_in_sig, x1_real_ap_vld_in_sig, x1_imag_ap_vld_in_sig, x2_real_ap_vld_in_sig, x2_imag_ap_vld_in_sig, x3_real_ap_vld_in_sig, x3_imag_ap_vld_in_sig, x4_real_ap_vld_in_sig, x4_imag_ap_vld_in_sig, x5_real_ap_vld_in_sig, x5_imag_ap_vld_in_sig, x6_real_ap_vld_in_sig, x6_imag_ap_vld_in_sig, x7_real_ap_vld_in_sig, x7_imag_ap_vld_in_sig, x8_real_ap_vld_in_sig, x8_imag_ap_vld_in_sig, x9_real_ap_vld_in_sig, x9_imag_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_1 = ap_const_logic_1) and ((ap_const_logic_0 = W4_real_ap_vld_in_sig) or (ap_const_logic_0 = W3_imag_ap_vld_in_sig) or (ap_const_logic_0 = W3_real_ap_vld_in_sig) or (ap_const_logic_0 = W2_imag_ap_vld_in_sig) or (ap_const_logic_0 = W2_real_ap_vld_in_sig) or (ap_const_logic_0 = W1_imag_ap_vld_in_sig) or (ap_const_logic_0 = W1_real_ap_vld_in_sig) or (d_imag_ap_vld_in_sig = ap_const_logic_0) or (d_real_ap_vld_in_sig = ap_const_logic_0) or (x9_imag_ap_vld_in_sig = ap_const_logic_0) or (x9_real_ap_vld_in_sig = ap_const_logic_0) or (x8_imag_ap_vld_in_sig = ap_const_logic_0) or (x8_real_ap_vld_in_sig = ap_const_logic_0) or (x7_imag_ap_vld_in_sig = ap_const_logic_0) or (x7_real_ap_vld_in_sig = ap_const_logic_0) or (x6_imag_ap_vld_in_sig = ap_const_logic_0) or (x6_real_ap_vld_in_sig = ap_const_logic_0) or (x5_imag_ap_vld_in_sig = ap_const_logic_0) or (x5_real_ap_vld_in_sig = ap_const_logic_0) or (x4_imag_ap_vld_in_sig = ap_const_logic_0) or (x4_real_ap_vld_in_sig = ap_const_logic_0) or (x3_imag_ap_vld_in_sig = ap_const_logic_0) or (x3_real_ap_vld_in_sig = ap_const_logic_0) or (x2_imag_ap_vld_in_sig = ap_const_logic_0) or (x2_real_ap_vld_in_sig = ap_const_logic_0) or (x1_imag_ap_vld_in_sig = ap_const_logic_0) or (x1_real_ap_vld_in_sig = ap_const_logic_0) or (ap_const_logic_0 = W9_imag_ap_vld_in_sig) or (ap_const_logic_0 = W9_real_ap_vld_in_sig) or (ap_const_logic_0 = W8_imag_ap_vld_in_sig) or (ap_const_logic_0 = W8_real_ap_vld_in_sig) or (ap_const_logic_0 = W7_imag_ap_vld_in_sig) or (ap_const_logic_0 = W7_real_ap_vld_in_sig) or (ap_const_logic_0 = W6_imag_ap_vld_in_sig) or (ap_const_logic_0 = W6_real_ap_vld_in_sig) or (ap_const_logic_0 = W5_imag_ap_vld_in_sig) or (ap_const_logic_0 = W5_real_ap_vld_in_sig) or (ap_const_logic_0 = W4_imag_ap_vld_in_sig)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state100_pp0_stage3_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state101_pp0_stage4_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state102_pp0_stage5_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state103_pp0_stage6_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state104_pp0_stage7_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state105_pp0_stage8_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state106_pp0_stage9_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state107_pp0_stage10_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state108_pp0_stage11_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state109_pp0_stage12_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state110_pp0_stage13_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state111_pp0_stage14_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state112_pp0_stage15_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state113_pp0_stage16_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state114_pp0_stage17_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state115_pp0_stage18_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state116_pp0_stage19_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state117_pp0_stage20_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state118_pp0_stage21_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state119_pp0_stage22_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state120_pp0_stage23_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state121_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state122_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state123_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state124_pp0_stage3_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state125_pp0_stage4_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state126_pp0_stage5_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state127_pp0_stage6_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state128_pp0_stage7_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state129_pp0_stage8_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state130_pp0_stage9_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state131_pp0_stage10_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state132_pp0_stage11_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state133_pp0_stage12_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state134_pp0_stage13_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state135_pp0_stage14_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state136_pp0_stage15_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state137_pp0_stage16_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state138_pp0_stage17_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state139_pp0_stage18_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state140_pp0_stage19_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state141_pp0_stage20_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state142_pp0_stage21_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state143_pp0_stage22_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state144_pp0_stage23_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state145_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state146_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state147_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state148_pp0_stage3_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state149_pp0_stage4_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state150_pp0_stage5_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state151_pp0_stage6_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state152_pp0_stage7_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state153_pp0_stage8_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state154_pp0_stage9_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state155_pp0_stage10_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state156_pp0_stage11_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state157_pp0_stage12_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state158_pp0_stage13_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state159_pp0_stage14_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state160_pp0_stage15_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state161_pp0_stage16_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state162_pp0_stage17_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage15_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage16_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage17_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage18_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(d_real_ap_vld_in_sig, d_imag_ap_vld_in_sig, W1_real_ap_vld_in_sig, W1_imag_ap_vld_in_sig, W2_real_ap_vld_in_sig, W2_imag_ap_vld_in_sig, W3_real_ap_vld_in_sig, W3_imag_ap_vld_in_sig, W4_real_ap_vld_in_sig, W4_imag_ap_vld_in_sig, W5_real_ap_vld_in_sig, W5_imag_ap_vld_in_sig, W6_real_ap_vld_in_sig, W6_imag_ap_vld_in_sig, W7_real_ap_vld_in_sig, W7_imag_ap_vld_in_sig, W8_real_ap_vld_in_sig, W8_imag_ap_vld_in_sig, W9_real_ap_vld_in_sig, W9_imag_ap_vld_in_sig, x1_real_ap_vld_in_sig, x1_imag_ap_vld_in_sig, x2_real_ap_vld_in_sig, x2_imag_ap_vld_in_sig, x3_real_ap_vld_in_sig, x3_imag_ap_vld_in_sig, x4_real_ap_vld_in_sig, x4_imag_ap_vld_in_sig, x5_real_ap_vld_in_sig, x5_imag_ap_vld_in_sig, x6_real_ap_vld_in_sig, x6_imag_ap_vld_in_sig, x7_real_ap_vld_in_sig, x7_imag_ap_vld_in_sig, x8_real_ap_vld_in_sig, x8_imag_ap_vld_in_sig, x9_real_ap_vld_in_sig, x9_imag_ap_vld_in_sig)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_const_logic_0 = W4_real_ap_vld_in_sig) or (ap_const_logic_0 = W3_imag_ap_vld_in_sig) or (ap_const_logic_0 = W3_real_ap_vld_in_sig) or (ap_const_logic_0 = W2_imag_ap_vld_in_sig) or (ap_const_logic_0 = W2_real_ap_vld_in_sig) or (ap_const_logic_0 = W1_imag_ap_vld_in_sig) or (ap_const_logic_0 = W1_real_ap_vld_in_sig) or (d_imag_ap_vld_in_sig = ap_const_logic_0) or (d_real_ap_vld_in_sig = ap_const_logic_0) or (x9_imag_ap_vld_in_sig = ap_const_logic_0) or (x9_real_ap_vld_in_sig = ap_const_logic_0) or (x8_imag_ap_vld_in_sig = ap_const_logic_0) or (x8_real_ap_vld_in_sig = ap_const_logic_0) or (x7_imag_ap_vld_in_sig = ap_const_logic_0) or (x7_real_ap_vld_in_sig = ap_const_logic_0) or (x6_imag_ap_vld_in_sig = ap_const_logic_0) or (x6_real_ap_vld_in_sig = ap_const_logic_0) or (x5_imag_ap_vld_in_sig = ap_const_logic_0) or (x5_real_ap_vld_in_sig = ap_const_logic_0) or (x4_imag_ap_vld_in_sig = ap_const_logic_0) or (x4_real_ap_vld_in_sig = ap_const_logic_0) or (x3_imag_ap_vld_in_sig = ap_const_logic_0) or (x3_real_ap_vld_in_sig = ap_const_logic_0) or (x2_imag_ap_vld_in_sig = ap_const_logic_0) or (x2_real_ap_vld_in_sig = ap_const_logic_0) or (x1_imag_ap_vld_in_sig = ap_const_logic_0) or (x1_real_ap_vld_in_sig = ap_const_logic_0) or (ap_const_logic_0 = W9_imag_ap_vld_in_sig) or (ap_const_logic_0 = W9_real_ap_vld_in_sig) or (ap_const_logic_0 = W8_imag_ap_vld_in_sig) or (ap_const_logic_0 = W8_real_ap_vld_in_sig) or (ap_const_logic_0 = W7_imag_ap_vld_in_sig) or (ap_const_logic_0 = W7_real_ap_vld_in_sig) or (ap_const_logic_0 = W6_imag_ap_vld_in_sig) or (ap_const_logic_0 = W6_real_ap_vld_in_sig) or (ap_const_logic_0 = W5_imag_ap_vld_in_sig) or (ap_const_logic_0 = W5_real_ap_vld_in_sig) or (ap_const_logic_0 = W4_imag_ap_vld_in_sig));
    end process;

        ap_block_state20_pp0_stage19_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage20_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage21_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage22_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage23_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage6_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage7_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage8_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage9_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage10_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage11_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage12_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage13_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage14_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage15_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage16_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage17_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage18_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage19_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage20_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage21_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage22_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage23_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage5_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage6_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage7_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage8_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage9_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage10_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage11_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp0_stage12_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp0_stage13_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp0_stage14_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp0_stage15_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp0_stage16_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp0_stage17_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp0_stage18_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp0_stage19_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp0_stage20_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp0_stage21_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp0_stage22_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp0_stage23_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp0_stage4_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp0_stage5_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp0_stage6_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state80_pp0_stage7_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state81_pp0_stage8_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state82_pp0_stage9_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state83_pp0_stage10_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state84_pp0_stage11_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state85_pp0_stage12_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state86_pp0_stage13_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state87_pp0_stage14_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state88_pp0_stage15_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state89_pp0_stage16_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state90_pp0_stage17_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state91_pp0_stage18_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state92_pp0_stage19_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state93_pp0_stage20_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state94_pp0_stage21_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state95_pp0_stage22_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state96_pp0_stage23_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state97_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state98_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state99_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;

    d_imag_ap_vld_in_sig_assign_proc : process(d_imag_ap_vld, d_imag_ap_vld_preg)
    begin
        if ((d_imag_ap_vld = ap_const_logic_1)) then 
            d_imag_ap_vld_in_sig <= d_imag_ap_vld;
        else 
            d_imag_ap_vld_in_sig <= d_imag_ap_vld_preg;
        end if; 
    end process;


    d_imag_blk_n_assign_proc : process(d_imag_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            d_imag_blk_n <= d_imag_ap_vld;
        else 
            d_imag_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    d_imag_in_sig_assign_proc : process(d_imag, d_imag_preg, d_imag_ap_vld)
    begin
        if ((d_imag_ap_vld = ap_const_logic_1)) then 
            d_imag_in_sig <= d_imag;
        else 
            d_imag_in_sig <= d_imag_preg;
        end if; 
    end process;


    d_real_ap_vld_in_sig_assign_proc : process(d_real_ap_vld, d_real_ap_vld_preg)
    begin
        if ((d_real_ap_vld = ap_const_logic_1)) then 
            d_real_ap_vld_in_sig <= d_real_ap_vld;
        else 
            d_real_ap_vld_in_sig <= d_real_ap_vld_preg;
        end if; 
    end process;


    d_real_blk_n_assign_proc : process(d_real_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            d_real_blk_n <= d_real_ap_vld;
        else 
            d_real_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    d_real_in_sig_assign_proc : process(d_real, d_real_preg, d_real_ap_vld)
    begin
        if ((d_real_ap_vld = ap_const_logic_1)) then 
            d_real_in_sig <= d_real;
        else 
            d_real_in_sig <= d_real_preg;
        end if; 
    end process;

    err_imag <= grp_fu_355_p2;

    err_imag_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage17, ap_block_pp0_stage17_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17_11001))) then 
            err_imag_ap_vld <= ap_const_logic_1;
        else 
            err_imag_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    err_real <= grp_fu_350_p2;

    err_real_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage17, ap_block_pp0_stage17_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17_11001))) then 
            err_real_ap_vld <= ap_const_logic_1;
        else 
            err_real_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_350_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001, ap_CS_fsm_pp0_stage19, ap_block_pp0_stage19_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage20, ap_block_pp0_stage20_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13_11001, ap_CS_fsm_pp0_stage21, ap_block_pp0_stage21_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14_11001, ap_CS_fsm_pp0_stage22, ap_block_pp0_stage22_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15_11001, ap_CS_fsm_pp0_stage23, ap_block_pp0_stage23_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage16, ap_block_pp0_stage16_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage17, ap_block_pp0_stage17_11001, ap_CS_fsm_pp0_stage18, ap_block_pp0_stage18_11001, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage16_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23)) or ((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage22_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22)) or ((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage21_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21)) or ((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage20_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage19_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_const_boolean_0 = ap_block_pp0_stage18_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17_11001)))) then 
            grp_fu_350_ce <= ap_const_logic_1;
        else 
            grp_fu_350_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_350_opcode_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage20, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage21, ap_CS_fsm_pp0_stage5, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage22, ap_CS_fsm_pp0_stage6, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage23, ap_CS_fsm_pp0_stage7, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage16, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage17, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage4_00001, ap_block_pp0_stage20_00001, ap_block_pp0_stage13_00001, ap_block_pp0_stage6_00001, ap_block_pp0_stage22_00001, ap_block_pp0_stage15_00001, ap_block_pp0_stage8_00001, ap_block_pp0_stage0_00001, ap_block_pp0_stage17_00001, ap_block_pp0_stage12_00001, ap_block_pp0_stage5_00001, ap_block_pp0_stage21_00001, ap_block_pp0_stage14_00001, ap_block_pp0_stage7_00001, ap_block_pp0_stage23_00001, ap_block_pp0_stage16_00001, ap_block_pp0_stage9_00001, ap_block_pp0_stage1_00001, ap_block_pp0_stage10_00001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_00001)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_00001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9_00001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage16_00001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_00001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage23_00001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage14_00001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_00001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage21) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage21_00001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12_00001)))) then 
            grp_fu_350_opcode <= ap_const_lv2_1;
        elsif ((((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17_00001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_00001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15_00001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_00001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage22_00001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage13_00001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_00001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage20_00001)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_00001)))) then 
            grp_fu_350_opcode <= ap_const_lv2_0;
        else 
            grp_fu_350_opcode <= "XX";
        end if; 
    end process;


    grp_fu_350_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, reg_374, reg_384, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage12, reg_394, ap_CS_fsm_pp0_stage20, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter2, reg_404, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage21, reg_414, ap_CS_fsm_pp0_stage5, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage14, reg_424, ap_CS_fsm_pp0_stage22, ap_CS_fsm_pp0_stage6, ap_enable_reg_pp0_iter4, reg_434, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage23, reg_444, ap_CS_fsm_pp0_stage7, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage16, reg_454, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage8, d_real_read_reg_687_pp0_iter6_reg, tmp_2_reg_692, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage17, ap_block_pp0_stage4, ap_block_pp0_stage12, ap_block_pp0_stage20, ap_block_pp0_stage5, ap_block_pp0_stage13, ap_block_pp0_stage21, ap_block_pp0_stage6, ap_block_pp0_stage14, ap_block_pp0_stage22, ap_block_pp0_stage7, ap_block_pp0_stage15, ap_block_pp0_stage23, ap_block_pp0_stage8, ap_block_pp0_stage16, ap_block_pp0_stage9, ap_block_pp0_stage17, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10))) then 
            grp_fu_350_p0 <= d_real_read_reg_687_pp0_iter6_reg;
        elsif (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_350_p0 <= reg_454;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17)))) then 
            grp_fu_350_p0 <= reg_444;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage16)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_350_p0 <= reg_434;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage23)))) then 
            grp_fu_350_p0 <= reg_424;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15)))) then 
            grp_fu_350_p0 <= reg_414;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage22)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage14)))) then 
            grp_fu_350_p0 <= reg_404;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage21) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage21)))) then 
            grp_fu_350_p0 <= reg_394;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage13)))) then 
            grp_fu_350_p0 <= reg_384;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage20)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12)))) then 
            grp_fu_350_p0 <= reg_374;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            grp_fu_350_p0 <= tmp_2_reg_692;
        else 
            grp_fu_350_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_350_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage20, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage21, ap_CS_fsm_pp0_stage5, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage22, ap_CS_fsm_pp0_stage6, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage23, ap_CS_fsm_pp0_stage7, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage16, reg_454, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage8, tmp_4_reg_702, tmp_2_1_reg_712, tmp_4_1_reg_722, tmp_2_2_reg_732_pp0_iter1_reg, tmp_4_2_reg_742_pp0_iter1_reg, ap_CS_fsm_pp0_stage9, tmp_2_3_reg_752_pp0_iter1_reg, ap_CS_fsm_pp0_stage10, tmp_4_3_reg_762_pp0_iter2_reg, tmp_2_4_reg_772_pp0_iter2_reg, tmp_4_4_reg_782_pp0_iter2_reg, tmp_2_5_reg_792_pp0_iter3_reg, tmp_4_5_reg_802_pp0_iter3_reg, tmp_2_6_reg_812_pp0_iter3_reg, tmp_4_6_reg_822_pp0_iter3_reg, ap_CS_fsm_pp0_stage17, tmp_2_7_reg_832_pp0_iter4_reg, tmp_4_7_reg_842_pp0_iter4_reg, tmp_2_8_reg_852_pp0_iter4_reg, tmp_4_8_reg_862_pp0_iter5_reg, ap_block_pp0_stage4, ap_block_pp0_stage12, ap_block_pp0_stage20, ap_block_pp0_stage5, ap_block_pp0_stage13, ap_block_pp0_stage21, ap_block_pp0_stage6, ap_block_pp0_stage14, ap_block_pp0_stage22, ap_block_pp0_stage7, ap_block_pp0_stage15, ap_block_pp0_stage23, ap_block_pp0_stage8, ap_block_pp0_stage16, ap_block_pp0_stage9, ap_block_pp0_stage17, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10))) then 
            grp_fu_350_p1 <= reg_454;
        elsif (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_350_p1 <= tmp_4_8_reg_862_pp0_iter5_reg;
        elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17))) then 
            grp_fu_350_p1 <= tmp_2_8_reg_852_pp0_iter4_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9))) then 
            grp_fu_350_p1 <= tmp_4_7_reg_842_pp0_iter4_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_350_p1 <= tmp_2_7_reg_832_pp0_iter4_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage16))) then 
            grp_fu_350_p1 <= tmp_4_6_reg_822_pp0_iter3_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8))) then 
            grp_fu_350_p1 <= tmp_2_6_reg_812_pp0_iter3_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage23))) then 
            grp_fu_350_p1 <= tmp_4_5_reg_802_pp0_iter3_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15))) then 
            grp_fu_350_p1 <= tmp_2_5_reg_792_pp0_iter3_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7))) then 
            grp_fu_350_p1 <= tmp_4_4_reg_782_pp0_iter2_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage22))) then 
            grp_fu_350_p1 <= tmp_2_4_reg_772_pp0_iter2_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage14))) then 
            grp_fu_350_p1 <= tmp_4_3_reg_762_pp0_iter2_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6))) then 
            grp_fu_350_p1 <= tmp_2_3_reg_752_pp0_iter1_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage21) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage21))) then 
            grp_fu_350_p1 <= tmp_4_2_reg_742_pp0_iter1_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage13))) then 
            grp_fu_350_p1 <= tmp_2_2_reg_732_pp0_iter1_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
            grp_fu_350_p1 <= tmp_4_1_reg_722;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage20))) then 
            grp_fu_350_p1 <= tmp_2_1_reg_712;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12))) then 
            grp_fu_350_p1 <= tmp_4_reg_702;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            grp_fu_350_p1 <= ap_const_lv32_0;
        else 
            grp_fu_350_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_355_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001, ap_CS_fsm_pp0_stage19, ap_block_pp0_stage19_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage20, ap_block_pp0_stage20_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13_11001, ap_CS_fsm_pp0_stage21, ap_block_pp0_stage21_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14_11001, ap_CS_fsm_pp0_stage22, ap_block_pp0_stage22_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15_11001, ap_CS_fsm_pp0_stage23, ap_block_pp0_stage23_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage16, ap_block_pp0_stage16_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage17, ap_block_pp0_stage17_11001, ap_CS_fsm_pp0_stage18, ap_block_pp0_stage18_11001, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage16_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23)) or ((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage22_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22)) or ((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage21_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21)) or ((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage20_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage19_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_const_boolean_0 = ap_block_pp0_stage18_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17_11001)))) then 
            grp_fu_355_ce <= ap_const_logic_1;
        else 
            grp_fu_355_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_355_opcode_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage20, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage21, ap_CS_fsm_pp0_stage5, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage22, ap_CS_fsm_pp0_stage6, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage23, ap_CS_fsm_pp0_stage7, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage16, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage17, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage4_00001, ap_block_pp0_stage20_00001, ap_block_pp0_stage13_00001, ap_block_pp0_stage6_00001, ap_block_pp0_stage22_00001, ap_block_pp0_stage15_00001, ap_block_pp0_stage8_00001, ap_block_pp0_stage0_00001, ap_block_pp0_stage17_00001, ap_block_pp0_stage12_00001, ap_block_pp0_stage5_00001, ap_block_pp0_stage21_00001, ap_block_pp0_stage14_00001, ap_block_pp0_stage7_00001, ap_block_pp0_stage23_00001, ap_block_pp0_stage16_00001, ap_block_pp0_stage9_00001, ap_block_pp0_stage1_00001, ap_block_pp0_stage10_00001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_00001))) then 
            grp_fu_355_opcode <= ap_const_lv2_1;
        elsif ((((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_00001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9_00001)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17_00001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_00001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage16_00001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_00001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage23_00001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15_00001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_00001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage22_00001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage14_00001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_00001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage21) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage21_00001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage13_00001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_00001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage20_00001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12_00001)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_00001)))) then 
            grp_fu_355_opcode <= ap_const_lv2_0;
        else 
            grp_fu_355_opcode <= "XX";
        end if; 
    end process;


    grp_fu_355_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, reg_379, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage12, reg_389, ap_CS_fsm_pp0_stage20, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter2, reg_399, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage21, reg_409, ap_CS_fsm_pp0_stage5, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage14, reg_419, ap_CS_fsm_pp0_stage22, ap_CS_fsm_pp0_stage6, ap_enable_reg_pp0_iter4, reg_429, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage23, reg_439, ap_CS_fsm_pp0_stage7, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage16, reg_449, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage8, reg_460, d_imag_read_reg_682_pp0_iter6_reg, tmp_6_reg_697, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage17, ap_block_pp0_stage4, ap_block_pp0_stage12, ap_block_pp0_stage20, ap_block_pp0_stage5, ap_block_pp0_stage13, ap_block_pp0_stage21, ap_block_pp0_stage6, ap_block_pp0_stage14, ap_block_pp0_stage22, ap_block_pp0_stage7, ap_block_pp0_stage15, ap_block_pp0_stage23, ap_block_pp0_stage8, ap_block_pp0_stage16, ap_block_pp0_stage9, ap_block_pp0_stage17, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10))) then 
            grp_fu_355_p0 <= d_imag_read_reg_682_pp0_iter6_reg;
        elsif (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_355_p0 <= reg_460;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17)))) then 
            grp_fu_355_p0 <= reg_449;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage16)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_355_p0 <= reg_439;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage23)))) then 
            grp_fu_355_p0 <= reg_429;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15)))) then 
            grp_fu_355_p0 <= reg_419;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage22)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage14)))) then 
            grp_fu_355_p0 <= reg_409;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage21) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage21)))) then 
            grp_fu_355_p0 <= reg_399;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage13)))) then 
            grp_fu_355_p0 <= reg_389;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage20)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12)))) then 
            grp_fu_355_p0 <= reg_379;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            grp_fu_355_p0 <= tmp_6_reg_697;
        else 
            grp_fu_355_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_355_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage20, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage21, ap_CS_fsm_pp0_stage5, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage22, ap_CS_fsm_pp0_stage6, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage23, ap_CS_fsm_pp0_stage7, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage16, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage8, reg_460, tmp_8_reg_707, tmp_6_1_reg_717, tmp_8_1_reg_727, tmp_6_2_reg_737_pp0_iter1_reg, tmp_8_2_reg_747_pp0_iter1_reg, ap_CS_fsm_pp0_stage9, tmp_6_3_reg_757_pp0_iter1_reg, ap_CS_fsm_pp0_stage10, tmp_8_3_reg_767_pp0_iter2_reg, tmp_6_4_reg_777_pp0_iter2_reg, tmp_8_4_reg_787_pp0_iter2_reg, tmp_6_5_reg_797_pp0_iter3_reg, tmp_8_5_reg_807_pp0_iter3_reg, tmp_6_6_reg_817_pp0_iter3_reg, tmp_8_6_reg_827_pp0_iter3_reg, ap_CS_fsm_pp0_stage17, tmp_6_7_reg_837_pp0_iter4_reg, tmp_8_7_reg_847_pp0_iter4_reg, tmp_6_8_reg_857_pp0_iter4_reg, tmp_8_8_reg_867_pp0_iter5_reg, ap_block_pp0_stage4, ap_block_pp0_stage12, ap_block_pp0_stage20, ap_block_pp0_stage5, ap_block_pp0_stage13, ap_block_pp0_stage21, ap_block_pp0_stage6, ap_block_pp0_stage14, ap_block_pp0_stage22, ap_block_pp0_stage7, ap_block_pp0_stage15, ap_block_pp0_stage23, ap_block_pp0_stage8, ap_block_pp0_stage16, ap_block_pp0_stage9, ap_block_pp0_stage17, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10))) then 
            grp_fu_355_p1 <= reg_460;
        elsif (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_355_p1 <= tmp_8_8_reg_867_pp0_iter5_reg;
        elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17))) then 
            grp_fu_355_p1 <= tmp_6_8_reg_857_pp0_iter4_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9))) then 
            grp_fu_355_p1 <= tmp_8_7_reg_847_pp0_iter4_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_355_p1 <= tmp_6_7_reg_837_pp0_iter4_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage16))) then 
            grp_fu_355_p1 <= tmp_8_6_reg_827_pp0_iter3_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8))) then 
            grp_fu_355_p1 <= tmp_6_6_reg_817_pp0_iter3_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage23))) then 
            grp_fu_355_p1 <= tmp_8_5_reg_807_pp0_iter3_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15))) then 
            grp_fu_355_p1 <= tmp_6_5_reg_797_pp0_iter3_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7))) then 
            grp_fu_355_p1 <= tmp_8_4_reg_787_pp0_iter2_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage22))) then 
            grp_fu_355_p1 <= tmp_6_4_reg_777_pp0_iter2_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage14))) then 
            grp_fu_355_p1 <= tmp_8_3_reg_767_pp0_iter2_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6))) then 
            grp_fu_355_p1 <= tmp_6_3_reg_757_pp0_iter1_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage21) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage21))) then 
            grp_fu_355_p1 <= tmp_8_2_reg_747_pp0_iter1_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage13))) then 
            grp_fu_355_p1 <= tmp_6_2_reg_737_pp0_iter1_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
            grp_fu_355_p1 <= tmp_8_1_reg_727;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage20))) then 
            grp_fu_355_p1 <= tmp_6_1_reg_717;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12))) then 
            grp_fu_355_p1 <= tmp_8_reg_707;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            grp_fu_355_p1 <= ap_const_lv32_0;
        else 
            grp_fu_355_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_362_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001, ap_CS_fsm_pp0_stage19, ap_block_pp0_stage19_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage20, ap_block_pp0_stage20_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage16, ap_block_pp0_stage16_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage17, ap_block_pp0_stage17_11001, ap_CS_fsm_pp0_stage18, ap_block_pp0_stage18_11001, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage16_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage20_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage19_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_const_boolean_0 = ap_block_pp0_stage18_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17_11001)))) then 
            grp_fu_362_ce <= ap_const_logic_1;
        else 
            grp_fu_362_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_362_p0_assign_proc : process(x1_real_in_sig, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage16, ap_CS_fsm_pp0_stage8, x9_imag_read_reg_466, x9_real_read_reg_472, x8_imag_read_reg_478, x8_real_read_reg_484, x7_imag_read_reg_490, x7_real_read_reg_496, x6_imag_read_reg_502, x6_real_read_reg_508, x5_imag_read_reg_514, x5_real_read_reg_520, x4_imag_read_reg_526, x4_real_read_reg_532, x3_imag_read_reg_538, x3_real_read_reg_544, x2_imag_read_reg_550, x2_real_read_reg_556, x1_imag_read_reg_562, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage17, ap_block_pp0_stage4, ap_block_pp0_stage12, ap_block_pp0_stage5, ap_block_pp0_stage13, ap_block_pp0_stage6, ap_block_pp0_stage14, ap_block_pp0_stage7, ap_block_pp0_stage15, ap_block_pp0_stage8, ap_block_pp0_stage16, ap_block_pp0_stage9, ap_block_pp0_stage17, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage11)
    begin
        if ((ap_const_logic_1 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17))) then 
                grp_fu_362_p0 <= x9_imag_read_reg_466;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16))) then 
                grp_fu_362_p0 <= x9_real_read_reg_472;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15))) then 
                grp_fu_362_p0 <= x8_imag_read_reg_478;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14))) then 
                grp_fu_362_p0 <= x8_real_read_reg_484;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13))) then 
                grp_fu_362_p0 <= x7_imag_read_reg_490;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12))) then 
                grp_fu_362_p0 <= x7_real_read_reg_496;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11))) then 
                grp_fu_362_p0 <= x6_imag_read_reg_502;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10))) then 
                grp_fu_362_p0 <= x6_real_read_reg_508;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9))) then 
                grp_fu_362_p0 <= x5_imag_read_reg_514;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8))) then 
                grp_fu_362_p0 <= x5_real_read_reg_520;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7))) then 
                grp_fu_362_p0 <= x4_imag_read_reg_526;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6))) then 
                grp_fu_362_p0 <= x4_real_read_reg_532;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
                grp_fu_362_p0 <= x3_imag_read_reg_538;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
                grp_fu_362_p0 <= x3_real_read_reg_544;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                grp_fu_362_p0 <= x2_imag_read_reg_550;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                grp_fu_362_p0 <= x2_real_read_reg_556;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                grp_fu_362_p0 <= x1_imag_read_reg_562;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_362_p0 <= x1_real_in_sig;
            else 
                grp_fu_362_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_362_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_362_p1_assign_proc : process(W1_real_in_sig, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage16, ap_CS_fsm_pp0_stage8, W9_imag_read_reg_574, W9_real_read_reg_580, W8_imag_read_reg_586, W8_real_read_reg_592, W7_imag_read_reg_598, W7_real_read_reg_604, W6_imag_read_reg_610, W6_real_read_reg_616, W5_imag_read_reg_622, W5_real_read_reg_628, W4_imag_read_reg_634, W4_real_read_reg_640, W3_imag_read_reg_646, W3_real_read_reg_652, W2_imag_read_reg_658, W2_real_read_reg_664, W1_imag_read_reg_670, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage17, ap_block_pp0_stage4, ap_block_pp0_stage12, ap_block_pp0_stage5, ap_block_pp0_stage13, ap_block_pp0_stage6, ap_block_pp0_stage14, ap_block_pp0_stage7, ap_block_pp0_stage15, ap_block_pp0_stage8, ap_block_pp0_stage16, ap_block_pp0_stage9, ap_block_pp0_stage17, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage11)
    begin
        if ((ap_const_logic_1 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17))) then 
                grp_fu_362_p1 <= W9_imag_read_reg_574;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16))) then 
                grp_fu_362_p1 <= W9_real_read_reg_580;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15))) then 
                grp_fu_362_p1 <= W8_imag_read_reg_586;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14))) then 
                grp_fu_362_p1 <= W8_real_read_reg_592;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13))) then 
                grp_fu_362_p1 <= W7_imag_read_reg_598;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12))) then 
                grp_fu_362_p1 <= W7_real_read_reg_604;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11))) then 
                grp_fu_362_p1 <= W6_imag_read_reg_610;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10))) then 
                grp_fu_362_p1 <= W6_real_read_reg_616;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9))) then 
                grp_fu_362_p1 <= W5_imag_read_reg_622;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8))) then 
                grp_fu_362_p1 <= W5_real_read_reg_628;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7))) then 
                grp_fu_362_p1 <= W4_imag_read_reg_634;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6))) then 
                grp_fu_362_p1 <= W4_real_read_reg_640;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
                grp_fu_362_p1 <= W3_imag_read_reg_646;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
                grp_fu_362_p1 <= W3_real_read_reg_652;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                grp_fu_362_p1 <= W2_imag_read_reg_658;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                grp_fu_362_p1 <= W2_real_read_reg_664;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                grp_fu_362_p1 <= W1_imag_read_reg_670;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_362_p1 <= W1_real_in_sig;
            else 
                grp_fu_362_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_362_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_368_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001, ap_CS_fsm_pp0_stage19, ap_block_pp0_stage19_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage20, ap_block_pp0_stage20_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage16, ap_block_pp0_stage16_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage17, ap_block_pp0_stage17_11001, ap_CS_fsm_pp0_stage18, ap_block_pp0_stage18_11001, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage16_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage20_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage19_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_const_boolean_0 = ap_block_pp0_stage18_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17_11001)))) then 
            grp_fu_368_ce <= ap_const_logic_1;
        else 
            grp_fu_368_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_368_p0_assign_proc : process(x1_real_in_sig, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage16, ap_CS_fsm_pp0_stage8, x9_imag_read_reg_466, x9_real_read_reg_472, x8_imag_read_reg_478, x8_real_read_reg_484, x7_imag_read_reg_490, x7_real_read_reg_496, x6_imag_read_reg_502, x6_real_read_reg_508, x5_imag_read_reg_514, x5_real_read_reg_520, x4_imag_read_reg_526, x4_real_read_reg_532, x3_imag_read_reg_538, x3_real_read_reg_544, x2_imag_read_reg_550, x2_real_read_reg_556, x1_imag_read_reg_562, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage17, ap_block_pp0_stage4, ap_block_pp0_stage12, ap_block_pp0_stage5, ap_block_pp0_stage13, ap_block_pp0_stage6, ap_block_pp0_stage14, ap_block_pp0_stage7, ap_block_pp0_stage15, ap_block_pp0_stage8, ap_block_pp0_stage16, ap_block_pp0_stage9, ap_block_pp0_stage17, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage11)
    begin
        if ((ap_const_logic_1 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17))) then 
                grp_fu_368_p0 <= x9_imag_read_reg_466;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16))) then 
                grp_fu_368_p0 <= x9_real_read_reg_472;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15))) then 
                grp_fu_368_p0 <= x8_imag_read_reg_478;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14))) then 
                grp_fu_368_p0 <= x8_real_read_reg_484;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13))) then 
                grp_fu_368_p0 <= x7_imag_read_reg_490;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12))) then 
                grp_fu_368_p0 <= x7_real_read_reg_496;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11))) then 
                grp_fu_368_p0 <= x6_imag_read_reg_502;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10))) then 
                grp_fu_368_p0 <= x6_real_read_reg_508;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9))) then 
                grp_fu_368_p0 <= x5_imag_read_reg_514;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8))) then 
                grp_fu_368_p0 <= x5_real_read_reg_520;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7))) then 
                grp_fu_368_p0 <= x4_imag_read_reg_526;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6))) then 
                grp_fu_368_p0 <= x4_real_read_reg_532;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
                grp_fu_368_p0 <= x3_imag_read_reg_538;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
                grp_fu_368_p0 <= x3_real_read_reg_544;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                grp_fu_368_p0 <= x2_imag_read_reg_550;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                grp_fu_368_p0 <= x2_real_read_reg_556;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                grp_fu_368_p0 <= x1_imag_read_reg_562;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_368_p0 <= x1_real_in_sig;
            else 
                grp_fu_368_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_368_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_368_p1_assign_proc : process(W1_imag_in_sig, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage16, ap_CS_fsm_pp0_stage8, W9_imag_read_reg_574, W9_real_read_reg_580, W8_imag_read_reg_586, W8_real_read_reg_592, W7_imag_read_reg_598, W7_real_read_reg_604, W6_imag_read_reg_610, W6_real_read_reg_616, W5_imag_read_reg_622, W5_real_read_reg_628, W4_imag_read_reg_634, W4_real_read_reg_640, W3_imag_read_reg_646, W3_real_read_reg_652, W2_imag_read_reg_658, W2_real_read_reg_664, W1_real_read_reg_676, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage17, ap_block_pp0_stage4, ap_block_pp0_stage12, ap_block_pp0_stage5, ap_block_pp0_stage13, ap_block_pp0_stage6, ap_block_pp0_stage14, ap_block_pp0_stage7, ap_block_pp0_stage15, ap_block_pp0_stage8, ap_block_pp0_stage16, ap_block_pp0_stage9, ap_block_pp0_stage17, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage11)
    begin
        if ((ap_const_logic_1 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17))) then 
                grp_fu_368_p1 <= W9_real_read_reg_580;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16))) then 
                grp_fu_368_p1 <= W9_imag_read_reg_574;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15))) then 
                grp_fu_368_p1 <= W8_real_read_reg_592;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14))) then 
                grp_fu_368_p1 <= W8_imag_read_reg_586;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13))) then 
                grp_fu_368_p1 <= W7_real_read_reg_604;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12))) then 
                grp_fu_368_p1 <= W7_imag_read_reg_598;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11))) then 
                grp_fu_368_p1 <= W6_real_read_reg_616;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10))) then 
                grp_fu_368_p1 <= W6_imag_read_reg_610;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9))) then 
                grp_fu_368_p1 <= W5_real_read_reg_628;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8))) then 
                grp_fu_368_p1 <= W5_imag_read_reg_622;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7))) then 
                grp_fu_368_p1 <= W4_real_read_reg_640;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6))) then 
                grp_fu_368_p1 <= W4_imag_read_reg_634;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
                grp_fu_368_p1 <= W3_real_read_reg_652;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
                grp_fu_368_p1 <= W3_imag_read_reg_646;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                grp_fu_368_p1 <= W2_real_read_reg_664;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                grp_fu_368_p1 <= W2_imag_read_reg_658;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                grp_fu_368_p1 <= W1_real_read_reg_676;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_368_p1 <= W1_imag_in_sig;
            else 
                grp_fu_368_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_368_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x1_imag_ap_vld_in_sig_assign_proc : process(x1_imag_ap_vld, x1_imag_ap_vld_preg)
    begin
        if ((x1_imag_ap_vld = ap_const_logic_1)) then 
            x1_imag_ap_vld_in_sig <= x1_imag_ap_vld;
        else 
            x1_imag_ap_vld_in_sig <= x1_imag_ap_vld_preg;
        end if; 
    end process;


    x1_imag_blk_n_assign_proc : process(x1_imag_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x1_imag_blk_n <= x1_imag_ap_vld;
        else 
            x1_imag_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x1_imag_in_sig_assign_proc : process(x1_imag, x1_imag_preg, x1_imag_ap_vld)
    begin
        if ((x1_imag_ap_vld = ap_const_logic_1)) then 
            x1_imag_in_sig <= x1_imag;
        else 
            x1_imag_in_sig <= x1_imag_preg;
        end if; 
    end process;


    x1_real_ap_vld_in_sig_assign_proc : process(x1_real_ap_vld, x1_real_ap_vld_preg)
    begin
        if ((x1_real_ap_vld = ap_const_logic_1)) then 
            x1_real_ap_vld_in_sig <= x1_real_ap_vld;
        else 
            x1_real_ap_vld_in_sig <= x1_real_ap_vld_preg;
        end if; 
    end process;


    x1_real_blk_n_assign_proc : process(x1_real_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x1_real_blk_n <= x1_real_ap_vld;
        else 
            x1_real_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x1_real_in_sig_assign_proc : process(x1_real, x1_real_preg, x1_real_ap_vld)
    begin
        if ((x1_real_ap_vld = ap_const_logic_1)) then 
            x1_real_in_sig <= x1_real;
        else 
            x1_real_in_sig <= x1_real_preg;
        end if; 
    end process;


    x2_imag_ap_vld_in_sig_assign_proc : process(x2_imag_ap_vld, x2_imag_ap_vld_preg)
    begin
        if ((x2_imag_ap_vld = ap_const_logic_1)) then 
            x2_imag_ap_vld_in_sig <= x2_imag_ap_vld;
        else 
            x2_imag_ap_vld_in_sig <= x2_imag_ap_vld_preg;
        end if; 
    end process;


    x2_imag_blk_n_assign_proc : process(x2_imag_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x2_imag_blk_n <= x2_imag_ap_vld;
        else 
            x2_imag_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x2_imag_in_sig_assign_proc : process(x2_imag, x2_imag_preg, x2_imag_ap_vld)
    begin
        if ((x2_imag_ap_vld = ap_const_logic_1)) then 
            x2_imag_in_sig <= x2_imag;
        else 
            x2_imag_in_sig <= x2_imag_preg;
        end if; 
    end process;


    x2_real_ap_vld_in_sig_assign_proc : process(x2_real_ap_vld, x2_real_ap_vld_preg)
    begin
        if ((x2_real_ap_vld = ap_const_logic_1)) then 
            x2_real_ap_vld_in_sig <= x2_real_ap_vld;
        else 
            x2_real_ap_vld_in_sig <= x2_real_ap_vld_preg;
        end if; 
    end process;


    x2_real_blk_n_assign_proc : process(x2_real_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x2_real_blk_n <= x2_real_ap_vld;
        else 
            x2_real_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x2_real_in_sig_assign_proc : process(x2_real, x2_real_preg, x2_real_ap_vld)
    begin
        if ((x2_real_ap_vld = ap_const_logic_1)) then 
            x2_real_in_sig <= x2_real;
        else 
            x2_real_in_sig <= x2_real_preg;
        end if; 
    end process;


    x3_imag_ap_vld_in_sig_assign_proc : process(x3_imag_ap_vld, x3_imag_ap_vld_preg)
    begin
        if ((x3_imag_ap_vld = ap_const_logic_1)) then 
            x3_imag_ap_vld_in_sig <= x3_imag_ap_vld;
        else 
            x3_imag_ap_vld_in_sig <= x3_imag_ap_vld_preg;
        end if; 
    end process;


    x3_imag_blk_n_assign_proc : process(x3_imag_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x3_imag_blk_n <= x3_imag_ap_vld;
        else 
            x3_imag_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x3_imag_in_sig_assign_proc : process(x3_imag, x3_imag_preg, x3_imag_ap_vld)
    begin
        if ((x3_imag_ap_vld = ap_const_logic_1)) then 
            x3_imag_in_sig <= x3_imag;
        else 
            x3_imag_in_sig <= x3_imag_preg;
        end if; 
    end process;


    x3_real_ap_vld_in_sig_assign_proc : process(x3_real_ap_vld, x3_real_ap_vld_preg)
    begin
        if ((x3_real_ap_vld = ap_const_logic_1)) then 
            x3_real_ap_vld_in_sig <= x3_real_ap_vld;
        else 
            x3_real_ap_vld_in_sig <= x3_real_ap_vld_preg;
        end if; 
    end process;


    x3_real_blk_n_assign_proc : process(x3_real_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x3_real_blk_n <= x3_real_ap_vld;
        else 
            x3_real_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x3_real_in_sig_assign_proc : process(x3_real, x3_real_preg, x3_real_ap_vld)
    begin
        if ((x3_real_ap_vld = ap_const_logic_1)) then 
            x3_real_in_sig <= x3_real;
        else 
            x3_real_in_sig <= x3_real_preg;
        end if; 
    end process;


    x4_imag_ap_vld_in_sig_assign_proc : process(x4_imag_ap_vld, x4_imag_ap_vld_preg)
    begin
        if ((x4_imag_ap_vld = ap_const_logic_1)) then 
            x4_imag_ap_vld_in_sig <= x4_imag_ap_vld;
        else 
            x4_imag_ap_vld_in_sig <= x4_imag_ap_vld_preg;
        end if; 
    end process;


    x4_imag_blk_n_assign_proc : process(x4_imag_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x4_imag_blk_n <= x4_imag_ap_vld;
        else 
            x4_imag_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x4_imag_in_sig_assign_proc : process(x4_imag, x4_imag_preg, x4_imag_ap_vld)
    begin
        if ((x4_imag_ap_vld = ap_const_logic_1)) then 
            x4_imag_in_sig <= x4_imag;
        else 
            x4_imag_in_sig <= x4_imag_preg;
        end if; 
    end process;


    x4_real_ap_vld_in_sig_assign_proc : process(x4_real_ap_vld, x4_real_ap_vld_preg)
    begin
        if ((x4_real_ap_vld = ap_const_logic_1)) then 
            x4_real_ap_vld_in_sig <= x4_real_ap_vld;
        else 
            x4_real_ap_vld_in_sig <= x4_real_ap_vld_preg;
        end if; 
    end process;


    x4_real_blk_n_assign_proc : process(x4_real_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x4_real_blk_n <= x4_real_ap_vld;
        else 
            x4_real_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x4_real_in_sig_assign_proc : process(x4_real, x4_real_preg, x4_real_ap_vld)
    begin
        if ((x4_real_ap_vld = ap_const_logic_1)) then 
            x4_real_in_sig <= x4_real;
        else 
            x4_real_in_sig <= x4_real_preg;
        end if; 
    end process;


    x5_imag_ap_vld_in_sig_assign_proc : process(x5_imag_ap_vld, x5_imag_ap_vld_preg)
    begin
        if ((x5_imag_ap_vld = ap_const_logic_1)) then 
            x5_imag_ap_vld_in_sig <= x5_imag_ap_vld;
        else 
            x5_imag_ap_vld_in_sig <= x5_imag_ap_vld_preg;
        end if; 
    end process;


    x5_imag_blk_n_assign_proc : process(x5_imag_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x5_imag_blk_n <= x5_imag_ap_vld;
        else 
            x5_imag_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x5_imag_in_sig_assign_proc : process(x5_imag, x5_imag_preg, x5_imag_ap_vld)
    begin
        if ((x5_imag_ap_vld = ap_const_logic_1)) then 
            x5_imag_in_sig <= x5_imag;
        else 
            x5_imag_in_sig <= x5_imag_preg;
        end if; 
    end process;


    x5_real_ap_vld_in_sig_assign_proc : process(x5_real_ap_vld, x5_real_ap_vld_preg)
    begin
        if ((x5_real_ap_vld = ap_const_logic_1)) then 
            x5_real_ap_vld_in_sig <= x5_real_ap_vld;
        else 
            x5_real_ap_vld_in_sig <= x5_real_ap_vld_preg;
        end if; 
    end process;


    x5_real_blk_n_assign_proc : process(x5_real_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x5_real_blk_n <= x5_real_ap_vld;
        else 
            x5_real_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x5_real_in_sig_assign_proc : process(x5_real, x5_real_preg, x5_real_ap_vld)
    begin
        if ((x5_real_ap_vld = ap_const_logic_1)) then 
            x5_real_in_sig <= x5_real;
        else 
            x5_real_in_sig <= x5_real_preg;
        end if; 
    end process;


    x6_imag_ap_vld_in_sig_assign_proc : process(x6_imag_ap_vld, x6_imag_ap_vld_preg)
    begin
        if ((x6_imag_ap_vld = ap_const_logic_1)) then 
            x6_imag_ap_vld_in_sig <= x6_imag_ap_vld;
        else 
            x6_imag_ap_vld_in_sig <= x6_imag_ap_vld_preg;
        end if; 
    end process;


    x6_imag_blk_n_assign_proc : process(x6_imag_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x6_imag_blk_n <= x6_imag_ap_vld;
        else 
            x6_imag_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x6_imag_in_sig_assign_proc : process(x6_imag, x6_imag_preg, x6_imag_ap_vld)
    begin
        if ((x6_imag_ap_vld = ap_const_logic_1)) then 
            x6_imag_in_sig <= x6_imag;
        else 
            x6_imag_in_sig <= x6_imag_preg;
        end if; 
    end process;


    x6_real_ap_vld_in_sig_assign_proc : process(x6_real_ap_vld, x6_real_ap_vld_preg)
    begin
        if ((x6_real_ap_vld = ap_const_logic_1)) then 
            x6_real_ap_vld_in_sig <= x6_real_ap_vld;
        else 
            x6_real_ap_vld_in_sig <= x6_real_ap_vld_preg;
        end if; 
    end process;


    x6_real_blk_n_assign_proc : process(x6_real_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x6_real_blk_n <= x6_real_ap_vld;
        else 
            x6_real_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x6_real_in_sig_assign_proc : process(x6_real, x6_real_preg, x6_real_ap_vld)
    begin
        if ((x6_real_ap_vld = ap_const_logic_1)) then 
            x6_real_in_sig <= x6_real;
        else 
            x6_real_in_sig <= x6_real_preg;
        end if; 
    end process;


    x7_imag_ap_vld_in_sig_assign_proc : process(x7_imag_ap_vld, x7_imag_ap_vld_preg)
    begin
        if ((x7_imag_ap_vld = ap_const_logic_1)) then 
            x7_imag_ap_vld_in_sig <= x7_imag_ap_vld;
        else 
            x7_imag_ap_vld_in_sig <= x7_imag_ap_vld_preg;
        end if; 
    end process;


    x7_imag_blk_n_assign_proc : process(x7_imag_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x7_imag_blk_n <= x7_imag_ap_vld;
        else 
            x7_imag_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x7_imag_in_sig_assign_proc : process(x7_imag, x7_imag_preg, x7_imag_ap_vld)
    begin
        if ((x7_imag_ap_vld = ap_const_logic_1)) then 
            x7_imag_in_sig <= x7_imag;
        else 
            x7_imag_in_sig <= x7_imag_preg;
        end if; 
    end process;


    x7_real_ap_vld_in_sig_assign_proc : process(x7_real_ap_vld, x7_real_ap_vld_preg)
    begin
        if ((x7_real_ap_vld = ap_const_logic_1)) then 
            x7_real_ap_vld_in_sig <= x7_real_ap_vld;
        else 
            x7_real_ap_vld_in_sig <= x7_real_ap_vld_preg;
        end if; 
    end process;


    x7_real_blk_n_assign_proc : process(x7_real_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x7_real_blk_n <= x7_real_ap_vld;
        else 
            x7_real_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x7_real_in_sig_assign_proc : process(x7_real, x7_real_preg, x7_real_ap_vld)
    begin
        if ((x7_real_ap_vld = ap_const_logic_1)) then 
            x7_real_in_sig <= x7_real;
        else 
            x7_real_in_sig <= x7_real_preg;
        end if; 
    end process;


    x8_imag_ap_vld_in_sig_assign_proc : process(x8_imag_ap_vld, x8_imag_ap_vld_preg)
    begin
        if ((x8_imag_ap_vld = ap_const_logic_1)) then 
            x8_imag_ap_vld_in_sig <= x8_imag_ap_vld;
        else 
            x8_imag_ap_vld_in_sig <= x8_imag_ap_vld_preg;
        end if; 
    end process;


    x8_imag_blk_n_assign_proc : process(x8_imag_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x8_imag_blk_n <= x8_imag_ap_vld;
        else 
            x8_imag_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x8_imag_in_sig_assign_proc : process(x8_imag, x8_imag_preg, x8_imag_ap_vld)
    begin
        if ((x8_imag_ap_vld = ap_const_logic_1)) then 
            x8_imag_in_sig <= x8_imag;
        else 
            x8_imag_in_sig <= x8_imag_preg;
        end if; 
    end process;


    x8_real_ap_vld_in_sig_assign_proc : process(x8_real_ap_vld, x8_real_ap_vld_preg)
    begin
        if ((x8_real_ap_vld = ap_const_logic_1)) then 
            x8_real_ap_vld_in_sig <= x8_real_ap_vld;
        else 
            x8_real_ap_vld_in_sig <= x8_real_ap_vld_preg;
        end if; 
    end process;


    x8_real_blk_n_assign_proc : process(x8_real_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x8_real_blk_n <= x8_real_ap_vld;
        else 
            x8_real_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x8_real_in_sig_assign_proc : process(x8_real, x8_real_preg, x8_real_ap_vld)
    begin
        if ((x8_real_ap_vld = ap_const_logic_1)) then 
            x8_real_in_sig <= x8_real;
        else 
            x8_real_in_sig <= x8_real_preg;
        end if; 
    end process;


    x9_imag_ap_vld_in_sig_assign_proc : process(x9_imag_ap_vld, x9_imag_ap_vld_preg)
    begin
        if ((x9_imag_ap_vld = ap_const_logic_1)) then 
            x9_imag_ap_vld_in_sig <= x9_imag_ap_vld;
        else 
            x9_imag_ap_vld_in_sig <= x9_imag_ap_vld_preg;
        end if; 
    end process;


    x9_imag_blk_n_assign_proc : process(x9_imag_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x9_imag_blk_n <= x9_imag_ap_vld;
        else 
            x9_imag_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x9_imag_in_sig_assign_proc : process(x9_imag, x9_imag_preg, x9_imag_ap_vld)
    begin
        if ((x9_imag_ap_vld = ap_const_logic_1)) then 
            x9_imag_in_sig <= x9_imag;
        else 
            x9_imag_in_sig <= x9_imag_preg;
        end if; 
    end process;


    x9_real_ap_vld_in_sig_assign_proc : process(x9_real_ap_vld, x9_real_ap_vld_preg)
    begin
        if ((x9_real_ap_vld = ap_const_logic_1)) then 
            x9_real_ap_vld_in_sig <= x9_real_ap_vld;
        else 
            x9_real_ap_vld_in_sig <= x9_real_ap_vld_preg;
        end if; 
    end process;


    x9_real_blk_n_assign_proc : process(x9_real_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x9_real_blk_n <= x9_real_ap_vld;
        else 
            x9_real_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x9_real_in_sig_assign_proc : process(x9_real, x9_real_preg, x9_real_ap_vld)
    begin
        if ((x9_real_ap_vld = ap_const_logic_1)) then 
            x9_real_in_sig <= x9_real;
        else 
            x9_real_in_sig <= x9_real_preg;
        end if; 
    end process;

end behav;
